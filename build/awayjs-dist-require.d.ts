declare module "awayjs-core/lib/utils/ColorUtils" {
	/**
	 *
	 */
	class ColorUtils {
	    static float32ColorToARGB(float32Color: number): number[];
	    private static componentToHex(c);
	    static RGBToHexString(argb: number[]): string;
	    static ARGBToHexString(argb: number[]): string;
	}
	export = ColorUtils;
	
}
declare module "awayjs-core/lib/geom/ColorTransform" {
	/**
	 * The ColorTransform class lets you adjust the color values in a display
	 * object. The color adjustment or <i>color transformation</i> can be applied
	 * to all four channels: red, green, blue, and alpha transparency.
	 *
	 * <p>When a ColorTransform object is applied to a display object, a new value
	 * for each color channel is calculated like this:</p>
	 *
	 * <ul>
	 *   <li>New red value = (old red value * <code>redMultiplier</code>) +
	 * <code>redOffset</code></li>
	 *   <li>New green value = (old green value * <code>greenMultiplier</code>) +
	 * <code>greenOffset</code></li>
	 *   <li>New blue value = (old blue value * <code>blueMultiplier</code>) +
	 * <code>blueOffset</code></li>
	 *   <li>New alpha value = (old alpha value * <code>alphaMultiplier</code>) +
	 * <code>alphaOffset</code></li>
	 * </ul>
	 *
	 * <p>If any of the color channel values is greater than 255 after the
	 * calculation, it is set to 255. If it is less than 0, it is set to 0.</p>
	 *
	 * <p>You can use ColorTransform objects in the following ways:</p>
	 *
	 * <ul>
	 *   <li>In the <code>colorTransform</code> parameter of the
	 * <code>colorTransform()</code> method of the BitmapData class</li>
	 *   <li>As the <code>colorTransform</code> property of a Transform object
	 * (which can be used as the <code>transform</code> property of a display
	 * object)</li>
	 * </ul>
	 *
	 * <p>You must use the <code>new ColorTransform()</code> constructor to create
	 * a ColorTransform object before you can call the methods of the
	 * ColorTransform object.</p>
	 *
	 * <p>Color transformations do not apply to the background color of a movie
	 * clip(such as a loaded SWF object). They apply only to graphics and symbols
	 * that are attached to the movie clip.</p>
	 */
	class ColorTransform {
	    /**
	     * A decimal value that is multiplied with the alpha transparency channel
	     * value.
	     *
	     * <p>If you set the alpha transparency value of a display object directly by
	     * using the <code>alpha</code> property of the DisplayObject instance, it
	     * affects the value of the <code>alphaMultiplier</code> property of that
	     * display object's <code>transform.colorTransform</code> property.</p>
	     */
	    alphaMultiplier: number;
	    /**
	     * A number from -255 to 255 that is added to the alpha transparency channel
	     * value after it has been multiplied by the <code>alphaMultiplier</code>
	     * value.
	     */
	    alphaOffset: number;
	    /**
	     * A decimal value that is multiplied with the blue channel value.
	     */
	    blueMultiplier: number;
	    /**
	     * A number from -255 to 255 that is added to the blue channel value after it
	     * has been multiplied by the <code>blueMultiplier</code> value.
	     */
	    blueOffset: number;
	    /**
	     * A decimal value that is multiplied with the green channel value.
	     */
	    greenMultiplier: number;
	    /**
	     * A number from -255 to 255 that is added to the green channel value after
	     * it has been multiplied by the <code>greenMultiplier</code> value.
	     */
	    greenOffset: number;
	    /**
	     * A decimal value that is multiplied with the red channel value.
	     */
	    redMultiplier: number;
	    /**
	     * A number from -255 to 255 that is added to the red channel value after it
	     * has been multiplied by the <code>redMultiplier</code> value.
	     */
	    redOffset: number;
	    /**
	     * The RGB color value for a ColorTransform object.
	     *
	     * <p>When you set this property, it changes the three color offset values
	     * (<code>redOffset</code>, <code>greenOffset</code>, and
	     * <code>blueOffset</code>) accordingly, and it sets the three color
	     * multiplier values(<code>redMultiplier</code>,
	     * <code>greenMultiplier</code>, and <code>blueMultiplier</code>) to 0. The
	     * alpha transparency multiplier and offset values do not change.</p>
	     *
	     * <p>When you pass a value for this property, use the format
	     * 0x<i>RRGGBB</i>. <i>RR</i>, <i>GG</i>, and <i>BB</i> each consist of two
	     * hexadecimal digits that specify the offset of each color component. The 0x
	     * tells the ActionScript compiler that the number is a hexadecimal
	     * value.</p>
	     */
	    color: number;
	    /**
	     * Creates a ColorTransform object for a display object with the specified
	     * color channel values and alpha values.
	     *
	     * @param redMultiplier   The value for the red multiplier, in the range from
	     *                        0 to 1.
	     * @param greenMultiplier The value for the green multiplier, in the range
	     *                        from 0 to 1.
	     * @param blueMultiplier  The value for the blue multiplier, in the range
	     *                        from 0 to 1.
	     * @param alphaMultiplier The value for the alpha transparency multiplier, in
	     *                        the range from 0 to 1.
	     * @param redOffset       The offset value for the red color channel, in the
	     *                        range from -255 to 255.
	     * @param greenOffset     The offset value for the green color channel, in
	     *                        the range from -255 to 255.
	     * @param blueOffset      The offset for the blue color channel value, in the
	     *                        range from -255 to 255.
	     * @param alphaOffset     The offset for alpha transparency channel value, in
	     *                        the range from -255 to 255.
	     */
	    constructor(redMultiplier?: number, greenMultiplier?: number, blueMultiplier?: number, alphaMultiplier?: number, redOffset?: number, greenOffset?: number, blueOffset?: number, alphaOffset?: number);
	    /**
	     * Concatenates the ColorTranform object specified by the <code>second</code>
	     * parameter with the current ColorTransform object and sets the current
	     * object as the result, which is an additive combination of the two color
	     * transformations. When you apply the concatenated ColorTransform object,
	     * the effect is the same as applying the <code>second</code> color
	     * transformation after the <i>original</i> color transformation.
	     *
	     * @param second The ColorTransform object to be combined with the current
	     *               ColorTransform object.
	     */
	    concat(second: ColorTransform): void;
	}
	export = ColorTransform;
	
}
declare module "awayjs-core/lib/geom/Point" {
	/**
	 * The Point object represents a location in a two-dimensional coordinate
	 * system, where <i>x</i> represents the horizontal axis and <i>y</i>
	 * represents the vertical axis.
	 *
	 * <p>The following code creates a point at(0,0):</p>
	 *
	 * <p>Methods and properties of the following classes use Point objects:</p>
	 *
	 * <ul>
	 *   <li>BitmapData</li>
	 *   <li>DisplayObject</li>
	 *   <li>DisplayObjectContainer</li>
	 *   <li>DisplacementMapFilter</li>
	 *   <li>NativeWindow</li>
	 *   <li>Matrix</li>
	 *   <li>Rectangle</li>
	 * </ul>
	 *
	 * <p>You can use the <code>new Point()</code> constructor to create a Point
	 * object.</p>
	 */
	class Point {
	    /**
	     * The horizontal coordinate of the point. The default value is 0.
	     */
	    x: number;
	    /**
	     * The vertical coordinate of the point. The default value is 0.
	     */
	    y: number;
	    /**
	     * The length of the line segment from(0,0) to this point.
	     */
	    length: number;
	    /**
	     * Creates a new point. If you pass no parameters to this method, a point is
	     * created at(0,0).
	     *
	     * @param x The horizontal coordinate.
	     * @param y The vertical coordinate.
	     */
	    constructor(x?: number, y?: number);
	    /**
	     * Adds the coordinates of another point to the coordinates of this point to
	     * create a new point.
	     *
	     * @param v The point to be added.
	     * @return The new point.
	     */
	    add(v: Point): Point;
	    /**
	     * Creates a copy of this Point object.
	     *
	     * @return The new Point object.
	     */
	    clone(): Point;
	    copyFrom(sourcePoint: Point): void;
	    /**
	     * Determines whether two points are equal. Two points are equal if they have
	     * the same <i>x</i> and <i>y</i> values.
	     *
	     * @param toCompare The point to be compared.
	     * @return A value of <code>true</code> if the object is equal to this Point
	     *         object; <code>false</code> if it is not equal.
	     */
	    equals(toCompare: Point): boolean;
	    /**
	     * Scales the line segment between(0,0) and the current point to a set
	     * length.
	     *
	     * @param thickness The scaling value. For example, if the current point is
	     *                 (0,5), and you normalize it to 1, the point returned is
	     *                  at(0,1).
	     */
	    normalize(thickness?: number): void;
	    /**
	     * Offsets the Point object by the specified amount. The value of
	     * <code>dx</code> is added to the original value of <i>x</i> to create the
	     * new <i>x</i> value. The value of <code>dy</code> is added to the original
	     * value of <i>y</i> to create the new <i>y</i> value.
	     *
	     * @param dx The amount by which to offset the horizontal coordinate,
	     *           <i>x</i>.
	     * @param dy The amount by which to offset the vertical coordinate, <i>y</i>.
	     */
	    offset(dx: number, dy: number): void;
	    setTo(xa: number, ya: number): void;
	    /**
	     * Subtracts the coordinates of another point from the coordinates of this
	     * point to create a new point.
	     *
	     * @param v The point to be subtracted.
	     * @return The new point.
	     */
	    subtract(v: Point): Point;
	    /**
	     * Returns a string that contains the values of the <i>x</i> and <i>y</i>
	     * coordinates. The string has the form <code>"(x=<i>x</i>,
	     * y=<i>y</i>)"</code>, so calling the <code>toString()</code> method for a
	     * point at 23,17 would return <code>"(x=23, y=17)"</code>.
	     *
	     * @return The string representation of the coordinates.
	     */
	    toString(): string;
	    /**
	     * Returns the distance between <code>pt1</code> and <code>pt2</code>.
	     *
	     * @param pt1 The first point.
	     * @param pt2 The second point.
	     * @return The distance between the first and second points.
	     */
	    static distance(pt1: Point, pt2: Point): number;
	    /**
	     * Determines a point between two specified points. The parameter
	     * <code>f</code> determines where the new interpolated point is located
	     * relative to the two end points specified by parameters <code>pt1</code>
	     * and <code>pt2</code>. The closer the value of the parameter <code>f</code>
	     * is to <code>1.0</code>, the closer the interpolated point is to the first
	     * point(parameter <code>pt1</code>). The closer the value of the parameter
	     * <code>f</code> is to 0, the closer the interpolated point is to the second
	     * point(parameter <code>pt2</code>).
	     *
	     * @param pt1 The first point.
	     * @param pt2 The second point.
	     * @param f   The level of interpolation between the two points. Indicates
	     *            where the new point will be, along the line between
	     *            <code>pt1</code> and <code>pt2</code>. If <code>f</code>=1,
	     *            <code>pt1</code> is returned; if <code>f</code>=0,
	     *            <code>pt2</code> is returned.
	     * @return The new, interpolated point.
	     */
	    static interpolate(pt1: Point, pt2: Point, f: number): Point;
	    /**
	     * Converts a pair of polar coordinates to a Cartesian point coordinate.
	     *
	     * @param len   The length coordinate of the polar pair.
	     * @param angle The angle, in radians, of the polar pair.
	     * @return The Cartesian point.
	     */
	    static polar(len: number, angle: number): Point;
	}
	export = Point;
	
}
declare module "awayjs-core/lib/geom/Vector3D" {
	/**
	 * The Vector3D class represents a point or a location in the three-dimensional
	 * space using the Cartesian coordinates x, y, and z. As in a two-dimensional
	 * space, the x property represents the horizontal axis and the y property
	 * represents the vertical axis. In three-dimensional space, the z property
	 * represents depth. The value of the x property increases as the object moves
	 * to the right. The value of the y property increases as the object moves
	 * down. The z property increases as the object moves farther from the point
	 * of view. Using perspective projection and scaling, the object is seen to be
	 * bigger when near and smaller when farther away from the screen. As in a
	 * right-handed three-dimensional coordinate system, the positive z-axis points
	 * away from the viewer and the value of the z property increases as the object
	 * moves away from the viewer's eye. The origin point (0,0,0) of the global
	 * space is the upper-left corner of the stage.
	 *
	 * <p>The Vector3D class can also represent a direction, an arrow pointing from
	 * the origin of the coordinates, such as (0,0,0), to an endpoint; or a
	 * floating-point component of an RGB (Red, Green, Blue) color model.</p>
	 *
	 * <p>Quaternion notation introduces a fourth element, the w property, which
	 * provides additional orientation information. For example, the w property can
	 * define an angle of rotation of a Vector3D object. The combination of the
	 * angle of rotation and the coordinates x, y, and z can determine the display
	 * object's orientation. Here is a representation of Vector3D elements in
	 * matrix notation:</p>
	 */
	class Vector3D {
	    /**
	     * The x axis defined as a Vector3D object with coordinates (1,0,0).
	     */
	    static X_AXIS: Vector3D;
	    /**
	     * The y axis defined as a Vector3D object with coordinates (0,1,0).
	     */
	    static Y_AXIS: Vector3D;
	    /**
	     * The z axis defined as a Vector3D object with coordinates (0,0,1).
	     */
	    static Z_AXIS: Vector3D;
	    /**
	     * The first element of a Vector3D object, such as the x coordinate of
	     * a point in the three-dimensional space. The default value is 0.
	     */
	    x: number;
	    y: number;
	    /**
	     * The third element of a Vector3D object, such as the y coordinate of
	     * a point in the three-dimensional space. The default value is 0.
	     */
	    z: number;
	    /**
	     * TThe fourth element of a Vector3D object (in addition to the x, y,
	     * and z properties) can hold data such as the angle of rotation. The
	     * default value is 0.
	     *
	     * <p>Quaternion notation employs an angle as the fourth element in
	     * its calculation of three-dimensional rotation. The w property can
	     * be used to define the angle of rotation about the Vector3D object.
	     * The combination of the rotation angle and the coordinates (x,y,z)
	     * determines the display object's orientation.</p>
	     *
	     * <p>In addition, the w property can be used as a perspective warp
	     * factor for a projected three-dimensional position or as a projection
	     * transform value in representing a three-dimensional coordinate
	     * projected into the two-dimensional space. For example, you can
	     * create a projection matrix using the <code>Matrix3D.rawData</code>
	     * property, that, when applied to a Vector3D object, produces a
	     * transform value in the Vector3D object's fourth element (the w
	     * property). Dividing the Vector3D object's other elements by the
	     * transform value then produces a projected Vector3D object. You can
	     * use the <code>Vector3D.project()</code> method to divide the first
	     * three elements of a Vector3D object by its fourth element.</p>
	     */
	    w: number;
	    /**
	     * The length, magnitude, of the current Vector3D object from the
	     * origin (0,0,0) to the object's x, y, and z coordinates. The w
	     * property is ignored. A unit vector has a length or magnitude of
	     * one.
	     */
	    length: number;
	    /**
	     * The square of the length of the current Vector3D object, calculated
	     * using the x, y, and z properties. The w property is ignored. Use the
	     * <code>lengthSquared()</code> method whenever possible instead of the
	     * slower <code>Math.sqrt()</code> method call of the
	     * <code>Vector3D.length()</code> method.
	     */
	    lengthSquared: number;
	    /**
	     * Creates an instance of a Vector3D object. If you do not specify a
	     * parameter for the constructor, a Vector3D object is created with
	     * the elements (0,0,0,0).
	     *
	     * @param x The first element, such as the x coordinate.
	     * @param y The second element, such as the y coordinate.
	     * @param z The third element, such as the z coordinate.
	     * @param w An optional element for additional data such as the angle
	     *          of rotation.
	     */
	    constructor(x?: number, y?: number, z?: number, w?: number);
	    /**
	     * Adds the value of the x, y, and z elements of the current Vector3D
	     * object to the values of the x, y, and z elements of another Vector3D
	     * object. The <code>add()</code> method does not change the current
	     * Vector3D object. Instead, it returns a new Vector3D object with
	     * the new values.
	     *
	     * <p>The result of adding two vectors together is a resultant vector.
	     * One way to visualize the result is by drawing a vector from the
	     * origin or tail of the first vector to the end or head of the second
	     * vector. The resultant vector is the distance between the origin
	     * point of the first vector and the end point of the second vector.
	     * </p>
	     */
	    add(a: Vector3D): Vector3D;
	    /**
	     * Returns the angle in radians between two vectors. The returned angle
	     * is the smallest radian the first Vector3D object rotates until it
	     * aligns with the second Vector3D object.
	     *
	     * <p>The <code>angleBetween()</code> method is a static method. You
	     * can use it directly as a method of the Vector3D class.</p>
	     *
	     * <p>To convert a degree to a radian, you can use the following
	     * formula:</p>
	     *
	     * <p><code>radian = Math.PI/180 * degree</code></p>
	     *
	     * @param a The first Vector3D object.
	     * @param b The second Vector3D object.
	     * @returns The angle between two Vector3D objects.
	     */
	    static angleBetween(a: Vector3D, b: Vector3D): number;
	    /**
	     * Returns a new Vector3D object that is an exact copy of the current
	     * Vector3D object.
	     *
	     * @returns A new Vector3D object that is a copy of the current
	     * Vector3D object.
	     */
	    clone(): Vector3D;
	    /**
	     * Copies all of vector data from the source Vector3D object into the
	     * calling Vector3D object.
	     *
	     * @param src The Vector3D object from which to copy the data.
	     */
	    copyFrom(src: Vector3D): void;
	    /**
	     * Returns a new Vector3D object that is perpendicular (at a right
	     * angle) to the current Vector3D and another Vector3D object. If the
	     * returned Vector3D object's coordinates are (0,0,0), then the two
	     * Vector3D objects are parallel to each other.
	     *
	     * <p>You can use the normalized cross product of two vertices of a
	     * polygon surface with the normalized vector of the camera or eye
	     * viewpoint to get a dot product. The value of the dot product can
	     * identify whether a surface of a three-dimensional object is hidden
	     * from the viewpoint.</p>
	     *
	     * @param a A second Vector3D object.
	     * @returns A new Vector3D object that is perpendicular to the current
	     *          Vector3D object and the Vector3D object specified as the
	     *          parameter.
	     */
	    crossProduct(a: Vector3D): Vector3D;
	    /**
	     * Decrements the value of the x, y, and z elements of the current
	     * Vector3D object by the values of the x, y, and z elements of
	     * specified Vector3D object. Unlike the
	     * <code>Vector3D.subtract()</code> method, the
	     * <code>decrementBy()</code> method changes the current Vector3D
	     * object and does not return a new Vector3D object.
	     *
	     * @param a The Vector3D object containing the values to subtract from
	     *          the current Vector3D object.
	     */
	    decrementBy(a: Vector3D): void;
	    /**
	     * Returns the distance between two Vector3D objects. The
	     * <code>distance()</code> method is a static method. You can use it
	     * directly as a method of the Vector3D class to get the Euclidean
	     * distance between two three-dimensional points.
	     *
	     * @param pt1 A Vector3D object as the first three-dimensional point.
	     * @param pt2 A Vector3D object as the second three-dimensional point.
	     * @returns The distance between two Vector3D objects.
	     */
	    static distance(pt1: Vector3D, pt2: Vector3D): number;
	    /**
	     * If the current Vector3D object and the one specified as the
	     * parameter are unit vertices, this method returns the cosine of the
	     * angle between the two vertices. Unit vertices are vertices that
	     * point to the same direction but their length is one. They remove the
	     * length of the vector as a factor in the result. You can use the
	     * <code>normalize()</code> method to convert a vector to a unit
	     * vector.
	     *
	     * <p>The <code>dotProduct()</code> method finds the angle between two
	     * vertices. It is also used in backface culling or lighting
	     * calculations. Backface culling is a procedure for determining which
	     * surfaces are hidden from the viewpoint. You can use the normalized
	     * vertices from the camera, or eye, viewpoint and the cross product of
	     * the vertices of a polygon surface to get the dot product. If the dot
	     * product is less than zero, then the surface is facing the camera or
	     * the viewer. If the two unit vertices are perpendicular to each
	     * other, they are orthogonal and the dot product is zero. If the two
	     * vertices are parallel to each other, the dot product is one.</p>
	     *
	     * @param a The second Vector3D object.
	     * @returns A scalar which is the dot product of the current Vector3D
	     *          object and the specified Vector3D object.
	     *
	     * @see away.geom.Vector3D#crossProduct()
	     * @see away.geom.Vector3D#normalize()
	     */
	    dotProduct(a: Vector3D): number;
	    /**
	     * Determines whether two Vector3D objects are equal by comparing the
	     * x, y, and z elements of the current Vector3D object with a
	     * specified Vector3D object. If the values of these elements are the
	     * same, the two Vector3D objects are equal. If the second optional
	     * parameter is set to true, all four elements of the Vector3D objects,
	     * including the w property, are compared.
	     */
	    /**
	     *
	     * @param toCompare The Vector3D object to be compared with the current
	     *                  Vector3D object.
	     * @param allFour   An optional parameter that specifies whether the w
	     *                  property of the Vector3D objects is used in the
	     *                  comparison.
	     * @returns A value of true if the specified Vector3D object is equal
	     *          to the current Vector3D object; false if it is not equal.
	     */
	    equals(toCompare: Vector3D, allFour?: boolean): boolean;
	    /**
	     * Increments the value of the x, y, and z elements of the current
	     * Vector3D object by the values of the x, y, and z elements of a
	     * specified Vector3D object. Unlike the <code>Vector3D.add()</code>
	     * method, the <code>incrementBy()</code> method changes the current
	     * Vector3D object and does not return a new Vector3D object.
	     *
	     * @param a The Vector3D object to be added to the current Vector3D
	     *          object.
	     */
	    incrementBy(a: Vector3D): void;
	    /**
	     * Compares the elements of the current Vector3D object with the
	     * elements of a specified Vector3D object to determine whether they
	     * are nearly equal. The two Vector3D objects are nearly equal if the
	     * value of all the elements of the two vertices are equal, or the
	     * result of the comparison is within the tolerance range. The
	     * difference between two elements must be less than the number
	     * specified as the tolerance parameter. If the third optional
	     * parameter is set to <code>true</code>, all four elements of the
	     * Vector3D objects, including the <code>w</code> property, are
	     * compared. Otherwise, only the x, y, and z elements are included in
	     * the comparison.
	     */
	    /**
	     *
	     * @param toCompare The Vector3D object to be compared with the current
	     *                  Vector3D object.
	     * @param tolerance A number determining the tolerance factor. If the
	     *                  difference between the values of the Vector3D
	     *                  element specified in the toCompare parameter and
	     *                  the current Vector3D element is less than the
	     *                  tolerance number, the two values are considered
	     *                  nearly equal.
	     * @param allFour   An optional parameter that specifies whether the w
	     *                  property of the Vector3D objects is used in the
	     *                  comparison.
	     * @returns A value of true if the specified Vector3D object is nearly
	     *          equal to the current Vector3D object; false if it is not
	     *          equal.
	     *
	     * @see away.geom.Vector3D#equals()
	     */
	    nearEquals(toCompare: Vector3D, tolerance: number, allFour?: boolean): boolean;
	    /**
	     * Sets the current Vector3D object to its inverse. The inverse object
	     * is also considered the opposite of the original object. The value of
	     * the x, y, and z properties of the current Vector3D object is changed
	     * to -x, -y, and -z.
	     */
	    negate(): void;
	    /**
	     * Converts a Vector3D object to a unit vector by dividing the first
	     * three elements (x, y, z) by the length of the vector. Unit vertices
	     * are vertices that have a direction but their length is one. They
	     * simplify vector calculations by removing length as a factor.
	     */
	    /**
	     * Scales the line segment between(0,0) and the current point to a set
	     * length.
	     *
	     * @param thickness The scaling value. For example, if the current
	     *                  Vector3D object is (0,3,4), and you normalize it to
	     *                  1, the point returned is at(0,0.6,0.8).
	     */
	    normalize(thickness?: number): void;
	    /**
	     * Divides the value of the <code>x</code>, <code>y</code>, and
	     * <code>z</code> properties of the current Vector3D object by the
	     * value of its <code>w</code> property.
	     *
	     * <p>If the current Vector3D object is the result of multiplying a
	     * Vector3D object by a projection Matrix3D object, the w property can
	     * hold the transform value. The <code>project()</code> method then can
	     * complete the projection by dividing the elements by the
	     * <code>w</code> property. Use the <code>Matrix3D.rawData</code>
	     * property to create a projection Matrix3D object.</p>
	     */
	    project(): void;
	    /**
	     * Scales the current Vector3D object by a scalar, a magnitude. The
	     * Vector3D object's x, y, and z elements are multiplied by the scalar
	     * number specified in the parameter. For example, if the vector is
	     * scaled by ten, the result is a vector that is ten times longer. The
	     * scalar can also change the direction of the vector. Multiplying the
	     * vector by a negative number reverses its direction.
	     *
	     * @param s A multiplier (scalar) used to scale a Vector3D object.
	
	     */
	    scaleBy(s: number): void;
	    /**
	     * Sets the members of Vector3D to the specified values
	     *
	     * @param xa The first element, such as the x coordinate.
	     * @param ya The second element, such as the y coordinate.
	     * @param za The third element, such as the z coordinate.
	     */
	    setTo(xa: number, ya: number, za: number): void;
	    /**
	     * Subtracts the value of the x, y, and z elements of the current
	     * Vector3D object from the values of the x, y, and z elements of
	     * another Vector3D object. The <code>subtract()</code> method does not
	     * change the current Vector3D object. Instead, this method returns a
	     * new Vector3D object with the new values.
	     *
	     * @param a The Vector3D object to be subtracted from the current
	     *          Vector3D object.
	     * @returns A new Vector3D object that is the difference between the
	     *          current Vector3D and the specified Vector3D object.
	     *
	     * @see away.geom.Vector3D#decrementBy()
	     */
	    subtract(a: Vector3D): Vector3D;
	    /**
	     * Returns a string representation of the current Vector3D object. The
	     * string contains the values of the x, y, and z properties.
	     */
	    toString(): string;
	}
	export = Vector3D;
	
}
declare module "awayjs-core/lib/errors/Error" {
	class Error {
	    private _errorID;
	    private _messsage;
	    private _name;
	    constructor(message?: string, id?: number, _name?: string);
	    /**
	     *
	     * @returns {string}
	     */
	    /**
	     *
	     * @param value
	     */
	    message: string;
	    /**
	     *
	     * @returns {string}
	     */
	    /**
	     *
	     * @param value
	     */
	    name: string;
	    /**
	     *
	     * @returns {number}
	     */
	    errorID: number;
	}
	export = Error;
	
}
declare module "awayjs-core/lib/errors/ArgumentError" {
	import Error = require("awayjs-core/lib/errors/Error");
	/**
	 * AbstractMethodError is thrown when an abstract method is called. The method in question should be overridden
	 * by a concrete subclass.
	 */
	class ArgumentError extends Error {
	    /**
	     * Create a new ArgumentError.
	     *
	     * @param message An optional message to override the default error message.
	     * @param id The id of the error.
	     */
	    constructor(message?: string, id?: number);
	}
	export = ArgumentError;
	
}
declare module "awayjs-core/lib/geom/Matrix" {
	import Point = require("awayjs-core/lib/geom/Point");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	/**
	 * The Matrix class represents a transformation matrix that determines how to
	 * map points from one coordinate space to another. You can perform various
	 * graphical transformations on a display object by setting the properties of
	 * a Matrix object, applying that Matrix object to the <code>matrix</code>
	 * property of a Transform object, and then applying that Transform object as
	 * the <code>transform</code> property of the display object. These
	 * transformation functions include translation(<i>x</i> and <i>y</i>
	 * repositioning), rotation, scaling, and skewing.
	 *
	 * <p>Together these types of transformations are known as <i>affine
	 * transformations</i>. Affine transformations preserve the straightness of
	 * lines while transforming, so that parallel lines stay parallel.</p>
	 *
	 * <p>To apply a transformation matrix to a display object, you create a
	 * Transform object, set its <code>matrix</code> property to the
	 * transformation matrix, and then set the <code>transform</code> property of
	 * the display object to the Transform object. Matrix objects are also used as
	 * parameters of some methods, such as the following:</p>
	 *
	 * <ul>
	 *   <li>The <code>draw()</code> method of a BitmapData object</li>
	 *   <li>The <code>beginBitmapFill()</code> method,
	 * <code>beginGradientFill()</code> method, or
	 * <code>lineGradientStyle()</code> method of a Graphics object</li>
	 * </ul>
	 *
	 * <p>A transformation matrix object is a 3 x 3 matrix with the following
	 * contents:</p>
	 *
	 * <p>In traditional transformation matrixes, the <code>u</code>,
	 * <code>v</code>, and <code>w</code> properties provide extra capabilities.
	 * The Matrix class can only operate in two-dimensional space, so it always
	 * assumes that the property values <code>u</code> and <code>v</code> are 0.0,
	 * and that the property value <code>w</code> is 1.0. The effective values of
	 * the matrix are as follows:</p>
	 *
	 * <p>You can get and set the values of all six of the other properties in a
	 * Matrix object: <code>a</code>, <code>b</code>, <code>c</code>,
	 * <code>d</code>, <code>tx</code>, and <code>ty</code>.</p>
	 *
	 * <p>The Matrix class supports the four major types of transformations:
	 * translation, scaling, rotation, and skewing. You can set three of these
	 * transformations by using specialized methods, as described in the following
	 * table: </p>
	 *
	 * <p>Each transformation function alters the current matrix properties so
	 * that you can effectively combine multiple transformations. To do this, you
	 * call more than one transformation function before applying the matrix to
	 * its display object target(by using the <code>transform</code> property of
	 * that display object).</p>
	 *
	 * <p>Use the <code>new Matrix()</code> constructor to create a Matrix object
	 * before you can call the methods of the Matrix object.</p>
	 */
	class Matrix {
	    /**
	     * The value that affects the positioning of pixels along the <i>x</i> axis
	     * when scaling or rotating an image.
	     */
	    a: number;
	    /**
	     * The value that affects the positioning of pixels along the <i>y</i> axis
	     * when rotating or skewing an image.
	     */
	    b: number;
	    /**
	     * The value that affects the positioning of pixels along the <i>x</i> axis
	     * when rotating or skewing an image.
	     */
	    c: number;
	    /**
	     * The value that affects the positioning of pixels along the <i>y</i> axis
	     * when scaling or rotating an image.
	     */
	    d: number;
	    /**
	     * The distance by which to translate each point along the <i>x</i> axis.
	     */
	    tx: number;
	    /**
	     * The distance by which to translate each point along the <i>y</i> axis.
	     */
	    ty: number;
	    /**
	     * Creates a new Matrix object with the specified parameters. In matrix
	     * notation, the properties are organized like this:
	     *
	     * <p>If you do not provide any parameters to the <code>new Matrix()</code>
	     * constructor, it creates an <i>identity matrix</i> with the following
	     * values:</p>
	     *
	     * <p>In matrix notation, the identity matrix looks like this:</p>
	     *
	     * @param a  The value that affects the positioning of pixels along the
	     *           <i>x</i> axis when scaling or rotating an image.
	     * @param b  The value that affects the positioning of pixels along the
	     *           <i>y</i> axis when rotating or skewing an image.
	     * @param c  The value that affects the positioning of pixels along the
	     *           <i>x</i> axis when rotating or skewing an image.
	     * @param d  The value that affects the positioning of pixels along the
	     *           <i>y</i> axis when scaling or rotating an image..
	     * @param tx The distance by which to translate each point along the <i>x</i>
	     *           axis.
	     * @param ty The distance by which to translate each point along the <i>y</i>
	     *           axis.
	     */
	    constructor(a?: number, b?: number, c?: number, d?: number, tx?: number, ty?: number);
	    /**
	     * Returns a new Matrix object that is a clone of this matrix, with an exact
	     * copy of the contained object.
	     *
	     * @return A Matrix object.
	     */
	    clone(): Matrix;
	    /**
	     * Concatenates a matrix with the current matrix, effectively combining the
	     * geometric effects of the two. In mathematical terms, concatenating two
	     * matrixes is the same as combining them using matrix multiplication.
	     *
	     * <p>For example, if matrix <code>m1</code> scales an object by a factor of
	     * four, and matrix <code>m2</code> rotates an object by 1.5707963267949
	     * radians(<code>Math.PI/2</code>), then <code>m1.concat(m2)</code>
	     * transforms <code>m1</code> into a matrix that scales an object by a factor
	     * of four and rotates the object by <code>Math.PI/2</code> radians. </p>
	     *
	     * <p>This method replaces the source matrix with the concatenated matrix. If
	     * you want to concatenate two matrixes without altering either of the two
	     * source matrixes, first copy the source matrix by using the
	     * <code>clone()</code> method, as shown in the Class Examples section.</p>
	     *
	     * @param matrix The matrix to be concatenated to the source matrix.
	     */
	    concat(matrix: Matrix): void;
	    /**
	     * Copies a Vector3D object into specific column of the calling Matrix3D
	     * object.
	     *
	     * @param column   The column from which to copy the data from.
	     * @param vector3D The Vector3D object from which to copy the data.
	     */
	    copyColumnFrom(column: number, vector3D: Vector3D): void;
	    /**
	     * Copies specific column of the calling Matrix object into the Vector3D
	     * object. The w element of the Vector3D object will not be changed.
	     *
	     * @param column   The column from which to copy the data from.
	     * @param vector3D The Vector3D object from which to copy the data.
	     */
	    copyColumnTo(column: number, vector3D: Vector3D): void;
	    /**
	     * Copies all of the matrix data from the source Point object into the
	     * calling Matrix object.
	     *
	     * @param sourceMatrix The Matrix object from which to copy the data.
	     */
	    copyFrom(sourceMatrix: Matrix): void;
	    /**
	     * Copies a Vector3D object into specific row of the calling Matrix object.
	     *
	     * @param row      The row from which to copy the data from.
	     * @param vector3D The Vector3D object from which to copy the data.
	     */
	    copyRowFrom(row: number, vector3D: Vector3D): void;
	    /**
	     * Copies specific row of the calling Matrix object into the Vector3D object.
	     * The w element of the Vector3D object will not be changed.
	     *
	     * @param row      The row from which to copy the data from.
	     * @param vector3D The Vector3D object from which to copy the data.
	     */
	    copyRowTo(row: number, vector3D: Vector3D): void;
	    /**
	     * Includes parameters for scaling, rotation, and translation. When applied
	     * to a matrix it sets the matrix's values based on those parameters.
	     *
	     * <p>Using the <code>createBox()</code> method lets you obtain the same
	     * matrix as you would if you applied the <code>identity()</code>,
	     * <code>rotate()</code>, <code>scale()</code>, and <code>translate()</code>
	     * methods in succession. For example, <code>mat1.createBox(2,2,Math.PI/4,
	     * 100, 100)</code> has the same effect as the following:</p>
	     *
	     * @param scaleX   The factor by which to scale horizontally.
	     * @param scaleY   The factor by which scale vertically.
	     * @param rotation The amount to rotate, in radians.
	     * @param tx       The number of pixels to translate(move) to the right
	     *                 along the <i>x</i> axis.
	     * @param ty       The number of pixels to translate(move) down along the
	     *                 <i>y</i> axis.
	     */
	    createBox(scaleX: number, scaleY: number, rotation?: number, tx?: number, ty?: number): void;
	    /**
	     * Creates the specific style of matrix expected by the
	     * <code>beginGradientFill()</code> and <code>lineGradientStyle()</code>
	     * methods of the Graphics class. Width and height are scaled to a
	     * <code>scaleX</code>/<code>scaleY</code> pair and the
	     * <code>tx</code>/<code>ty</code> values are offset by half the width and
	     * height.
	     *
	     * <p>For example, consider a gradient with the following
	     * characteristics:</p>
	     *
	     * <ul>
	     *   <li><code>GradientType.LINEAR</code></li>
	     *   <li>Two colors, green and blue, with the ratios array set to <code>[0,
	     * 255]</code></li>
	     *   <li><code>SpreadMethod.PAD</code></li>
	     *   <li><code>InterpolationMethod.LINEAR_RGB</code></li>
	     * </ul>
	     *
	     * <p>The following illustrations show gradients in which the matrix was
	     * defined using the <code>createGradientBox()</code> method with different
	     * parameter settings:</p>
	     *
	     * @param width    The width of the gradient box.
	     * @param height   The height of the gradient box.
	     * @param rotation The amount to rotate, in radians.
	     * @param tx       The distance, in pixels, to translate to the right along
	     *                 the <i>x</i> axis. This value is offset by half of the
	     *                 <code>width</code> parameter.
	     * @param ty       The distance, in pixels, to translate down along the
	     *                 <i>y</i> axis. This value is offset by half of the
	     *                 <code>height</code> parameter.
	     */
	    createGradientBox(width: number, height: number, rotation?: number, tx?: number, ty?: number): void;
	    /**
	     * Given a point in the pretransform coordinate space, returns the
	     * coordinates of that point after the transformation occurs. Unlike the
	     * standard transformation applied using the <code>transformPoint()</code>
	     * method, the <code>deltaTransformPoint()</code> method's transformation
	     * does not consider the translation parameters <code>tx</code> and
	     * <code>ty</code>.
	     *
	     * @param point The point for which you want to get the result of the matrix
	     *              transformation.
	     * @return The point resulting from applying the matrix transformation.
	     */
	    deltaTransformPoint(point: Point): Point;
	    /**
	     * Sets each matrix property to a value that causes a null transformation. An
	     * object transformed by applying an identity matrix will be identical to the
	     * original.
	     *
	     * <p>After calling the <code>identity()</code> method, the resulting matrix
	     * has the following properties: <code>a</code>=1, <code>b</code>=0,
	     * <code>c</code>=0, <code>d</code>=1, <code>tx</code>=0,
	     * <code>ty</code>=0.</p>
	     *
	     * <p>In matrix notation, the identity matrix looks like this:</p>
	     *
	     */
	    identity(): void;
	    /**
	     * Performs the opposite transformation of the original matrix. You can apply
	     * an inverted matrix to an object to undo the transformation performed when
	     * applying the original matrix.
	     */
	    invert(): void;
	    /**
	     * Returns a new Matrix object that is a clone of this matrix, with an exact
	     * copy of the contained object.
	     *
	     * @param matrix The matrix for which you want to get the result of the matrix
	     *               transformation.
	     * @return A Matrix object.
	     */
	    multiply(matrix: Matrix): Matrix;
	    /**
	     * Applies a rotation transformation to the Matrix object.
	     *
	     * <p>The <code>rotate()</code> method alters the <code>a</code>,
	     * <code>b</code>, <code>c</code>, and <code>d</code> properties of the
	     * Matrix object. In matrix notation, this is the same as concatenating the
	     * current matrix with the following:</p>
	     *
	     * @param angle The rotation angle in radians.
	     */
	    rotate(angle: number): void;
	    /**
	     * Applies a scaling transformation to the matrix. The <i>x</i> axis is
	     * multiplied by <code>sx</code>, and the <i>y</i> axis it is multiplied by
	     * <code>sy</code>.
	     *
	     * <p>The <code>scale()</code> method alters the <code>a</code> and
	     * <code>d</code> properties of the Matrix object. In matrix notation, this
	     * is the same as concatenating the current matrix with the following
	     * matrix:</p>
	     *
	     * @param sx A multiplier used to scale the object along the <i>x</i> axis.
	     * @param sy A multiplier used to scale the object along the <i>y</i> axis.
	     */
	    scale(sx: number, sy: number): void;
	    /**
	     * Sets the members of Matrix to the specified values.
	     *
	     * @param a  The value that affects the positioning of pixels along the
	     *           <i>x</i> axis when scaling or rotating an image.
	     * @param b  The value that affects the positioning of pixels along the
	     *           <i>y</i> axis when rotating or skewing an image.
	     * @param c  The value that affects the positioning of pixels along the
	     *           <i>x</i> axis when rotating or skewing an image.
	     * @param d  The value that affects the positioning of pixels along the
	     *           <i>y</i> axis when scaling or rotating an image..
	     * @param tx The distance by which to translate each point along the <i>x</i>
	     *           axis.
	     * @param ty The distance by which to translate each point along the <i>y</i>
	     *           axis.
	     */
	    setTo(a: number, b: number, c: number, d: number, tx: number, ty: number): void;
	    /**
	     * Returns a text value listing the properties of the Matrix object.
	     *
	     * @return A string containing the values of the properties of the Matrix
	     *         object: <code>a</code>, <code>b</code>, <code>c</code>,
	     *         <code>d</code>, <code>tx</code>, and <code>ty</code>.
	     */
	    toString(): string;
	    /**
	     * Returns the result of applying the geometric transformation represented by
	     * the Matrix object to the specified point.
	     *
	     * @param point The point for which you want to get the result of the Matrix
	     *              transformation.
	     * @return The point resulting from applying the Matrix transformation.
	     */
	    transformPoint(point: Point): Point;
	    /**
	     * Translates the matrix along the <i>x</i> and <i>y</i> axes, as specified
	     * by the <code>dx</code> and <code>dy</code> parameters.
	     *
	     * @param dx The amount of movement along the <i>x</i> axis to the right, in
	     *           pixels.
	     * @param dy The amount of movement down along the <i>y</i> axis, in pixels.
	     */
	    translate(dx: number, dy: number): void;
	}
	export = Matrix;
	
}
declare module "awayjs-core/lib/geom/Rectangle" {
	import Point = require("awayjs-core/lib/geom/Point");
	/**
	 * A Rectangle object is an area defined by its position, as indicated by its
	 * top-left corner point(<i>x</i>, <i>y</i>) and by its width and its height.
	 *
	 *
	 * <p>The <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties of the Rectangle class are independent of
	 * each other; changing the value of one property has no effect on the others.
	 * However, the <code>right</code> and <code>bottom</code> properties are
	 * integrally related to those four properties. For example, if you change the
	 * value of the <code>right</code> property, the value of the
	 * <code>width</code> property changes; if you change the <code>bottom</code>
	 * property, the value of the <code>height</code> property changes. </p>
	 *
	 * <p>The following methods and properties use Rectangle objects:</p>
	 *
	 * <ul>
	 *   <li>The <code>applyFilter()</code>, <code>colorTransform()</code>,
	 * <code>copyChannel()</code>, <code>copyPixels()</code>, <code>draw()</code>,
	 * <code>fillRect()</code>, <code>generateFilterRect()</code>,
	 * <code>getColorBoundsRect()</code>, <code>getPixels()</code>,
	 * <code>merge()</code>, <code>paletteMap()</code>,
	 * <code>pixelDisolve()</code>, <code>setPixels()</code>, and
	 * <code>threshold()</code> methods, and the <code>rect</code> property of the
	 * BitmapData class</li>
	 *   <li>The <code>getBounds()</code> and <code>getRect()</code> methods, and
	 * the <code>scrollRect</code> and <code>scale9Grid</code> properties of the
	 * DisplayObject class</li>
	 *   <li>The <code>getCharBoundaries()</code> method of the TextField
	 * class</li>
	 *   <li>The <code>pixelBounds</code> property of the Transform class</li>
	 *   <li>The <code>bounds</code> parameter for the <code>startDrag()</code>
	 * method of the Sprite class</li>
	 *   <li>The <code>printArea</code> parameter of the <code>addPage()</code>
	 * method of the PrintJob class</li>
	 * </ul>
	 *
	 * <p>You can use the <code>new Rectangle()</code> constructor to create a
	 * Rectangle object.</p>
	 *
	 * <p><b>Note:</b> The Rectangle class does not define a rectangular Shape
	 * display object. To draw a rectangular Shape object onscreen, use the
	 * <code>drawRect()</code> method of the Graphics class.</p>
	 */
	class Rectangle {
	    private _size;
	    private _bottomRight;
	    private _topLeft;
	    /**
	     * The height of the rectangle, in pixels. Changing the <code>height</code>
	     * value of a Rectangle object has no effect on the <code>x</code>,
	     * <code>y</code>, and <code>width</code> properties.
	     */
	    height: number;
	    /**
	     * The width of the rectangle, in pixels. Changing the <code>width</code>
	     * value of a Rectangle object has no effect on the <code>x</code>,
	     * <code>y</code>, and <code>height</code> properties.
	     */
	    width: number;
	    /**
	     * The <i>x</i> coordinate of the top-left corner of the rectangle. Changing
	     * the value of the <code>x</code> property of a Rectangle object has no
	     * effect on the <code>y</code>, <code>width</code>, and <code>height</code>
	     * properties.
	     *
	     * <p>The value of the <code>x</code> property is equal to the value of the
	     * <code>left</code> property.</p>
	     */
	    x: number;
	    /**
	     * The <i>y</i> coordinate of the top-left corner of the rectangle. Changing
	     * the value of the <code>y</code> property of a Rectangle object has no
	     * effect on the <code>x</code>, <code>width</code>, and <code>height</code>
	     * properties.
	     *
	     * <p>The value of the <code>y</code> property is equal to the value of the
	     * <code>top</code> property.</p>
	     */
	    y: number;
	    /**
	     * The sum of the <code>y</code> and <code>height</code> properties.
	     */
	    bottom: number;
	    /**
	     * The location of the Rectangle object's bottom-right corner, determined by
	     * the values of the <code>right</code> and <code>bottom</code> properties.
	     */
	    bottomRight: Point;
	    /**
	     * The <i>x</i> coordinate of the top-left corner of the rectangle. Changing
	     * the <code>left</code> property of a Rectangle object has no effect on the
	     * <code>y</code> and <code>height</code> properties. However it does affect
	     * the <code>width</code> property, whereas changing the <code>x</code> value
	     * does <i>not</i> affect the <code>width</code> property.
	     *
	     * <p>The value of the <code>left</code> property is equal to the value of
	     * the <code>x</code> property.</p>
	     */
	    left: number;
	    /**
	     * The sum of the <code>x</code> and <code>width</code> properties.
	     */
	    right: number;
	    /**
	     * The size of the Rectangle object, expressed as a Point object with the
	     * values of the <code>width</code> and <code>height</code> properties.
	     */
	    size: Point;
	    /**
	     * The <i>y</i> coordinate of the top-left corner of the rectangle. Changing
	     * the <code>top</code> property of a Rectangle object has no effect on the
	     * <code>x</code> and <code>width</code> properties. However it does affect
	     * the <code>height</code> property, whereas changing the <code>y</code>
	     * value does <i>not</i> affect the <code>height</code> property.
	     *
	     * <p>The value of the <code>top</code> property is equal to the value of the
	     * <code>y</code> property.</p>
	     */
	    top: number;
	    /**
	     * The location of the Rectangle object's top-left corner, determined by the
	     * <i>x</i> and <i>y</i> coordinates of the point.
	     */
	    topLeft: Point;
	    /**
	     * Creates a new Rectangle object with the top-left corner specified by the
	     * <code>x</code> and <code>y</code> parameters and with the specified
	     * <code>width</code> and <code>height</code> parameters. If you call this
	     * public without parameters, a rectangle with <code>x</code>,
	     * <code>y</code>, <code>width</code>, and <code>height</code> properties set
	     * to 0 is created.
	     *
	     * @param x      The <i>x</i> coordinate of the top-left corner of the
	     *               rectangle.
	     * @param y      The <i>y</i> coordinate of the top-left corner of the
	     *               rectangle.
	     * @param width  The width of the rectangle, in pixels.
	     * @param height The height of the rectangle, in pixels.
	     */
	    constructor(x?: number, y?: number, width?: number, height?: number);
	    /**
	     * Returns a new Rectangle object with the same values for the
	     * <code>x</code>, <code>y</code>, <code>width</code>, and
	     * <code>height</code> properties as the original Rectangle object.
	     *
	     * @return A new Rectangle object with the same values for the
	     *         <code>x</code>, <code>y</code>, <code>width</code>, and
	     *         <code>height</code> properties as the original Rectangle object.
	     */
	    clone(): Rectangle;
	    /**
	     * Determines whether the specified point is contained within the rectangular
	     * region defined by this Rectangle object.
	     *
	     * @param x The <i>x</i> coordinate(horizontal position) of the point.
	     * @param y The <i>y</i> coordinate(vertical position) of the point.
	     * @return A value of <code>true</code> if the Rectangle object contains the
	     *         specified point; otherwise <code>false</code>.
	     */
	    contains(x: number, y: number): boolean;
	    /**
	     * Determines whether the specified point is contained within the rectangular
	     * region defined by this Rectangle object. This method is similar to the
	     * <code>Rectangle.contains()</code> method, except that it takes a Point
	     * object as a parameter.
	     *
	     * @param point The point, as represented by its <i>x</i> and <i>y</i>
	     *              coordinates.
	     * @return A value of <code>true</code> if the Rectangle object contains the
	     *         specified point; otherwise <code>false</code>.
	     */
	    containsPoint(point: Point): boolean;
	    /**
	     * Determines whether the Rectangle object specified by the <code>rect</code>
	     * parameter is contained within this Rectangle object. A Rectangle object is
	     * said to contain another if the second Rectangle object falls entirely
	     * within the boundaries of the first.
	     *
	     * @param rect The Rectangle object being checked.
	     * @return A value of <code>true</code> if the Rectangle object that you
	     *         specify is contained by this Rectangle object; otherwise
	     *         <code>false</code>.
	     */
	    containsRect(rect: Rectangle): boolean;
	    /**
	     * Copies all of rectangle data from the source Rectangle object into the
	     * calling Rectangle object.
	     *
	     * @param sourceRect The Rectangle object from which to copy the data.
	     */
	    copyFrom(sourceRect: Rectangle): void;
	    /**
	     * Determines whether the object specified in the <code>toCompare</code>
	     * parameter is equal to this Rectangle object. This method compares the
	     * <code>x</code>, <code>y</code>, <code>width</code>, and
	     * <code>height</code> properties of an object against the same properties of
	     * this Rectangle object.
	     *
	     * @param toCompare The rectangle to compare to this Rectangle object.
	     * @return A value of <code>true</code> if the object has exactly the same
	     *         values for the <code>x</code>, <code>y</code>, <code>width</code>,
	     *         and <code>height</code> properties as this Rectangle object;
	     *         otherwise <code>false</code>.
	     */
	    equals(toCompare: Rectangle): boolean;
	    /**
	     * Increases the size of the Rectangle object by the specified amounts, in
	     * pixels. The center point of the Rectangle object stays the same, and its
	     * size increases to the left and right by the <code>dx</code> value, and to
	     * the top and the bottom by the <code>dy</code> value.
	     *
	     * @param dx The value to be added to the left and the right of the Rectangle
	     *           object. The following equation is used to calculate the new
	     *           width and position of the rectangle:
	     * @param dy The value to be added to the top and the bottom of the
	     *           Rectangle. The following equation is used to calculate the new
	     *           height and position of the rectangle:
	     */
	    inflate(dx: number, dy: number): void;
	    /**
	     * Increases the size of the Rectangle object. This method is similar to the
	     * <code>Rectangle.inflate()</code> method except it takes a Point object as
	     * a parameter.
	     *
	     * <p>The following two code examples give the same result:</p>
	     *
	     * @param point The <code>x</code> property of this Point object is used to
	     *              increase the horizontal dimension of the Rectangle object.
	     *              The <code>y</code> property is used to increase the vertical
	     *              dimension of the Rectangle object.
	     */
	    inflatePoint(point: Point): void;
	    /**
	     * If the Rectangle object specified in the <code>toIntersect</code>
	     * parameter intersects with this Rectangle object, returns the area of
	     * intersection as a Rectangle object. If the rectangles do not intersect,
	     * this method returns an empty Rectangle object with its properties set to
	     * 0.
	     *
	     * @param toIntersect The Rectangle object to compare against to see if it
	     *                    intersects with this Rectangle object.
	     * @return A Rectangle object that equals the area of intersection. If the
	     *         rectangles do not intersect, this method returns an empty
	     *         Rectangle object; that is, a rectangle with its <code>x</code>,
	     *         <code>y</code>, <code>width</code>, and <code>height</code>
	     *         properties set to 0.
	     */
	    intersection(toIntersect: Rectangle): Rectangle;
	    /**
	     * Determines whether the object specified in the <code>toIntersect</code>
	     * parameter intersects with this Rectangle object. This method checks the
	     * <code>x</code>, <code>y</code>, <code>width</code>, and
	     * <code>height</code> properties of the specified Rectangle object to see if
	     * it intersects with this Rectangle object.
	     *
	     * @param toIntersect The Rectangle object to compare against this Rectangle
	     *                    object.
	     * @return A value of <code>true</code> if the specified object intersects
	     *         with this Rectangle object; otherwise <code>false</code>.
	     */
	    intersects(toIntersect: Rectangle): boolean;
	    /**
	     * Determines whether or not this Rectangle object is empty.
	     *
	     * @return A value of <code>true</code> if the Rectangle object's width or
	     *         height is less than or equal to 0; otherwise <code>false</code>.
	     */
	    isEmpty(): boolean;
	    /**
	     * Adjusts the location of the Rectangle object, as determined by its
	     * top-left corner, by the specified amounts.
	     *
	     * @param dx Moves the <i>x</i> value of the Rectangle object by this amount.
	     * @param dy Moves the <i>y</i> value of the Rectangle object by this amount.
	     */
	    offset(dx: number, dy: number): void;
	    /**
	     * Adjusts the location of the Rectangle object using a Point object as a
	     * parameter. This method is similar to the <code>Rectangle.offset()</code>
	     * method, except that it takes a Point object as a parameter.
	     *
	     * @param point A Point object to use to offset this Rectangle object.
	     */
	    offsetPoint(point: Point): void;
	    /**
	     * Sets all of the Rectangle object's properties to 0. A Rectangle object is
	     * empty if its width or height is less than or equal to 0.
	     *
	     * <p> This method sets the values of the <code>x</code>, <code>y</code>,
	     * <code>width</code>, and <code>height</code> properties to 0.</p>
	     *
	     */
	    setEmpty(): void;
	    /**
	     * Sets the members of Rectangle to the specified values
	     *
	     * @param xa      The <i>x</i> coordinate of the top-left corner of the
	     *                rectangle.
	     * @param ya      The <i>y</i> coordinate of the top-left corner of the
	     *                rectangle.
	     * @param widtha  The width of the rectangle, in pixels.
	     * @param heighta The height of the rectangle, in pixels.
	     */
	    setTo(xa: number, ya: number, widtha: number, heighta: number): void;
	    /**
	     * Builds and returns a string that lists the horizontal and vertical
	     * positions and the width and height of the Rectangle object.
	     *
	     * @return A string listing the value of each of the following properties of
	     *         the Rectangle object: <code>x</code>, <code>y</code>,
	     *         <code>width</code>, and <code>height</code>.
	     */
	    toString(): string;
	    /**
	     * Adds two rectangles together to create a new Rectangle object, by filling
	     * in the horizontal and vertical space between the two rectangles.
	     *
	     * <p><b>Note:</b> The <code>union()</code> method ignores rectangles with
	     * <code>0</code> as the height or width value, such as: <code>var
	     * rect2:Rectangle = new Rectangle(300,300,50,0);</code></p>
	     *
	     * @param toUnion A Rectangle object to add to this Rectangle object.
	     * @return A new Rectangle object that is the union of the two rectangles.
	     */
	    union(toUnion: Rectangle): Rectangle;
	}
	export = Rectangle;
	
}
declare module "awayjs-core/lib/errors/AbstractMethodError" {
	import Error = require("awayjs-core/lib/errors/Error");
	/**
	 * AbstractMethodError is thrown when an abstract method is called. The method in question should be overridden
	 * by a concrete subclass.
	 */
	class AbstractMethodError extends Error {
	    /**
	     * Create a new AbstractMethodError.
	     * @param message An optional message to override the default error message.
	     * @param id The id of the error.
	     */
	    constructor(message?: string, id?: number);
	}
	export = AbstractMethodError;
	
}
declare module "awayjs-core/lib/utils/ByteArrayBase" {
	class ByteArrayBase {
	    position: number;
	    length: number;
	    _mode: string;
	    static Base64Key: string;
	    constructor();
	    writeByte(b: number): void;
	    readByte(): number;
	    writeUnsignedByte(b: number): void;
	    readUnsignedByte(): number;
	    writeUnsignedShort(b: number): void;
	    readUnsignedShort(): number;
	    writeUnsignedInt(b: number): void;
	    readUnsignedInt(): number;
	    writeFloat(b: number): void;
	    toFloatBits(x: number): void;
	    readFloat(b: number): void;
	    fromFloatBits(x: number): void;
	    getBytesAvailable(): number;
	    toString(): string;
	    compareEqual(other: any, count: any): boolean;
	    writeBase64String(s: string): void;
	    dumpToConsole(): void;
	    readBase64String(count: number): string;
	    static internalGetBase64String(count: any, getUnsignedByteFunc: any, self: any): string;
	}
	export = ByteArrayBase;
	
}
declare module "awayjs-core/lib/utils/ByteArray" {
	import ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");
	class ByteArray extends ByteArrayBase {
	    maxlength: number;
	    arraybytes: any;
	    unalignedarraybytestemp: any;
	    constructor();
	    ensureWriteableSpace(n: number): void;
	    setArrayBuffer(aBuffer: ArrayBuffer): void;
	    getBytesAvailable(): number;
	    ensureSpace(n: number): void;
	    writeByte(b: number): void;
	    readByte(): number;
	    readBytes(bytes: ByteArray, offset?: number, length?: number): void;
	    writeUnsignedByte(b: number): void;
	    readUnsignedByte(): number;
	    writeUnsignedShort(b: number): void;
	    readUTFBytes(len: number): string;
	    readInt(): number;
	    readShort(): number;
	    readDouble(): number;
	    readUnsignedShort(): number;
	    writeUnsignedInt(b: number): void;
	    readUnsignedInt(): number;
	    writeFloat(b: number): void;
	    readFloat(): number;
	}
	export = ByteArray;
	
}
declare module "awayjs-core/lib/base/BitmapData" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Matrix = require("awayjs-core/lib/geom/Matrix");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Point = require("awayjs-core/lib/geom/Point");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	/**
	 *
	 */
	class BitmapData {
	    private _imageCanvas;
	    private _context;
	    private _imageData;
	    private _rect;
	    private _transparent;
	    private _alpha;
	    private _locked;
	    /**
	     *
	     * @param width
	     * @param height
	     * @param transparent
	     * @param fillColor
	     */
	    constructor(width: number, height: number, transparent?: boolean, fillColor?: number);
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    lock(): void;
	    /**
	     *
	     */
	    unlock(): void;
	    /**
	     *
	     * @param x
	     * @param y
	     * @param color
	     */
	    getPixel(x: any, y: any): number;
	    /**
	     *
	     * @param x
	     * @param y
	     * @param color
	     */
	    setPixel(x: any, y: any, color: number): void;
	    /**
	     *
	     * @param rect
	     * @param inputByteArray
	     */
	    setPixels(rect: Rectangle, inputByteArray: ByteArray): void;
	    /**
	     *
	     * @param x
	     * @param y
	     * @param color
	     */
	    setPixel32(x: any, y: any, color: number): void;
	    setVector(rect: Rectangle, inputVector: number[]): void;
	    /**
	     * Copy an HTMLImageElement or BitmapData object
	     *
	     * @param img {BitmapData} / {HTMLImageElement}
	     * @param sourceRect - source rectange to copy from
	     * @param destRect - destinatoin rectange to copy to
	     */
	    drawImage(img: BitmapData, sourceRect: Rectangle, destRect: Rectangle): any;
	    drawImage(img: HTMLImageElement, sourceRect: Rectangle, destRect: Rectangle): any;
	    private _drawImage(img, sourceRect, destRect);
	    private _drawImage(img, sourceRect, destRect);
	    /**
	     *
	     * @param bmpd
	     * @param sourceRect
	     * @param destRect
	     */
	    copyPixels(bmpd: BitmapData, sourceRect: Rectangle, destRect: Rectangle): any;
	    copyPixels(bmpd: HTMLImageElement, sourceRect: Rectangle, destRect: Rectangle): any;
	    private _copyPixels(bmpd, sourceRect, destRect);
	    private _copyPixels(bmpd, sourceRect, destRect);
	    /**
	     *
	     * @param rect
	     * @param color
	     */
	    fillRect(rect: Rectangle, color: number): void;
	    /**
	     *
	     * @param source
	     * @param matrix
	     */
	    draw(source: BitmapData, matrix?: Matrix): any;
	    draw(source: HTMLImageElement, matrix?: Matrix): any;
	    private _draw(source, matrix);
	    private _draw(source, matrix);
	    copyChannel(sourceBitmap: BitmapData, sourceRect: Rectangle, destPoint: Point, sourceChannel: number, destChannel: number): void;
	    colorTransform(rect: Rectangle, colorTransform: ColorTransform): void;
	    /**
	     *
	     * @returns {ImageData}
	     */
	    /**
	     *
	     * @param {ImageData}
	     */
	    imageData: ImageData;
	    /**
	     *
	     * @returns {number}
	     */
	    /**
	     *
	     * @param {number}
	     */
	    width: number;
	    /**
	     *
	     * @returns {number}
	     */
	    /**
	     *
	     * @param {number}
	     */
	    height: number;
	    /**
	     *
	     * @param {Rectangle}
	     */
	    rect: Rectangle;
	    /**
	     *
	     * @returns {HTMLCanvasElement}
	     */
	    canvas: HTMLCanvasElement;
	    /**
	     *
	     * @returns {HTMLCanvasElement}
	     */
	    context: CanvasRenderingContext2D;
	    /**
	     * convert decimal value to Hex
	     */
	    private hexToRGBACSS(d);
	}
	export = BitmapData;
	
}
declare module "awayjs-core/lib/base/BitmapDataChannel" {
	class BitmapDataChannel {
	    static ALPHA: number;
	    static BLUE: number;
	    static GREEN: number;
	    static RED: number;
	}
	export = BitmapDataChannel;
	
}
declare module "awayjs-core/lib/geom/Box" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	/**
	 * A Box object is an area defined by its position, as indicated by its
	 * top-left-front corner point(<i>x</i>, <i>y</i>, <i>z</i>) and by its width,
	 * height and depth.
	 *
	 *
	 * <p>The <code>x</code>, <code>y</code>, <code>z</code>, <code>width</code>,
	 * <code>height</code> <code>depth</code> properties of the Box class are
	 * independent of each other; changing the value of one property has no effect
	 * on the others. However, the <code>right</code>, <code>bottom</code> and
	 * <code>back</code> properties are integrally related to those six
	 * properties. For example, if you change the value of the <code>right</code>
	 * property, the value of the <code>width</code> property changes; if you
	 * change the <code>bottom</code> property, the value of the
	 * <code>height</code> property changes. </p>
	 *
	 * <p>The following methods and properties use Box objects:</p>
	 *
	 * <ul>
	 *   <li>The <code>bounds</code> property of the DisplayObject class</li>
	 * </ul>
	 *
	 * <p>You can use the <code>new Box()</code> constructor to create a
	 * Box object.</p>
	 *
	 * <p><b>Note:</b> The Box class does not define a cubic Shape
	 * display object.
	 */
	class Box {
	    private _size;
	    private _bottomRightBack;
	    private _topLeftFront;
	    /**
	     * The height of the box, in pixels. Changing the <code>height</code> value
	     * of a Box object has no effect on the <code>x</code>, <code>y</code>,
	     * <code>z</code>, <code>depth</code> and <code>width</code> properties.
	     */
	    height: number;
	    /**
	     * The width of the box, in pixels. Changing the <code>width</code> value
	     * of a Box object has no effect on the <code>x</code>, <code>y</code>,
	     * <code>z</code>, <code>depth</code> and <code>height</code> properties.
	     */
	    width: number;
	    /**
	     * The deoth of the box, in pixels. Changing the <code>depth</code> value
	     * of a Box object has no effect on the <code>x</code>, <code>y</code>,
	     * <code>z</code>, <code>width</code> and <code>height</code> properties.
	     */
	    depth: number;
	    /**
	     * The <i>x</i> coordinate of the top-left-front corner of the box.
	     * Changing the value of the <code>x</code> property of a Box object has no
	     * effect on the <code>y</code>, <code>z</code>, <code>width</code>,
	     * <code>height</code> and <code>depth</code> properties.
	     *
	     * <p>The value of the <code>x</code> property is equal to the value of the
	     * <code>left</code> property.</p>
	     */
	    x: number;
	    /**
	     * The <i>y</i> coordinate of the top-left-front corner of the box.
	     * Changing the value of the <code>y</code> property of a Box object has no
	     * effect on the <code>x</code>, <code>z</code>, <code>width</code>,
	     * <code>height</code> and <code>depth</code> properties.
	     *
	     * <p>The value of the <code>y</code> property is equal to the value of the
	     * <code>top</code> property.</p>
	     */
	    y: number;
	    /**
	     * The <i>y</i> coordinate of the top-left-front corner of the box.
	     * Changing the value of the <code>z</code> property of a Box object has no
	     * effect on the <code>x</code>, <code>y</code>, <code>width</code>,
	     * <code>height</code> and <code>depth</code> properties.
	     *
	     * <p>The value of the <code>z</code> property is equal to the value of the
	     * <code>front</code> property.</p>
	     */
	    z: number;
	    /**
	     * The sum of the <code>z</code> and <code>height</code> properties.
	     */
	    back: number;
	    /**
	     * The sum of the <code>y</code> and <code>height</code> properties.
	     */
	    bottom: number;
	    /**
	     * The location of the Box object's bottom-right corner, determined by the
	     * values of the <code>right</code> and <code>bottom</code> properties.
	     */
	    bottomRightBack: Vector3D;
	    /**
	     * The <i>z</i> coordinate of the top-left-front corner of the box. Changing
	     * the <code>front</code> property of a Box object has no effect on the
	     * <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>
	     * properties. However it does affect the <code>depth</code> property,
	     * whereas changing the <code>z</code> value does <i>not</i> affect the
	     * <code>depth</code> property.
	     *
	     * <p>The value of the <code>left</code> property is equal to the value of
	     * the <code>x</code> property.</p>
	     */
	    front: number;
	    /**
	     * The <i>x</i> coordinate of the top-left corner of the box. Changing the
	     * <code>left</code> property of a Box object has no effect on the
	     * <code>y</code> and <code>height</code> properties. However it does affect
	     * the <code>width</code> property, whereas changing the <code>x</code> value
	     * does <i>not</i> affect the <code>width</code> property.
	     *
	     * <p>The value of the <code>left</code> property is equal to the value of
	     * the <code>x</code> property.</p>
	     */
	    left: number;
	    /**
	     * The sum of the <code>x</code> and <code>width</code> properties.
	     */
	    right: number;
	    /**
	     * The size of the Box object, expressed as a Vector3D object with the
	     * values of the <code>width</code>, <code>height</code> and
	     * <code>depth</code> properties.
	     */
	    size: Vector3D;
	    /**
	     * The <i>y</i> coordinate of the top-left-front corner of the box. Changing
	     * the <code>top</code> property of a Box object has no effect on the
	     * <code>x</code> and <code>width</code> properties. However it does affect
	     * the <code>height</code> property, whereas changing the <code>y</code>
	     * value does <i>not</i> affect the <code>height</code> property.
	     *
	     * <p>The value of the <code>top</code> property is equal to the value of the
	     * <code>y</code> property.</p>
	     */
	    top: number;
	    /**
	     * The location of the Box object's top-left-front corner, determined by the
	     * <i>x</i>, <i>y</i> and <i>z</i> coordinates of the point.
	     */
	    topLeftFront: Vector3D;
	    /**
	     * Creates a new Box object with the top-left-front corner specified by the
	     * <code>x</code>, <code>y</code> and <code>z</code> parameters and with the
	     * specified <code>width</code>, <code>height</code> and <code>depth</code>
	     * parameters. If you call this public without parameters, a box with
	     * <code>x</code>, <code>y</code>, <code>z</code>, <code>width</code>,
	     * <code>height</code> and <code>depth</code> properties set to 0 is created.
	     *
	     * @param x      The <i>x</i> coordinate of the top-left-front corner of the
	     *               box.
	     * @param y      The <i>y</i> coordinate of the top-left-front corner of the
	     *               box.
	     * @param z      The <i>z</i> coordinate of the top-left-front corner of the
	     *               box.
	     * @param width  The width of the box, in pixels.
	     * @param height The height of the box, in pixels.
	     * @param depth The depth of the box, in pixels.
	     */
	    constructor(x?: number, y?: number, z?: number, width?: number, height?: number, depth?: number);
	    /**
	     * Returns a new Box object with the same values for the <code>x</code>,
	     * <code>y</code>, <code>z</code>, <code>width</code>, <code>height</code>
	     * and <code>depth</code> properties as the original Box object.
	     *
	     * @return A new Box object with the same values for the <code>x</code>,
	     *         <code>y</code>, <code>z</code>, <code>width</code>,
	     *         <code>height</code> and <code>depth</code> properties as the
	     *         original Box object.
	     */
	    clone(): Box;
	    /**
	     * Determines whether the specified position is contained within the cubic
	     * region defined by this Box object.
	     *
	     * @param x The <i>x</i> coordinate(horizontal component) of the position.
	     * @param y The <i>y</i> coordinate(vertical component) of the position.
	     * @param z The <i>z</i> coordinate(longitudinal component) of the position.
	     * @return A value of <code>true</code> if the Box object contains the
	     *         specified position; otherwise <code>false</code>.
	     */
	    contains(x: number, y: number, z: number): boolean;
	    /**
	     * Determines whether the specified position is contained within the cubic
	     * region defined by this Box object. This method is similar to the
	     * <code>Box.contains()</code> method, except that it takes a Vector3D
	     * object as a parameter.
	     *
	     * @param position The position, as represented by its <i>x</i>, <i>y</i> and
	     *                 <i>z</i> coordinates.
	     * @return A value of <code>true</code> if the Box object contains the
	     *         specified position; otherwise <code>false</code>.
	     */
	    containsPoint(position: Vector3D): boolean;
	    /**
	     * Determines whether the Box object specified by the <code>box</code>
	     * parameter is contained within this Box object. A Box object is said to
	     * contain another if the second Box object falls entirely within the
	     * boundaries of the first.
	     *
	     * @param box The Box object being checked.
	     * @return A value of <code>true</code> if the Box object that you specify
	     *         is contained by this Box object; otherwise <code>false</code>.
	     */
	    containsRect(box: Box): boolean;
	    /**
	     * Copies all of box data from the source Box object into the calling
	     * Box object.
	     *
	     * @param sourceBox The Box object from which to copy the data.
	     */
	    copyFrom(sourceBox: Box): void;
	    /**
	     * Determines whether the object specified in the <code>toCompare</code>
	     * parameter is equal to this Box object. This method compares the
	     * <code>x</code>, <code>y</code>, <code>z</code>, <code>width</code>,
	     * <code>height</code> and <code>depth</code> properties of an object against
	     * the same properties of this Box object.
	     *
	     * @param toCompare The box to compare to this Box object.
	     * @return A value of <code>true</code> if the object has exactly the same
	     *         values for the <code>x</code>, <code>y</code>, <code>z</code>,
	     *         <code>width</code>, <code>height</code> and <code>depth</code>
	     *         properties as this Box object; otherwise <code>false</code>.
	     */
	    equals(toCompare: Box): boolean;
	    /**
	     * Increases the size of the Box object by the specified amounts, in
	     * pixels. The center point of the Box object stays the same, and its
	     * size increases to the left and right by the <code>dx</code> value, to
	     * the top and the bottom by the <code>dy</code> value, and to
	     * the front and the back by the <code>dz</code> value.
	     *
	     * @param dx The value to be added to the left and the right of the Box
	     *           object. The following equation is used to calculate the new
	     *           width and position of the box:
	     * @param dy The value to be added to the top and the bottom of the Box
	     *           object. The following equation is used to calculate the new
	     *           height and position of the box:
	     * @param dz The value to be added to the front and the back of the Box
	     *           object. The following equation is used to calculate the new
	     *           depth and position of the box:
	     */
	    inflate(dx: number, dy: number, dz: number): void;
	    /**
	     * Increases the size of the Box object. This method is similar to the
	     * <code>Box.inflate()</code> method except it takes a Vector3D object as
	     * a parameter.
	     *
	     * <p>The following two code examples give the same result:</p>
	     *
	     * @param delta The <code>x</code> property of this Vector3D object is used to
	     *              increase the horizontal dimension of the Box object.
	     *              The <code>y</code> property is used to increase the vertical
	     *              dimension of the Box object.
	     *              The <code>z</code> property is used to increase the
	     *              longitudinal dimension of the Box object.
	     */
	    inflatePoint(delta: Vector3D): void;
	    /**
	     * If the Box object specified in the <code>toIntersect</code> parameter
	     * intersects with this Box object, returns the area of intersection
	     * as a Box object. If the boxes do not intersect, this method returns an
	     * empty Box object with its properties set to 0.
	     *
	     * @param toIntersect The Box object to compare against to see if it
	     *                    intersects with this Box object.
	     * @return A Box object that equals the area of intersection. If the
	     *         boxes do not intersect, this method returns an empty Box
	     *         object; that is, a box with its <code>x</code>, <code>y</code>,
	     *         <code>z</code>, <code>width</code>,  <code>height</code>, and
	     *         <code>depth</code> properties set to 0.
	     */
	    intersection(toIntersect: Box): Box;
	    /**
	     * Determines whether the object specified in the <code>toIntersect</code>
	     * parameter intersects with this Box object. This method checks the
	     * <code>x</code>, <code>y</code>, <code>z</code>, <code>width</code>,
	     * <code>height</code>, and <code>depth</code> properties of the specified
	     * Box object to see if it intersects with this Box object.
	     *
	     * @param toIntersect The Box object to compare against this Box object.
	     * @return A value of <code>true</code> if the specified object intersects
	     *         with this Box object; otherwise <code>false</code>.
	     */
	    intersects(toIntersect: Box): boolean;
	    /**
	     * Determines whether or not this Box object is empty.
	     *
	     * @return A value of <code>true</code> if the Box object's width, height or
	     *         depth is less than or equal to 0; otherwise <code>false</code>.
	     */
	    isEmpty(): boolean;
	    /**
	     * Adjusts the location of the Box object, as determined by its
	     * top-left-front corner, by the specified amounts.
	     *
	     * @param dx Moves the <i>x</i> value of the Box object by this amount.
	     * @param dy Moves the <i>y</i> value of the Box object by this amount.
	     * @param dz Moves the <i>z</i> value of the Box object by this amount.
	     */
	    offset(dx: number, dy: number, dz: number): void;
	    /**
	     * Adjusts the location of the Box object using a Vector3D object as a
	     * parameter. This method is similar to the <code>Box.offset()</code>
	     * method, except that it takes a Vector3D object as a parameter.
	     *
	     * @param position A Vector3D object to use to offset this Box object.
	     */
	    offsetPosition(position: Vector3D): void;
	    /**
	     * Sets all of the Box object's properties to 0. A Box object is empty if its
	     * width, height or depth is less than or equal to 0.
	     *
	     * <p> This method sets the values of the <code>x</code>, <code>y</code>,
	     * <code>z</code>, <code>width</code>, <code>height</code>, and
	     * <code>depth</code> properties to 0.</p>
	     *
	     */
	    setEmpty(): void;
	    /**
	     * Sets the members of Box to the specified values
	     *
	     * @param xa      The <i>x</i> coordinate of the top-left-front corner of the
	     *                box.
	     * @param ya      The <i>y</i> coordinate of the top-left-front corner of the
	     *                box.
	     * @param yz      The <i>z</i> coordinate of the top-left-front corner of the
	     *                box.
	     * @param widtha  The width of the box, in pixels.
	     * @param heighta The height of the box, in pixels.
	     * @param deptha  The depth of the box, in pixels.
	     */
	    setTo(xa: number, ya: number, za: number, widtha: number, heighta: number, deptha: number): void;
	    /**
	     * Builds and returns a string that lists the horizontal, vertical and
	     * longitudinal positions and the width, height and depth of the Box object.
	     *
	     * @return A string listing the value of each of the following properties of
	     *         the Box object: <code>x</code>, <code>y</code>, <code>z</code>,
	     *         <code>width</code>, <code>height</code>, and <code>depth</code>.
	     */
	    toString(): string;
	    /**
	     * Adds two boxes together to create a new Box object, by filling
	     * in the horizontal, vertical and longitudinal space between the two boxes.
	     *
	     * <p><b>Note:</b> The <code>union()</code> method ignores boxes with
	     * <code>0</code> as the height, width or depth value, such as: <code>var
	     * box2:Box = new Box(300,300,300,50,50,0);</code></p>
	     *
	     * @param toUnion A Box object to add to this Box object.
	     * @return A new Box object that is the union of the two boxes.
	     */
	    union(toUnion: Box): Box;
	}
	export = Box;
	
}
declare module "awayjs-core/lib/geom/Orientation3D" {
	/**
	 * A Quaternion object which can be used to represent rotations.
	 */
	class Orientation3D {
	    /**
	     * The axis angle orientation uses a combination of an axis and an angle to determine the orientation.
	     * @type {string}
	     */
	    static AXIS_ANGLE: string;
	    /**
	     * The default orientation for decompose() and recompose() methods, defines the orientation with three separate angles of rotation for each axis.
	     * @type {string}
	     */
	    static EULER_ANGLES: string;
	    /**
	     * The quaternion orientation uses complex numbers.
	     * @type {string}
	     */
	    static QUATERNION: string;
	}
	export = Orientation3D;
	
}
declare module "awayjs-core/lib/geom/PlaneClassification" {
	class PlaneClassification {
	    static BACK: number;
	    static FRONT: number;
	    static IN: number;
	    static OUT: number;
	    static INTERSECT: number;
	}
	export = PlaneClassification;
	
}
declare module "awayjs-core/lib/geom/Plane3D" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	class Plane3D {
	    /**
	     * The A coefficient of this plane. (Also the x dimension of the plane normal)
	     */
	    a: number;
	    /**
	     * The B coefficient of this plane. (Also the y dimension of the plane normal)
	     */
	    b: number;
	    /**
	     * The C coefficient of this plane. (Also the z dimension of the plane normal)
	     */
	    c: number;
	    /**
	     * The D coefficient of this plane. (Also the inverse dot product between normal and point)
	     */
	    d: number;
	    _iAlignment: number;
	    static ALIGN_ANY: number;
	    static ALIGN_XY_AXIS: number;
	    static ALIGN_YZ_AXIS: number;
	    static ALIGN_XZ_AXIS: number;
	    /**
	     * Create a Plane3D with ABCD coefficients
	     */
	    constructor(a?: number, b?: number, c?: number, d?: number);
	    /**
	     * Fills this Plane3D with the coefficients from 3 points in 3d space.
	     * @param p0 Vector3D
	     * @param p1 Vector3D
	     * @param p2 Vector3D
	     */
	    fromPoints(p0: Vector3D, p1: Vector3D, p2: Vector3D): void;
	    /**
	     * Fills this Plane3D with the coefficients from the plane's normal and a point in 3d space.
	     * @param normal Vector3D
	     * @param point  Vector3D
	     */
	    fromNormalAndPoint(normal: Vector3D, point: Vector3D): void;
	    /**
	     * Normalize this Plane3D
	     * @return Plane3D This Plane3D.
	     */
	    normalize(): Plane3D;
	    /**
	     * Returns the signed distance between this Plane3D and the point p.
	     * @param p Vector3D
	     * @returns Number
	     */
	    distance(p: Vector3D): number;
	    /**
	     * Classify a point against this Plane3D. (in front, back or intersecting)
	     * @param p Vector3D
	     * @return int Plane3.FRONT or Plane3D.BACK or Plane3D.INTERSECT
	     */
	    classifyPoint(p: Vector3D, epsilon?: number): number;
	    toString(): string;
	}
	export = Plane3D;
	
}
declare module "awayjs-core/lib/geom/Matrix3DUtils" {
	import Quaternion = require("awayjs-core/lib/geom/Quaternion");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	/**
	 * away.geom.Matrix3DUtils provides additional Matrix3D functions.
	 */
	class Matrix3DUtils {
	    /**
	     * A reference to a Vector to be used as a temporary raw data container, to prevent object creation.
	     */
	    static RAW_DATA_CONTAINER: number[];
	    static CALCULATION_MATRIX: Matrix3D;
	    /**
	     * Fills the 3d matrix object with values representing the transformation made by the given quaternion.
	     *
	     * @param    quarternion    The quarterion object to convert.
	     */
	    static quaternion2matrix(quarternion: Quaternion, m?: Matrix3D): Matrix3D;
	    /**
	     * Returns a normalised <code>Vector3D</code> object representing the forward vector of the given matrix.
	     * @param    m        The Matrix3D object to use to get the forward vector
	     * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
	     * @return            The forward vector
	     */
	    static getForward(m: Matrix3D, v?: Vector3D): Vector3D;
	    /**
	     * Returns a normalised <code>Vector3D</code> object representing the up vector of the given matrix.
	     * @param    m        The Matrix3D object to use to get the up vector
	     * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
	     * @return            The up vector
	     */
	    static getUp(m: Matrix3D, v?: Vector3D): Vector3D;
	    /**
	     * Returns a normalised <code>Vector3D</code> object representing the right vector of the given matrix.
	     * @param    m        The Matrix3D object to use to get the right vector
	     * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
	     * @return            The right vector
	     */
	    static getRight(m: Matrix3D, v?: Vector3D): Vector3D;
	    /**
	     * Returns a boolean value representing whether there is any significant difference between the two given 3d matrices.
	     */
	    static compare(m1: Matrix3D, m2: Matrix3D): boolean;
	    static lookAt(matrix: Matrix3D, pos: Vector3D, dir: Vector3D, up: Vector3D): void;
	    static reflection(plane: Plane3D, target?: Matrix3D): Matrix3D;
	    static transformVector(matrix: Matrix3D, vector: Vector3D, result?: Vector3D): Vector3D;
	    static deltaTransformVector(matrix: Matrix3D, vector: Vector3D, result?: Vector3D): Vector3D;
	    static getTranslation(transform: Matrix3D, result?: Vector3D): Vector3D;
	    static deltaTransformVectors(matrix: Matrix3D, vin: number[], vout: number[]): void;
	}
	export = Matrix3DUtils;
	
}
declare module "awayjs-core/lib/geom/Quaternion" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	/**
	 * A Quaternion object which can be used to represent rotations.
	 */
	class Quaternion {
	    /**
	     * The x value of the quaternion.
	     */
	    x: number;
	    /**
	     * The y value of the quaternion.
	     */
	    y: number;
	    /**
	     * The z value of the quaternion.
	     */
	    z: number;
	    /**
	     * The w value of the quaternion.
	     */
	    w: number;
	    /**
	     * Creates a new Quaternion object.
	     * @param x The x value of the quaternion.
	     * @param y The y value of the quaternion.
	     * @param z The z value of the quaternion.
	     * @param w The w value of the quaternion.
	     */
	    constructor(x?: number, y?: number, z?: number, w?: number);
	    /**
	     * Returns the magnitude of the quaternion object.
	     */
	    magnitude: number;
	    /**
	     * Fills the quaternion object with the result from a multiplication of two quaternion objects.
	     *
	     * @param    qa    The first quaternion in the multiplication.
	     * @param    qb    The second quaternion in the multiplication.
	     */
	    multiply(qa: Quaternion, qb: Quaternion): void;
	    multiplyVector(vector: Vector3D, target?: Quaternion): Quaternion;
	    /**
	     * Fills the quaternion object with values representing the given rotation around a vector.
	     *
	     * @param    axis    The axis around which to rotate
	     * @param    angle    The angle in radians of the rotation.
	     */
	    fromAxisAngle(axis: Vector3D, angle: number): void;
	    /**
	     * Spherically interpolates between two quaternions, providing an interpolation between rotations with constant angle change rate.
	     * @param qa The first quaternion to interpolate.
	     * @param qb The second quaternion to interpolate.
	     * @param t The interpolation weight, a value between 0 and 1.
	     */
	    slerp(qa: Quaternion, qb: Quaternion, t: number): void;
	    /**
	     * Linearly interpolates between two quaternions.
	     * @param qa The first quaternion to interpolate.
	     * @param qb The second quaternion to interpolate.
	     * @param t The interpolation weight, a value between 0 and 1.
	     */
	    lerp(qa: Quaternion, qb: Quaternion, t: number): void;
	    /**
	     * Fills the quaternion object with values representing the given euler rotation.
	     *
	     * @param    ax        The angle in radians of the rotation around the ax axis.
	     * @param    ay        The angle in radians of the rotation around the ay axis.
	     * @param    az        The angle in radians of the rotation around the az axis.
	     */
	    fromEulerAngles(ax: number, ay: number, az: number): void;
	    /**
	     * Fills a target Vector3D object with the Euler angles that form the rotation represented by this quaternion.
	     * @param target An optional Vector3D object to contain the Euler angles. If not provided, a new object is created.
	     * @return The Vector3D containing the Euler angles.
	     */
	    toEulerAngles(target?: Vector3D): Vector3D;
	    /**
	     * Normalises the quaternion object.
	     */
	    normalize(val?: number): void;
	    /**
	     * Used to trace the values of a quaternion.
	     *
	     * @return A string representation of the quaternion object.
	     */
	    toString(): string;
	    /**
	     * Converts the quaternion to a Matrix3D object representing an equivalent rotation.
	     * @param target An optional Matrix3D container to store the transformation in. If not provided, a new object is created.
	     * @return A Matrix3D object representing an equivalent rotation.
	     */
	    toMatrix3D(target?: Matrix3D): Matrix3D;
	    /**
	     * Extracts a quaternion rotation matrix out of a given Matrix3D object.
	     * @param matrix The Matrix3D out of which the rotation will be extracted.
	     */
	    fromMatrix(matrix: Matrix3D): void;
	    /**
	     * Converts the quaternion to a Vector.&lt;Number&gt; matrix representation of a rotation equivalent to this quaternion.
	     * @param target The Vector.&lt;Number&gt; to contain the raw matrix data.
	     * @param exclude4thRow If true, the last row will be omitted, and a 4x3 matrix will be generated instead of a 4x4.
	     */
	    toRawData(target: number[], exclude4thRow?: boolean): void;
	    /**
	     * Clones the quaternion.
	     * @return An exact duplicate of the current Quaternion.
	     */
	    clone(): Quaternion;
	    /**
	     * Rotates a point.
	     * @param vector The Vector3D object to be rotated.
	     * @param target An optional Vector3D object that will contain the rotated coordinates. If not provided, a new object will be created.
	     * @return A Vector3D object containing the rotated point.
	     */
	    rotatePoint(vector: Vector3D, target?: Vector3D): Vector3D;
	    /**
	     * Copies the data from a quaternion into this instance.
	     * @param q The quaternion to copy from.
	     */
	    copyFrom(q: Quaternion): void;
	}
	export = Quaternion;
	
}
declare module "awayjs-core/lib/geom/Matrix3D" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	class Matrix3D {
	    /**
	     * A Vector of 16 Numbers, where every four elements is a column of a 4x4 matrix.
	     *
	     * <p>An exception is thrown if the rawData property is set to a matrix that is not invertible. The Matrix3D
	     * object must be invertible. If a non-invertible matrix is needed, create a subclass of the Matrix3D object.</p>
	     */
	    rawData: number[];
	    /**
	     * Creates a Matrix3D object.
	     */
	    constructor(v?: number[]);
	    /**
	     * Appends the matrix by multiplying another Matrix3D object by the current Matrix3D object.
	     */
	    append(lhs: Matrix3D): void;
	    /**
	     * Appends an incremental rotation to a Matrix3D object.
	     */
	    appendRotation(degrees: number, axis: Vector3D): void;
	    /**
	     * Appends an incremental scale change along the x, y, and z axes to a Matrix3D object.
	     */
	    appendScale(xScale: number, yScale: number, zScale: number): void;
	    /**
	     * Appends an incremental translation, a repositioning along the x, y, and z axes, to a Matrix3D object.
	     */
	    appendTranslation(x: number, y: number, z: number): void;
	    /**
	     * Returns a new Matrix3D object that is an exact copy of the current Matrix3D object.
	     */
	    clone(): Matrix3D;
	    /**
	     * Copies a Vector3D object into specific column of the calling Matrix3D object.
	     */
	    copyColumnFrom(column: number, vector3D: Vector3D): void;
	    /**
	     * Copies specific column of the calling Matrix3D object into the Vector3D object.
	     */
	    copyColumnTo(column: number, vector3D: Vector3D): void;
	    /**
	     * Copies all of the matrix data from the source Matrix3D object into the calling Matrix3D object.
	     */
	    copyFrom(sourceMatrix3D: Matrix3D): void;
	    copyRawDataFrom(vector: number[], index?: number, transpose?: boolean): void;
	    copyRawDataTo(vector: number[], index?: number, transpose?: boolean): void;
	    /**
	     * Copies a Vector3D object into specific row of the calling Matrix3D object.
	     */
	    copyRowFrom(row: number, vector3D: Vector3D): void;
	    /**
	     * Copies specific row of the calling Matrix3D object into the Vector3D object.
	     */
	    copyRowTo(row: number, vector3D: Vector3D): void;
	    /**
	     * Copies this Matrix3D object into a destination Matrix3D object.
	     */
	    copyToMatrix3D(dest: Matrix3D): void;
	    /**
	     * Returns the transformation matrix's translation, rotation, and scale settings as a Vector of three Vector3D objects.
	     */
	    decompose(orientationStyle?: string): Vector3D[];
	    /**
	     * Uses the transformation matrix without its translation elements to transform a Vector3D object from one space
	     * coordinate to another.
	     */
	    deltaTransformVector(v: Vector3D): Vector3D;
	    /**
	     * Converts the current matrix to an identity or unit matrix.
	     */
	    identity(): void;
	    /**
	     * [static] Interpolates the translation, rotation, and scale transformation of one matrix toward those of the target matrix.
	     */
	    static interpolate(thisMat: Matrix3D, toMat: Matrix3D, percent: number): Matrix3D;
	    /**
	     * Interpolates this matrix towards the translation, rotation, and scale transformations of the target matrix.
	     */
	    interpolateTo(toMat: Matrix3D, percent: number): void;
	    /**
	     * Inverts the current matrix.
	     */
	    invert(): boolean;
	    /**
	     * Prepends a matrix by multiplying the current Matrix3D object by another Matrix3D object.
	     */
	    prepend(rhs: Matrix3D): void;
	    /**
	     * Prepends an incremental rotation to a Matrix3D object.
	     */
	    prependRotation(degrees: number, axis: Vector3D): void;
	    /**
	     * Prepends an incremental scale change along the x, y, and z axes to a Matrix3D object.
	     */
	    prependScale(xScale: number, yScale: number, zScale: number): void;
	    /**
	     * Prepends an incremental translation, a repositioning along the x, y, and z axes, to a Matrix3D object.
	     */
	    prependTranslation(x: number, y: number, z: number): void;
	    /**
	     * Sets the transformation matrix's translation, rotation, and scale settings.
	     */
	    recompose(components: Vector3D[]): boolean;
	    transformVector(v: Vector3D): Vector3D;
	    /**
	     * Uses the transformation matrix to transform a Vector of Numbers from one coordinate space to another.
	     */
	    transformVectors(vin: number[], vout: number[]): void;
	    /**
	     * Converts the current Matrix3D object to a matrix where the rows and columns are swapped.
	     */
	    transpose(): void;
	    static getAxisRotation(x: number, y: number, z: number, degrees: number): Matrix3D;
	    /**
	     * [read-only] A Number that determines whether a matrix is invertible.
	     */
	    determinant: number;
	    /**
	     * A Vector3D object that holds the position, the 3D coordinate (x,y,z) of a display object within the
	     * transformation's frame of reference.
	     */
	    position: Vector3D;
	    toFixed(decimalPlace: number): string;
	    toString(): string;
	}
	export = Matrix3D;
	
}
declare module "awayjs-core/lib/bounds/BoundingVolumeBase" {
	import Box = require("awayjs-core/lib/geom/Box");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	class BoundingVolumeBase {
	    _aabb: Box;
	    _pAabbPoints: number[];
	    _pAabbPointsDirty: boolean;
	    constructor();
	    aabb: Box;
	    aabbPoints: number[];
	    nullify(): void;
	    fromVertices(vertices: number[]): void;
	    fromSphere(center: Vector3D, radius: number): void;
	    fromExtremes(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): void;
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	    overlaps(bounds: BoundingVolumeBase): boolean;
	    clone(): BoundingVolumeBase;
	    rayIntersection(position: Vector3D, direction: Vector3D, targetNormal: Vector3D): number;
	    containsPoint(position: Vector3D): boolean;
	    pUpdateAABBPoints(): void;
	    classifyToPlane(plane: Plane3D): number;
	    transformFrom(bounds: BoundingVolumeBase, matrix: Matrix3D): void;
	}
	export = BoundingVolumeBase;
	
}
declare module "awayjs-core/lib/bounds/AxisAlignedBoundingBox" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	/**
	 * AxisAlignedBoundingBox represents a bounding box volume that has its planes aligned to the local coordinate axes of the bounded object.
	 * This is useful for most meshes.
	 */
	class AxisAlignedBoundingBox extends BoundingVolumeBase {
	    private _centerX;
	    private _centerY;
	    private _centerZ;
	    private _halfExtentsX;
	    private _halfExtentsY;
	    private _halfExtentsZ;
	    /**
	     * Creates a new <code>AxisAlignedBoundingBox</code> object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    nullify(): void;
	    /**
	     * @inheritDoc
	     */
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	    rayIntersection(position: Vector3D, direction: Vector3D, targetNormal: Vector3D): number;
	    /**
	     * @inheritDoc
	     */
	    containsPoint(position: Vector3D): boolean;
	    /**
	     * @inheritDoc
	     */
	    fromExtremes(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): void;
	    /**
	     * @inheritDoc
	     */
	    clone(): BoundingVolumeBase;
	    halfExtentsX: number;
	    halfExtentsY: number;
	    halfExtentsZ: number;
	    /**
	     * Finds the closest point on the bounding volume to another given point. This can be used for maximum error calculations for content within a given bound.
	     * @param point The point for which to find the closest point on the bounding volume
	     * @param target An optional Vector3D to store the result to prevent creating a new object.
	     * @return
	     */
	    closestPointToPoint(point: Vector3D, target?: Vector3D): Vector3D;
	    classifyToPlane(plane: Plane3D): number;
	    transformFrom(bounds: BoundingVolumeBase, matrix: Matrix3D): void;
	}
	export = AxisAlignedBoundingBox;
	
}
declare module "awayjs-core/lib/bounds/BoundingSphere" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	class BoundingSphere extends BoundingVolumeBase {
	    private _radius;
	    private _centerX;
	    private _centerY;
	    private _centerZ;
	    constructor();
	    radius: number;
	    nullify(): void;
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	    fromSphere(center: Vector3D, radius: number): void;
	    fromExtremes(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): void;
	    clone(): BoundingVolumeBase;
	    rayIntersection(position: Vector3D, direction: Vector3D, targetNormal: Vector3D): number;
	    containsPoint(position: Vector3D): boolean;
	    classifyToPlane(plane: Plane3D): number;
	    transformFrom(bounds: BoundingVolumeBase, matrix: Matrix3D): void;
	}
	export = BoundingSphere;
	
}
declare module "awayjs-core/lib/bounds/NullBounds" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	class NullBounds extends BoundingVolumeBase {
	    private _alwaysIn;
	    constructor(alwaysIn?: boolean);
	    clone(): BoundingVolumeBase;
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	    fromSphere(center: Vector3D, radius: number): void;
	    fromExtremes(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): void;
	    classifyToPlane(plane: Plane3D): number;
	    transformFrom(bounds: BoundingVolumeBase, matrix: Matrix3D): void;
	}
	export = NullBounds;
	
}
declare module "awayjs-core/lib/errors/DocumentError" {
	import Error = require("awayjs-core/lib/errors/Error");
	class DocumentError extends Error {
	    static DOCUMENT_DOES_NOT_EXIST: string;
	    constructor(message?: string, id?: number);
	}
	export = DocumentError;
	
}
declare module "awayjs-core/lib/errors/PartialImplementationError" {
	import Error = require("awayjs-core/lib/errors/Error");
	/**
	 * AbstractMethodError is thrown when an abstract method is called. The method in question should be overridden
	 * by a concrete subclass.
	 */
	class PartialImplementationError extends Error {
	    /**
	     * Create a new AbstractMethodError.
	     * @param message An optional message to override the default error message.
	     * @param id The id of the error.
	     */
	    constructor(dependency?: string, id?: number);
	}
	export = PartialImplementationError;
	
}
declare module "awayjs-core/lib/errors/RangeError" {
	import Error = require("awayjs-core/lib/errors/Error");
	/**
	 * RangeError is thrown when an index is accessed out of range of the number of
	 * available indices on an Array.
	 */
	class RangeError extends Error {
	    /**
	     * Create a new RangeError.
	     *
	     * @param message An optional message to override the default error message.
	     * @param id The id of the error.
	     */
	    constructor(message?: string, id?: number);
	}
	export = RangeError;
	
}
declare module "awayjs-core/lib/events/Event" {
	class Event {
	    static COMPLETE: string;
	    static OPEN: string;
	    static ENTER_FRAME: string;
	    static EXIT_FRAME: string;
	    static RESIZE: string;
	    static ERROR: string;
	    static CHANGE: string;
	    /**
	     * Type of event
	     * @property type
	     * @type String
	     */
	    type: string;
	    /**
	     * Reference to target object
	     * @property target
	     * @type Object
	     */
	    target: any;
	    constructor(type: string);
	    /**
	     * Clones the current event.
	     * @return An exact duplicate of the current event.
	     */
	    clone(): Event;
	}
	export = Event;
	
}
declare module "awayjs-core/lib/events/IEventDispatcher" {
	import Event = require("awayjs-core/lib/events/Event");
	/**
	 * Base interface for dispatching events
	 *
	 * @interface away.events.IEventDispatcher
	 *
	 */
	interface IEventDispatcher {
	    /**
	     * Add an event listener
	     * @method addEventListener
	     * @param {String} Name of event to add a listener for
	     * @param {Function} Callback function
	     */
	    addEventListener(type: string, listener: Function): any;
	    /**
	     * Remove an event listener
	     * @method removeEventListener
	     * @param {String} Name of event to remove a listener for
	     * @param {Function} Callback function
	     */
	    removeEventListener(type: string, listener: Function): any;
	    /**
	     * Dispatch an event
	     * @method dispatchEvent
	     * @param {Event} Event to dispatch
	     */
	    dispatchEvent(event: Event): any;
	    /**
	     * check if an object has an event listener assigned to it
	     * @method hasListener
	     * @param {String} Name of event to remove a listener for
	     * @param {Function} Callback function
	     * @param {Object} Target object listener is added to
	     */
	    hasEventListener(type: string, listener?: Function): boolean;
	}
	export = IEventDispatcher;
	
}
declare module "awayjs-core/lib/library/IAsset" {
	import IEventDispatcher = require("awayjs-core/lib/events/IEventDispatcher");
	interface IAsset extends IEventDispatcher {
	    /**
	     *
	     */
	    name: string;
	    /**
	     *
	     */
	    id: number;
	    /**
	     *
	     */
	    assetNamespace: string;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     *
	     */
	    assetFullPath: string[];
	    /**
	     *
	     * @param name
	     * @param ns
	     */
	    assetPathEquals(name: string, ns: string): boolean;
	    /**
	     *
	     * @param name
	     * @param ns
	     * @param overrideOriginal
	     */
	    resetAssetPath(name: string, ns: string, overrideOriginal?: boolean): void;
	    /**
	     *
	     */
	    dispose(): any;
	}
	export = IAsset;
	
}
declare module "awayjs-core/lib/events/AssetEvent" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import Event = require("awayjs-core/lib/events/Event");
	/**
	 * @class away.events.AssetEvent
	 */
	class AssetEvent extends Event {
	    /**
	     *
	     */
	    static ASSET_COMPLETE: string;
	    /**
	     *
	     */
	    static ASSET_RENAME: string;
	    /**
	     *
	     */
	    static ASSET_CONFLICT_RESOLVED: string;
	    /**
	     *
	     */
	    static TEXTURE_SIZE_ERROR: string;
	    private _asset;
	    private _prevName;
	    /**
	     *
	     */
	    constructor(type: string, asset?: IAsset, prevName?: string);
	    /**
	     *
	     */
	    asset: IAsset;
	    /**
	     *
	     */
	    assetPrevName: string;
	    /**
	     *
	     */
	    clone(): Event;
	}
	export = AssetEvent;
	
}
declare module "awayjs-core/lib/events/EventDispatcher" {
	import Event = require("awayjs-core/lib/events/Event");
	/**
	 * Base class for dispatching events
	*
	* @class away.events.EventDispatcher
	*
	*/
	class EventDispatcher {
	    private listeners;
	    private target;
	    constructor(target?: any);
	    /**
	     * Add an event listener
	     * @method addEventListener
	     * @param {String} Name of event to add a listener for
	     * @param {Function} Callback function
	     */
	    addEventListener(type: string, listener: Function): void;
	    /**
	     * Remove an event listener
	     * @method removeEventListener
	     * @param {String} Name of event to remove a listener for
	     * @param {Function} Callback function
	     */
	    removeEventListener(type: string, listener: Function): void;
	    /**
	     * Dispatch an event
	     * @method dispatchEvent
	     * @param {Event} Event to dispatch
	     */
	    dispatchEvent(event: Event): void;
	    /**
	     * get Event Listener Index in array. Returns -1 if no listener is added
	     * @method getEventListenerIndex
	     * @param {String} Name of event to remove a listener for
	     * @param {Function} Callback function
	     */
	    private getEventListenerIndex(type, listener);
	    /**
	     * check if an object has an event listener assigned to it
	     * @method hasListener
	     * @param {String} Name of event to remove a listener for
	     * @param {Function} Callback function
	     */
	    hasEventListener(type: string, listener?: Function): boolean;
	}
	export = EventDispatcher;
	
}
declare module "awayjs-core/lib/events/HTTPStatusEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	/**
	 * @class away.events.HTTPStatusEvent
	 */
	class HTTPStatusEvent extends Event {
	    static HTTP_STATUS: string;
	    status: number;
	    constructor(type: string, status?: number);
	}
	export = HTTPStatusEvent;
	
}
declare module "awayjs-core/lib/events/IOErrorEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class IOErrorEvent extends Event {
	    static IO_ERROR: string;
	    constructor(type: string);
	}
	export = IOErrorEvent;
	
}
declare module "awayjs-core/lib/events/LoaderEvent" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import Event = require("awayjs-core/lib/events/Event");
	class LoaderEvent extends Event {
	    /**
	     * Dispatched when a resource and all of its dependencies is retrieved.
	     */
	    static RESOURCE_COMPLETE: string;
	    private _url;
	    private _content;
	    private _assets;
	    /**
	     * Create a new LoaderEvent object.
	     *
	     * @param type The event type.
	     * @param url The url of the loaded resource.
	     * @param assets The assets of the loaded resource.
	     */
	    constructor(type: string, url?: string, content?: IAsset, assets?: IAsset[]);
	    /**
	     * The content returned if the resource has been loaded inside a <code>Loader</code> object.
	     */
	    content: IAsset;
	    /**
	     * The url of the loaded resource.
	     */
	    url: string;
	    /**
	     * The error string on loadError.
	     */
	    assets: IAsset[];
	    /**
	     * Clones the current event.
	     * @return An exact duplicate of the current event.
	     */
	    clone(): Event;
	}
	export = LoaderEvent;
	
}
declare module "awayjs-core/lib/events/ParserEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class ParserEvent extends Event {
	    private _message;
	    /**
	     * Dispatched when parsing of an asset completed.
	     */
	    static PARSE_COMPLETE: string;
	    /**
	     * Dispatched when an error occurs while parsing the data (e.g. because it's
	     * incorrectly formatted.)
	     */
	    static PARSE_ERROR: string;
	    /**
	     * Dispatched when a parser is ready to have dependencies retrieved and resolved.
	     * This is an internal event that should rarely (if ever) be listened for by
	     * external classes.
	     */
	    static READY_FOR_DEPENDENCIES: string;
	    constructor(type: string, message?: string);
	    /**
	     * Additional human-readable message. Usually supplied for ParserEvent.PARSE_ERROR events.
	     */
	    message: string;
	    clone(): Event;
	}
	export = ParserEvent;
	
}
declare module "awayjs-core/lib/events/ProgressEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class ProgressEvent extends Event {
	    static PROGRESS: string;
	    bytesLoaded: number;
	    bytesTotal: number;
	    constructor(type: string);
	}
	export = ProgressEvent;
	
}
declare module "awayjs-core/lib/projections/IProjection" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import IEventDispatcher = require("awayjs-core/lib/events/IEventDispatcher");
	/**
	 * IMaterialOwner provides an interface for objects that can use materials.
	 *
	 * @interface away.base.IMaterialOwner
	 */
	interface IProjection extends IEventDispatcher {
	    coordinateSystem: string;
	    frustumCorners: number[];
	    matrix: Matrix3D;
	    near: number;
	    originX: number;
	    originY: number;
	    far: number;
	    _iAspectRatio: number;
	    project(point3d: Vector3D): Vector3D;
	    unproject(nX: number, nY: number, sZ: number): Vector3D;
	    _iUpdateScissorRect(x: number, y: number, width: number, height: number): any;
	    _iUpdateViewport(x: number, y: number, width: number, height: number): any;
	}
	export = IProjection;
	
}
declare module "awayjs-core/lib/events/ProjectionEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	import IProjection = require("awayjs-core/lib/projections/IProjection");
	class ProjectionEvent extends Event {
	    static MATRIX_CHANGED: string;
	    private _projection;
	    constructor(type: string, projection: IProjection);
	    projection: IProjection;
	}
	export = ProjectionEvent;
	
}
declare module "awayjs-core/lib/events/TimerEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class TimerEvent extends Event {
	    static TIMER: string;
	    static TIMER_COMPLETE: string;
	    constructor(type: string);
	}
	export = TimerEvent;
	
}
declare module "awayjs-core/lib/geom/MathConsts" {
	/**
	* MathConsts provides some commonly used mathematical constants
	*/
	class MathConsts {
	    /**
	     * The amount to multiply with when converting radians to degrees.
	     */
	    static RADIANS_TO_DEGREES: number;
	    /**
	     * The amount to multiply with when converting degrees to radians.
	     */
	    static DEGREES_TO_RADIANS: number;
	}
	export = MathConsts;
	
}
declare module "awayjs-core/lib/geom/PerspectiveProjection" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Point = require("awayjs-core/lib/geom/Point");
	/**
	 * <p>The PerspectiveProjection class provides an easy way to assign or modify
	 * the perspective transformations of a display object and all of its
	 * children. For more complex or custom perspective transformations, use the
	 * Matrix3D class. While the PerspectiveProjection class provides basic
	 * three-dimensional presentation properties, the Matrix3D class provides more
	 * detailed control over the three-dimensional presentation of display objects.
	 * </p>
	 *
	 * <p>Projection is a way of representing a three-dimensional object in a
	 * two-dimensional space, like a cube projected onto a computer screen.
	 * Perspective projection uses a viewing frustum (a rectangular pyramid) to
	 * model and project a three-dimensional world and its objects on the screen.
	 * The viewing frustum becomes increasingly wider as it moves further from the
	 * origin of the viewpoint. The origin of the viewpoint could be a camera or
	 * the eyes of an observer facing the screen. The projected perspective
	 * produces the illusion of three dimensions with depth and distance, where
	 * the objects closer to the screen appear larger than the objects farther
	 * from the screen.</p>
	 *
	 * <p>A default PerspectiveProjection object is a framework defined for
	 * perspective transformation of the root object, based on the field of view
	 * and aspect ratio (dimensions) of the stage. The projection center, the
	 * vanishing point, is set to the center of the stage, which means the
	 * three-dimensional display objects disappear toward the center of the stage
	 * as they move back in the z axis. The default viewpoint is at point (0,0)
	 * looking down the positive z axis. The y-axis points down toward the bottom
	 * of the screen. You can gain access to the root display object's perspective
	 * projection settings and change the field of view and projection center
	 * properties of the perspectiveProjection property through the root object's
	 * <code>DisplayObject.transform</code> property.</p>
	 *
	 * <p>You can also set a different perspective projection setting for a
	 * display object through the parent's perspective projection. First, create a
	 * PerspectiveProjection object and set its <code>fieldOfView</code> and
	 * <code>projectionCenter</code> properties. Next, assign the
	 * PerspectiveProjection object to the parent display object using the
	 * <code>DisplayObject.transform</code> property. The specified projection
	 * matrix and transformation will then apply to all the display object's
	 * three-dimensional children.</p>
	 *
	 * <p>To modify a perspective projection of the stage or root object: use the
	 * <code>transform.matrix</code> property of the root display object to gain
	 * access to the PerspectiveProjection object. Or, apply different perspective
	 * projection properties to a display object by setting the perspective
	 * projection properties of the display object's parent. The child display
	 * object inherits the new properties. Specifically, create a
	 * PerspectiveProjection object and set its properties, then assign the
	 * PerspectiveProjection object to the <code>perspectiveProjection</code>
	 * property of the parent display object's <code>transform</code> property.
	 * The specified projection transformation then applies to all the display
	 * object's three-dimensional children.</p>
	 *
	 * <p>Since both PerspectiveProjection and Matrix3D objects perform
	 * perspective transformations, do not assign both to a display object at the
	 * same time. Use the PerspectiveProjection object for focal length and
	 * projection center changes. For more control over the perspective
	 * transformation, create a perspective projection Matrix3D object.</p>
	 */
	class PerspectiveProjection {
	    private _matrix3D;
	    /**
	     * Specifies an angle, as a degree between 0 and 180, for the field of
	     * view in three dimensions. This value determines how strong the
	     * perspective transformation and distortion apply to a
	     * three-dimensional display object with a non-zero z-coordinate.
	     *
	     * <p>A degree close to 0 means that the screen's two-dimensional x-
	     * and y-coordinates are roughly the same as the three-dimensional x-,
	     * y-, and z-coordinates with little or no distortion. In other words,
	     * for a small angle, a display object moving down the z axis appears
	     * to stay near the same size and moves little.</p>
	     *
	     * <p>A value close to 180 degrees results in a fisheye projection effect:
	     * positions with a z value smaller than 0 are magnified, while
	     * positions with a z value larger than 0 are minimized. With a large
	     * angle, a display object moving down the z axis appears to change
	     * size quickly and moves a great distance. If the field of view is
	     * set to 0 or 180, nothing is seen on the screen.</p>
	     */
	    fieldOfView: number;
	    /**
	     * The distance between the eye or the viewpoint's origin (0,0,0) and
	     * the display object located in the z axis. During the perspective
	     * transformation, the <code>focalLength</code> is calculated
	     * dynamically using the angle of the field of view and the stage's
	     * aspect ratio (stage width divided by stage height).
	     *
	     * @see away.geom.PerspectiveProjection#fieldOfView
	     */
	    focalLength: number;
	    /**
	     * A two-dimensional point representing the center of the projection,
	     * the vanishing point for the display object.
	     *
	     * <p>The <code>projectionCenter</code> property is an offset to the
	     * default registration point that is the upper left of the stage,
	     * point (0,0). The default projection transformation center is in the
	     * middle of the stage, which means the three-dimensional display
	     * objects disappear toward the center of the stage as they move
	     * backwards in the z axis.</p>
	     */
	    projectionCenter: Point;
	    /**
	     * Creates an instance of a PerspectiveProjection object.
	     */
	    constructor();
	    /**
	     * Returns the underlying Matrix3D object of the display object.
	     *
	     * <p>A display object, like the root object, can have a
	     * PerspectiveProjection object without needing a Matrix3D property
	     * defined for its transformations. In fact, use either a
	     * PerspectiveProjection or a Matrix3D object to specify the
	     * perspective transformation. If when using the PerspectiveProjection
	     * object, a Matrix3D object was needed, the <code>toMatrix3D()</code>
	     * method can retrieve the underlying Matrix3D object of the display
	     * object. For example, the <code>toMatrix3D()</code> method can be
	     * used with the <code>Utils3D.projectVectors()</code> method.</p>
	     *
	     * @see away.geom.Matrix3D
	     */
	    toMatrix3D(): Matrix3D;
	}
	export = PerspectiveProjection;
	
}
declare module "awayjs-core/lib/geom/PoissonLookup" {
	class PoissonLookup {
	    static _distributions: number[][];
	    static initDistributions(): void;
	    static getDistribution(n: number): number[];
	}
	export = PoissonLookup;
	
}
declare module "awayjs-core/lib/geom/UVTransform" {
	import Matrix = require("awayjs-core/lib/geom/Matrix");
	class UVTransform {
	    private _uvMatrix;
	    private _uvMatrixDirty;
	    private _rotation;
	    private _scaleU;
	    private _scaleV;
	    private _offsetU;
	    private _offsetV;
	    /**
	     *
	     */
	    offsetU: number;
	    /**
	     *
	     */
	    offsetV: number;
	    /**
	     *
	     */
	    rotation: number;
	    /**
	     *
	     */
	    scaleU: number;
	    /**
	     *
	     */
	    scaleV: number;
	    /**
	     *
	     */
	    matrix: Matrix;
	    constructor();
	    /**
	     * @private
	     */
	    private updateUVMatrix();
	}
	export = UVTransform;
	
}
declare module "awayjs-core/lib/net/URLRequestMethod" {
	class URLRequestMethod {
	    /**
	     *
	     * @type {string}
	     */
	    static POST: string;
	    /**
	     *
	     * @type {string}
	     */
	    static GET: string;
	}
	export = URLRequestMethod;
	
}
declare module "awayjs-core/lib/net/URLRequest" {
	class URLRequest {
	    /**
	     * Object containing data to be transmited with URL Request ( URL Variables / binary / string )
	     *
	     */
	    data: any;
	    /**
	     *
	     * away.net.URLRequestMethod.GET
	     * away.net.URLRequestMethod.POST
	     *
	     * @type {string}
	     */
	    method: string;
	    /**
	     * Use asynchronous XMLHttpRequest
	     * @type {boolean}
	     */
	    async: boolean;
	    /**
	     *
	     */
	    private _url;
	    /**
	
	     * @param url
	     */
	    constructor(url?: string);
	    /**
	     *
	     * @returns {string}
	     */
	    /**
	     *
	     * @param value
	     */
	    url: string;
	    /**
	     * dispose
	     */
	    dispose(): void;
	}
	export = URLRequest;
	
}
declare module "awayjs-core/lib/library/AssetLibraryIterator" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	class AssetLibraryIterator {
	    private _assets;
	    private _filtered;
	    private _idx;
	    constructor(assets: IAsset[], assetTypeFilter: string, namespaceFilter: string, filterFunc: any);
	    currentAsset: IAsset;
	    numAssets: number;
	    next(): IAsset;
	    reset(): void;
	    setIndex(index: number): void;
	    private filter(assetTypeFilter, namespaceFilter, filterFunc);
	}
	export = AssetLibraryIterator;
	
}
declare module "awayjs-core/lib/library/AssetLoaderContext" {
	class AssetLoaderContext {
	    static UNDEFINED: number;
	    static SINGLEPASS_MATERIALS: number;
	    static MULTIPASS_MATERIALS: number;
	    private _includeDependencies;
	    private _dependencyBaseUrl;
	    private _embeddedDataByUrl;
	    private _remappedUrls;
	    private _materialMode;
	    private _overrideAbsPath;
	    private _overrideFullUrls;
	    /**
	     * AssetLoaderContext provides configuration for the AssetLoader load() and parse() operations.
	     * Use it to configure how (and if) dependencies are loaded, or to map dependency URLs to
	     * embedded data.
	     *
	     * @see away.loading.AssetLoader
	     */
	    constructor(includeDependencies?: boolean, dependencyBaseUrl?: string);
	    /**
	     * Defines whether dependencies (all files except the one at the URL given to the load() or
	     * parseData() operations) should be automatically loaded. Defaults to true.
	     */
	    includeDependencies: boolean;
	    /**
	     * MaterialMode defines, if the Parser should create SinglePass or MultiPass Materials
	     * Options:
	     * 0 (Default / undefined) - All Parsers will create SinglePassMaterials, but the AWD2.1parser will create Materials as they are defined in the file
	     * 1 (Force SinglePass) - All Parsers create SinglePassMaterials
	     * 2 (Force MultiPass) - All Parsers will create MultiPassMaterials
	     *
	     */
	    materialMode: number;
	    /**
	     * A base URL that will be prepended to all relative dependency URLs found in a loaded resource.
	     * Absolute paths will not be affected by the value of this property.
	     */
	    dependencyBaseUrl: string;
	    /**
	     * Defines whether absolute paths (defined as paths that begin with a "/") should be overridden
	     * with the dependencyBaseUrl defined in this context. If this is true, and the base path is
	     * "base", /path/to/asset.jpg will be resolved as base/path/to/asset.jpg.
	     */
	    overrideAbsolutePaths: boolean;
	    /**
	     * Defines whether "full" URLs (defined as a URL that includes a scheme, e.g. http://) should be
	     * overridden with the dependencyBaseUrl defined in this context. If this is true, and the base
	     * path is "base", http://example.com/path/to/asset.jpg will be resolved as base/path/to/asset.jpg.
	     */
	    overrideFullURLs: boolean;
	    /**
	     * Map a URL to another URL, so that files that are referred to by the original URL will instead
	     * be loaded from the new URL. Use this when your file structure does not match the one that is
	     * expected by the loaded file.
	     *
	     * @param originalUrl The original URL which is referenced in the loaded resource.
	     * @param newUrl The URL from which away.should load the resource instead.
	     *
	     * @see mapUrlToData()
	     */
	    mapUrl(originalUrl: string, newUrl: string): void;
	    /**
	     * Map a URL to embedded data, so that instead of trying to load a dependency from the URL at
	     * which it's referenced, the dependency data will be retrieved straight from the memory instead.
	     *
	     * @param originalUrl The original URL which is referenced in the loaded resource.
	     * @param data The embedded data. Can be ByteArray or a class which can be used to create a bytearray.
	     */
	    mapUrlToData(originalUrl: string, data: any): void;
	    /**
	     * @private
	     * Defines whether embedded data has been mapped to a particular URL.
	     */
	    _iHasDataForUrl(url: string): boolean;
	    /**
	     * @private
	     * Returns embedded data for a particular URL.
	     */
	    _iGetDataForUrl(url: string): any;
	    /**
	     * @private
	     * Defines whether a replacement URL has been mapped to a particular URL.
	     */
	    _iHasMappingForUrl(url: string): boolean;
	    /**
	     * @private
	     * Returns new (replacement) URL for a particular original URL.
	     */
	    _iGetRemappedUrl(originalUrl: string): string;
	}
	export = AssetLoaderContext;
	
}
declare module "awayjs-core/lib/library/AssetLoaderToken" {
	import AssetLoader = require("awayjs-core/lib/library/AssetLoader");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	/**
	 * Dispatched when any asset finishes parsing. Also see specific events for each
	 * individual asset type (meshes, materials et c.)
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a full resource (including dependencies) finishes loading.
	 *
	 * @eventType away.events.LoaderEvent
	 */
	/**
	 * Dispatched when a single dependency (which may be the main file of a resource)
	 * finishes loading.
	 *
	 * @eventType away.events.LoaderEvent
	 */
	/**
	 * Dispatched when an error occurs during loading. I
	 *
	 * @eventType away.events.LoaderEvent
	 */
	/**
	 * Dispatched when an error occurs during parsing.
	 *
	 * @eventType away.events.ParserEvent
	 */
	/**
	 * Dispatched when a skybox asset has been costructed from a ressource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a camera3d asset has been costructed from a ressource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a mesh asset has been costructed from a ressource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a geometry asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a skeleton asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a skeleton pose asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a container asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a texture asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a texture projector asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a material asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a animator asset has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an animation set has been constructed from a group of animation state resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an animation state has been constructed from a group of animation node resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an animation node has been constructed from a resource.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an animation state transition has been constructed from a group of animation node resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an light asset has been constructed from a resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an light picker asset has been constructed from a resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an effect method asset has been constructed from a resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when an shadow map method asset has been constructed from a resources.
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Instances of this class are returned as tokens by loading operations
	 * to provide an object on which events can be listened for in cases where
	 * the actual asset loader is not directly available (e.g. when using the
	 * AssetLibrary to perform the load.)
	 *
	 * By listening for events on this class instead of directly on the
	 * AssetLibrary, one can distinguish different loads from each other.
	 *
	 * The token will dispatch all events that the original AssetLoader dispatches,
	 * while not providing an interface to obstruct the load and is as such a
	 * safer return value for loader wrappers than the loader itself.
	 */
	class AssetLoaderToken extends EventDispatcher {
	    _iLoader: AssetLoader;
	    constructor(loader: AssetLoader);
	    addEventListener(type: string, listener: Function): void;
	    removeEventListener(type: string, listener: Function): void;
	    hasEventListener(type: string, listener?: Function): boolean;
	}
	export = AssetLoaderToken;
	
}
declare module "awayjs-core/lib/net/URLLoaderDataFormat" {
	class URLLoaderDataFormat {
	    /**
	     * TEXT
	     * @type {string}
	     */
	    static TEXT: string;
	    /**
	     * Variables / Value Pairs
	     * @type {string}
	     */
	    static VARIABLES: string;
	    /**
	     *
	     * @type {string}
	     */
	    static BLOB: string;
	    /**
	     *
	     * @type {string}
	     */
	    static ARRAY_BUFFER: string;
	    /**
	     *
	     * @type {string}
	     */
	    static BINARY: string;
	}
	export = URLLoaderDataFormat;
	
}
declare module "awayjs-core/lib/net/URLVariables" {
	class URLVariables {
	    private _variables;
	    /**
	     *
	     * @param source
	     */
	    constructor(source?: string);
	    /**
	     *
	     * @param source
	     */
	    decode(source: string): void;
	    /**
	     *
	     * @returns {string}
	     */
	    toString(): string;
	    /**
	     *
	     * @returns {Object}
	     */
	    /**
	     *
	     * @returns {Object}
	     */
	    variables: Object;
	    /**
	     *
	     * @returns {Object}
	     */
	    formData: FormData;
	}
	export = URLVariables;
	
}
declare module "awayjs-core/lib/net/URLLoader" {
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	/**
	 * The URLLoader is used to load a single file, as part of a resource.
	 *
	 * While URLLoader can be used directly, e.g. to create a third-party asset
	 * management system, it's recommended to use any of the classes Loader3D, AssetLoader
	 * and AssetLibrary instead in most cases.
	 *
	 * @see AssetLoader
	 * @see away.library.AssetLibrary
	 */
	class URLLoader extends EventDispatcher {
	    private _XHR;
	    private _bytesLoaded;
	    private _bytesTotal;
	    private _dataFormat;
	    private _loadError;
	    private _request;
	    private _data;
	    private _loadStartEvent;
	    private _loadErrorEvent;
	    private _loadCompleteEvent;
	    private _progressEvent;
	    /**
	     * Creates a new URLLoader object.
	     */
	    constructor();
	    /**
	     *
	     */
	    url: string;
	    /**
	     *
	     */
	    data: any;
	    /**
	     *
	     * URLLoaderDataFormat.BINARY
	     * URLLoaderDataFormat.TEXT
	     * URLLoaderDataFormat.VARIABLES
	     *
	     * @param format
	     */
	    dataFormat: string;
	    /**
	     *
	     * @returns {number}
	     */
	    bytesLoaded: number;
	    /**
	     *
	     * @returns {number}
	     */
	    bytesTotal: number;
	    /**
	     * Load a resource from a file.
	     *
	     * @param request The URLRequest object containing the URL of the object to be loaded.
	     */
	    load(request: URLRequest): void;
	    /**
	     *
	     */
	    close(): void;
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     * @param xhr
	     * @param responseType
	     */
	    private setResponseType(xhr, responseType);
	    /**
	     *
	     * @param request {URLRequest}
	     */
	    private getRequest(request);
	    /**
	     *
	     * @param request {URLRequest}
	     */
	    private postRequest(request);
	    /**
	     *
	     * @param error {XMLHttpRequestException}
	     */
	    private handleXmlHttpRequestException(error);
	    /**
	     *
	     */
	    private initXHR();
	    /**
	     *
	     */
	    private disposeXHR();
	    /**
	     *
	     * @param source
	     */
	    decodeURLVariables(source: string): Object;
	    /**
	     * When XHR state changes
	     * @param event
	     */
	    private onReadyStateChange(event);
	    /**
	     * When the request has completed, regardless of whether or not it was successful.
	     * @param event
	     */
	    private onLoadEnd(event);
	    /**
	     * When the author specified timeout has passed before the request could complete.
	     * @param event
	     */
	    private onTimeOut(event);
	    /**
	     * When the request has been aborted, either by invoking the abort() method or navigating away from the page.
	     * @param event
	     */
	    private onAbort(event);
	    /**
	     * While loading and sending data.
	     * @param event
	     */
	    private onProgress(event);
	    /**
	     * When the request starts.
	     * @param event
	     */
	    private onLoadStart(event);
	    /**
	     * When the request has successfully completed.
	     * @param event
	     */
	    private onLoadComplete(event);
	    /**
	     * When the request has failed. ( due to network issues ).
	     * @param event
	     */
	    private onLoadError(event);
	}
	export = URLLoader;
	
}
declare module "awayjs-core/lib/parsers/ParserUtils" {
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	class ParserUtils {
	    /**
	     * Converts an ArrayBuffer to a base64 string
	     *
	     * @param image data as a ByteArray
	     *
	     * @return HTMLImageElement
	     *
	     */
	    static arrayBufferToImage(data: ArrayBuffer): HTMLImageElement;
	    /**
	     * Converts an ByteArray to an Image - returns an HTMLImageElement
	     *
	     * @param image data as a ByteArray
	     *
	     * @return HTMLImageElement
	     *
	     */
	    static byteArrayToImage(data: ByteArray): HTMLImageElement;
	    /**
	     * Converts an Blob to an Image - returns an HTMLImageElement
	     *
	     * @param image data as a Blob
	     *
	     * @return HTMLImageElement
	     *
	     */
	    static blobToImage(data: Blob): HTMLImageElement;
	    /**
	     * Returns a object as ByteArray, if possible.
	     *
	     * @param data The object to return as ByteArray
	     *
	     * @return The ByteArray or null
	     *
	     */
	    static toByteArray(data: any): ByteArray;
	    /**
	     * Returns a object as String, if possible.
	     *
	     * @param data The object to return as String
	     * @param length The length of the returned String
	     *
	     * @return The String or null
	     *
	     */
	    static toString(data: any, length?: number): string;
	}
	export = ParserUtils;
	
}
declare module "awayjs-core/lib/parsers/ResourceDependency" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import URLLoader = require("awayjs-core/lib/net/URLLoader");
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	/**
	 * ResourceDependency represents the data required to load, parse and resolve additional files ("dependencies")
	 * required by a parser, used by ResourceLoadSession.
	 *
	 */
	class ResourceDependency {
	    private _id;
	    private _request;
	    private _assets;
	    private _parser;
	    private _parentParser;
	    private _data;
	    private _retrieveAsRawData;
	    private _suppressAssetEvents;
	    private _dependencies;
	    _iLoader: URLLoader;
	    _iSuccess: boolean;
	    constructor(id: string, request: URLRequest, data: any, parser: ParserBase, parentParser: ParserBase, retrieveAsRawData?: boolean, suppressAssetEvents?: boolean);
	    /**
	     *
	     */
	    id: string;
	    /**
	     *
	     */
	    request: URLRequest;
	    /**
	     * The data containing the dependency to be parsed, if the resource was already loaded.
	     */
	    data: any;
	    /**
	     *
	     */
	    parser: ParserBase;
	    /**
	     * The parser which is dependent on this ResourceDependency object.
	     */
	    parentParser: ParserBase;
	    /**
	     *
	     */
	    retrieveAsRawData: boolean;
	    /**
	     *
	     */
	    suppresAssetEvents: boolean;
	    /**
	     *
	     */
	    assets: IAsset[];
	    /**
	     *
	     */
	    dependencies: ResourceDependency[];
	    /**
	     * @private
	     * Method to set data after having already created the dependency object, e.g. after load.
	     */
	    _iSetData(data: any): void;
	    /**
	     * @private
	     *
	     */
	    _iSetParser(parser: ParserBase): void;
	    /**
	     * Resolve the dependency when it's loaded with the parent parser. For example, a dependency containing an
	     * ImageResource would be assigned to a Mesh instance as a BitmapMaterial, a scene graph object would be added
	     * to its intended parent. The dependency should be a member of the dependencies property.
	     */
	    resolve(): void;
	    /**
	     * Resolve a dependency failure. For example, map loading failure from a 3d file
	     */
	    resolveFailure(): void;
	    /**
	     * Resolve the dependencies name
	     */
	    resolveName(asset: IAsset): string;
	}
	export = ResourceDependency;
	
}
declare module "awayjs-core/lib/utils/TextureUtils" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	class TextureUtils {
	    private static MAX_SIZE;
	    static isBitmapDataValid(bitmapData: BitmapData): boolean;
	    static isHTMLImageElementValid(image: HTMLImageElement): boolean;
	    static isDimensionValid(d: number): boolean;
	    static isPowerOfTwo(value: number): boolean;
	    static getBestPowerOf2(value: number): number;
	}
	export = TextureUtils;
	
}
declare module "awayjs-core/lib/utils/Timer" {
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	class Timer extends EventDispatcher {
	    private _delay;
	    private _repeatCount;
	    private _currentCount;
	    private _iid;
	    private _running;
	    constructor(delay: number, repeatCount?: number);
	    currentCount: number;
	    delay: number;
	    repeatCount: number;
	    reset(): void;
	    running: boolean;
	    start(): void;
	    stop(): void;
	    private tick();
	}
	export = Timer;
	
}
declare module "awayjs-core/lib/utils/getTimer" {
	/**
	 *
	 *
	 * @returns {number}
	 */
	function getTimer(): number;
	export = getTimer;
	
}
declare module "awayjs-core/lib/parsers/ParserBase" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import TimerEvent = require("awayjs-core/lib/events/TimerEvent");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	/**
	 * <code>ParserBase</code> provides an abstract base class for objects that convert blocks of data to data structures
	 * supported by away.
	 *
	 * If used by <code>AssetLoader</code> to automatically determine the parser type, two public static methods should
	 * be implemented, with the following signatures:
	 *
	 * <code>public static supportsType(extension : string) : boolean</code>
	 * Indicates whether or not a given file extension is supported by the parser.
	 *
	 * <code>public static supportsData(data : *) : boolean</code>
	 * Tests whether a data block can be parsed by the parser.
	 *
	 * Furthermore, for any concrete subtype, the method <code>initHandle</code> should be overridden to immediately
	 * create the object that will contain the parsed data. This allows <code>ResourceManager</code> to return an object
	 * handle regardless of whether the object was loaded or not.
	 *
	 * @see AssetLoader
	 */
	class ParserBase extends EventDispatcher {
	    _iFileName: string;
	    private _dataFormat;
	    private _data;
	    private _frameLimit;
	    private _lastFrameTime;
	    private _pOnIntervalDelegate;
	    _pContent: IAsset;
	    static supportsType(extension: string): boolean;
	    private _dependencies;
	    private _parsingPaused;
	    private _parsingComplete;
	    private _parsingFailure;
	    private _timer;
	    private _materialMode;
	    /**
	     * Returned by <code>proceedParsing</code> to indicate no more parsing is needed.
	     */
	    static PARSING_DONE: boolean;
	    /**
	     * Returned by <code>proceedParsing</code> to indicate more parsing is needed, allowing asynchronous parsing.
	     */
	    static MORE_TO_PARSE: boolean;
	    content: IAsset;
	    /**
	     * Creates a new ParserBase object
	     * @param format The data format of the file data to be parsed. Can be either <code>ParserDataFormat.BINARY</code> or <code>ParserDataFormat.PLAIN_TEXT</code>, and should be provided by the concrete subtype.
	     *
	     * @see away.loading.parsers.ParserDataFormat
	     */
	    constructor(format: string);
	    /**
	     * Validates a bitmapData loaded before assigning to a default BitmapMaterial
	     */
	    isBitmapDataValid(bitmapData: BitmapData): boolean;
	    parsingFailure: boolean;
	    parsingPaused: boolean;
	    parsingComplete: boolean;
	    materialMode: number;
	    data: any;
	    /**
	     * The data format of the file data to be parsed. Options are <code>URLLoaderDataFormat.BINARY</code>, <code>URLLoaderDataFormat.ARRAY_BUFFER</code>, <code>URLLoaderDataFormat.BLOB</code>, <code>URLLoaderDataFormat.VARIABLES</code> or <code>URLLoaderDataFormat.TEXT</code>.
	     */
	    dataFormat: string;
	    /**
	     * Parse data (possibly containing bytearry, plain text or BitmapAsset) asynchronously, meaning that
	     * the parser will periodically stop parsing so that the AVM may proceed to the
	     * next frame.
	     *
	     * @param data The untyped data object in which the loaded data resides.
	     * @param frameLimit number of milliseconds of parsing allowed per frame. The
	     * actual time spent on a frame can exceed this number since time-checks can
	     * only be performed between logical sections of the parsing procedure.
	     */
	    parseAsync(data: any, frameLimit?: number): void;
	    /**
	     * A list of dependencies that need to be loaded and resolved for the object being parsed.
	     */
	    dependencies: ResourceDependency[];
	    /**
	     * Resolve a dependency when it's loaded. For example, a dependency containing an ImageResource would be assigned
	     * to a Mesh instance as a BitmapMaterial, a scene graph object would be added to its intended parent. The
	     * dependency should be a member of the dependencies property.
	     *
	     * @param resourceDependency The dependency to be resolved.
	     */
	    _iResolveDependency(resourceDependency: ResourceDependency): void;
	    /**
	     * Resolve a dependency loading failure. Used by parser to eventually provide a default map
	     *
	     * @param resourceDependency The dependency to be resolved.
	     */
	    _iResolveDependencyFailure(resourceDependency: ResourceDependency): void;
	    /**
	     * Resolve a dependency name
	     *
	     * @param resourceDependency The dependency to be resolved.
	     */
	    _iResolveDependencyName(resourceDependency: ResourceDependency, asset: IAsset): string;
	    _iResumeParsingAfterDependencies(): void;
	    _pFinalizeAsset(asset: IAsset, name?: string): void;
	    /**
	     * Parse the next block of data.
	     * @return Whether or not more data needs to be parsed. Can be <code>ParserBase.ParserBase.PARSING_DONE</code> or
	     * <code>ParserBase.ParserBase.MORE_TO_PARSE</code>.
	     */
	    _pProceedParsing(): boolean;
	    _pDieWithError(message?: string): void;
	    _pAddDependency(id: string, req: URLRequest, retrieveAsRawData?: boolean, data?: any, suppressErrorEvents?: boolean): ResourceDependency;
	    _pPauseAndRetrieveDependencies(): void;
	    /**
	     * Tests whether or not there is still time left for parsing within the maximum allowed time frame per session.
	     * @return True if there is still time left, false if the maximum allotted time was exceeded and parsing should be interrupted.
	     */
	    _pHasTime(): boolean;
	    /**
	     * Called when the parsing pause interval has passed and parsing can proceed.
	     */
	    _pOnInterval(event?: TimerEvent): void;
	    /**
	     * Initializes the parsing of data.
	     * @param frameLimit The maximum duration of a parsing session.
	     */
	    _pStartParsing(frameLimit: number): void;
	    /**
	     * Finish parsing the data.
	     */
	    _pFinishParsing(): void;
	    /**
	     *
	     * @returns {string}
	     * @private
	     */
	    _pGetTextData(): string;
	    /**
	     *
	     * @returns {string}
	     * @private
	     */
	    _pGetByteData(): ByteArray;
	}
	export = ParserBase;
	
}
declare module "awayjs-core/lib/textures/MipmapGenerator" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	/**
	 * MipmapGenerator is a helper class that uploads BitmapData to a Texture including mipmap levels.
	 */
	class MipmapGenerator {
	    private static _mipMaps;
	    private static _mipMapUses;
	    private static _matrix;
	    private static _rect;
	    private static _source;
	    /**
	     * Uploads a BitmapData with mip maps to a target Texture object.
	     * @param source The source to upload.
	     * @param target The target Texture to upload to.
	     * @param mipmap An optional mip map holder to avoids creating new instances for fe animated materials.
	     * @param alpha Indicate whether or not the uploaded bitmapData is transparent.
	     */
	    static generateMipMaps(source: HTMLImageElement, output?: BitmapData[], alpha?: boolean): any;
	    static generateMipMaps(source: BitmapData, output?: BitmapData[], alpha?: boolean): any;
	    private static _getMipmapHolder(mipMapHolder, newW, newH);
	    static freeMipMapHolder(mipMapHolder: BitmapData): void;
	}
	export = MipmapGenerator;
	
}
declare module "awayjs-core/lib/library/AssetType" {
	class AssetType {
	    static ANIMATION_NODE: string;
	    static ANIMATION_SET: string;
	    static ANIMATION_STATE: string;
	    static ANIMATOR: string;
	    static BILLBOARD: string;
	    static CAMERA: string;
	    static CONTAINER: string;
	    static EFFECTS_METHOD: string;
	    static GEOMETRY: string;
	    static LINE_SEGMENT: string;
	    static LIGHT: string;
	    static LIGHT_PICKER: string;
	    static MATERIAL: string;
	    static MESH: string;
	    static TRIANGLE_SUB_MESH: string;
	    static LINE_SUB_MESH: string;
	    static PRIMITIVE_PREFAB: string;
	    static SHADOW_MAP_METHOD: string;
	    static SKELETON: string;
	    static SKELETON_POSE: string;
	    static SKYBOX: string;
	    static STATE_TRANSITION: string;
	    static TEXTURE: string;
	    static TEXTURE_PROJECTOR: string;
	    static TIMELINE: string;
	}
	export = AssetType;
	
}
declare module "awayjs-core/lib/library/NamedAssetBase" {
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	class NamedAssetBase extends EventDispatcher {
	    static ID_COUNT: number;
	    private _originalName;
	    private _namespace;
	    private _name;
	    private _id;
	    private _full_path;
	    static DEFAULT_NAMESPACE: string;
	    constructor(name?: string);
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     * The original name used for this asset in the resource (e.g. file) in which
	     * it was found. This may not be the same as <code>name</code>, which may
	     * have changed due to of a name conflict.
	     */
	    originalName: string;
	    /**
	     * A unique id for the asset, used to identify assets in an associative array
	     */
	    id: number;
	    name: string;
	    dispose(): void;
	    assetNamespace: string;
	    assetFullPath: string[];
	    assetPathEquals(name: string, ns: string): boolean;
	    resetAssetPath(name: string, ns?: string, overrideOriginal?: boolean): void;
	    private updateFullPath();
	}
	export = NamedAssetBase;
	
}
declare module "awayjs-core/lib/pool/ITextureData" {
	/**
	 * ITextureData is an interface for classes that are used in the rendering pipeline to render the
	 * contents of a texture
	 *
	 * @class away.pool.ITextureData
	 */
	interface ITextureData {
	    /**
	     *
	     */
	    dispose(): any;
	    /**
	     *
	     */
	    invalidate(): any;
	}
	export = ITextureData;
	
}
declare module "awayjs-core/lib/textures/TextureProxyBase" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import ITextureData = require("awayjs-core/lib/pool/ITextureData");
	/**
	 *
	 */
	class TextureProxyBase extends NamedAssetBase implements IAsset {
	    _pSize: number;
	    _pFormat: string;
	    private _hasMipmaps;
	    private _generateMipmaps;
	    private _textureData;
	    /**
	     *
	     */
	    constructor(generateMipmaps?: boolean);
	    size: number;
	    hasMipmaps: boolean;
	    /**
	     *
	     * @returns {string}
	     */
	    format: string;
	    /**
	     *
	     * @returns {boolean}
	     */
	    generateMipmaps: boolean;
	    /**
	     *
	     * @returns {string}
	     */
	    assetType: string;
	    /**
	     *
	     */
	    invalidateContent(): void;
	    /**
	     *
	     * @private
	     */
	    invalidateSize(): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    _iAddTextureData(textureData: ITextureData): ITextureData;
	    _iRemoveTextureData(textureData: ITextureData): ITextureData;
	}
	export = TextureProxyBase;
	
}
declare module "awayjs-core/lib/textures/CubeTextureBase" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	class CubeTextureBase extends TextureProxyBase {
	    _mipmapDataArray: BitmapData[][];
	    _mipmapDataDirtyArray: boolean[];
	    constructor(generateMipmaps?: boolean);
	    /**
	     *
	     * @param width
	     * @param height
	     * @private
	     */
	    _pSetSize(size: number): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    invalidateContent(): void;
	    _iGetMipmapData(side: number): BitmapData[];
	    _iGetTextureData(side: number): any;
	}
	export = CubeTextureBase;
	
}
declare module "awayjs-core/lib/textures/ImageCubeTexture" {
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	class ImageCubeTexture extends CubeTextureBase {
	    private _htmlImageElements;
	    /**
	     * The texture on the cube's right face.
	     */
	    positiveX: HTMLImageElement;
	    /**
	     * The texture on the cube's left face.
	     */
	    negativeX: HTMLImageElement;
	    /**
	     * The texture on the cube's top face.
	     */
	    positiveY: HTMLImageElement;
	    /**
	     * The texture on the cube's bottom face.
	     */
	    negativeY: HTMLImageElement;
	    /**
	     * The texture on the cube's far face.
	     */
	    positiveZ: HTMLImageElement;
	    /**
	     * The texture on the cube's near face.
	     */
	    negativeZ: HTMLImageElement;
	    constructor(posX: HTMLImageElement, negX: HTMLImageElement, posY: HTMLImageElement, negY: HTMLImageElement, posZ: HTMLImageElement, negZ: HTMLImageElement, generateMipmaps?: boolean);
	    private _testSize(value);
	    _iGetTextureData(side: number): HTMLImageElement;
	}
	export = ImageCubeTexture;
	
}
declare module "awayjs-core/lib/textures/Texture2DBase" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	class Texture2DBase extends TextureProxyBase {
	    private _mipmapData;
	    private _mipmapDataDirty;
	    _pWidth: number;
	    _pHeight: number;
	    /**
	     *
	     * @returns {number}
	     */
	    width: number;
	    /**
	     *
	     * @returns {number}
	     */
	    height: number;
	    size: number;
	    constructor(generateMipmaps?: boolean);
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    invalidateContent(): void;
	    /**
	     *
	     * @param width
	     * @param height
	     * @private
	     */
	    _pSetSize(width: number, height: number): void;
	    _iGetMipmapData(): BitmapData[];
	    _iGetTextureData(): any;
	}
	export = Texture2DBase;
	
}
declare module "awayjs-core/lib/textures/ImageTexture" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	class ImageTexture extends Texture2DBase {
	    private _htmlImageElement;
	    /**
	     *
	     * @param htmlImageElement
	     * @param generateMipmaps
	     */
	    constructor(htmlImageElement: HTMLImageElement, generateMipmaps?: boolean);
	    /**
	     *
	     */
	    htmlImageElement: HTMLImageElement;
	    _iGetTextureData(): HTMLImageElement;
	}
	export = ImageTexture;
	
}
declare module "awayjs-core/lib/parsers/CubeTextureParser" {
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	/**
	 * CubeTextureParser provides a "parser" for natively supported image types (jpg, png). While it simply loads bytes into
	 * a loader object, it wraps it in a BitmapDataResource so resource management can happen consistently without
	 * exception cases.
	 */
	class CubeTextureParser extends ParserBase {
	    private static posX;
	    private static negX;
	    private static posY;
	    private static negY;
	    private static posZ;
	    private static negZ;
	    private _imgDependencyDictionary;
	    /**
	     * Creates a new CubeTextureParser object.
	     * @param uri The url or id of the data or file to be parsed.
	     * @param extra The holder for extra contextual data that the parser might need.
	     */
	    constructor();
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependency(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependencyFailure(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    private _validateCubeData();
	    private _getHTMLImageElement(name);
	}
	export = CubeTextureParser;
	
}
declare module "awayjs-core/lib/parsers/Texture2DParser" {
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	/**
	 * Texture2DParser provides a "parser" for natively supported image types (jpg, png). While it simply loads bytes into
	 * a loader object, it wraps it in a BitmapDataResource so resource management can happen consistently without
	 * exception cases.
	 */
	class Texture2DParser extends ParserBase {
	    private _startedParsing;
	    private _doneParsing;
	    private _loadingImage;
	    private _htmlImageElement;
	    /**
	     * Creates a new Texture2DParser object.
	     * @param uri The url or id of the data or file to be parsed.
	     * @param extra The holder for extra contextual data that the parser might need.
	     */
	    constructor();
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    onLoadComplete(event: any): void;
	}
	export = Texture2DParser;
	
}
declare module "awayjs-core/lib/library/AssetLoader" {
	import AssetLoaderContext = require("awayjs-core/lib/library/AssetLoaderContext");
	import AssetLoaderToken = require("awayjs-core/lib/library/AssetLoaderToken");
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	/**
	 * Dispatched when any asset finishes parsing. Also see specific events for each
	 * individual asset type (meshes, materials et c.)
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * Dispatched when a full resource (including dependencies) finishes loading.
	 *
	 * @eventType away.events.LoaderEvent
	 */
	/**
	 * Dispatched when a single dependency (which may be the main file of a resource)
	 * finishes loading.
	 *
	 * @eventType away.events.LoaderEvent
	 */
	/**
	 * Dispatched when an error occurs during loading. I
	 *
	 * @eventType away.events.LoaderEvent
	 */
	/**
	 * Dispatched when an error occurs during parsing.
	 *
	 * @eventType away.events.ParserEvent
	 */
	/**
	 * Dispatched when an image asset dimensions are not a power of 2
	 *
	 * @eventType away.events.AssetEvent
	 */
	/**
	 * AssetLoader can load any file format that away.supports (or for which a third-party parser
	 * has been plugged in) and it's dependencies. Events are dispatched when assets are encountered
	 * and for when the resource (or it's dependencies) have been loaded.
	 *
	 * The AssetLoader will not make assets available in any other way than through the dispatched
	 * events. To store assets and make them available at any point from any module in an application,
	 * use the AssetLibrary to load and manage assets.
	 *
	 * @see away.library.AssetLibrary
	 */
	class AssetLoader extends EventDispatcher {
	    private _context;
	    private _token;
	    private _uri;
	    private _materialMode;
	    private _errorHandlers;
	    private _parseErrorHandlers;
	    private _stack;
	    private _baseDependency;
	    private _currentDependency;
	    private _namespace;
	    private _onReadyForDependenciesDelegate;
	    private _onParseCompleteDelegate;
	    private _onParseErrorDelegate;
	    private _onLoadCompleteDelegate;
	    private _onLoadErrorDelegate;
	    private _onTextureSizeErrorDelegate;
	    private _onAssetCompleteDelegate;
	    private static _parsers;
	    /**
	     * Enables a specific parser.
	     * When no specific parser is set for a loading/parsing opperation,
	     * loader3d can autoselect the correct parser to use.
	     * A parser must have been enabled, to be considered when autoselecting the parser.
	     *
	     * @param parser The parser class to enable.
	     *
	     * @see away.parsers.Parsers
	     */
	    static enableParser(parser: any): void;
	    /**
	     * Enables a list of parsers.
	     * When no specific parser is set for a loading/parsing opperation,
	     * AssetLoader can autoselect the correct parser to use.
	     * A parser must have been enabled, to be considered when autoselecting the parser.
	     *
	     * @param parsers A Vector of parser classes to enable.
	     * @see away.parsers.Parsers
	     */
	    static enableParsers(parsers: Object[]): void;
	    /**
	     * Returns the base dependency of the loader
	     */
	    baseDependency: ResourceDependency;
	    /**
	     * Create a new ResourceLoadSession object.
	     */
	    constructor(materialMode?: number);
	    /**
	     * Loads a file and (optionally) all of its dependencies.
	     *
	     * @param req The URLRequest object containing the URL of the file to be loaded.
	     * @param context An optional context object providing additional parameters for loading
	     * @param ns An optional namespace string under which the file is to be loaded, allowing the differentiation of two resources with identical assets
	     * @param parser An optional parser object for translating the loaded data into a usable resource. If not provided, AssetLoader will attempt to auto-detect the file type.
	     */
	    load(req: URLRequest, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     * Loads a resource from already loaded data.
	     *
	     * @param data The data object containing all resource information.
	     * @param context An optional context object providing additional parameters for loading
	     * @param ns An optional namespace string under which the file is to be loaded, allowing the differentiation of two resources with identical assets
	     * @param parser An optional parser object for translating the loaded data into a usable resource. If not provided, AssetLoader will attempt to auto-detect the file type.
	     */
	    loadData(data: any, id: string, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     * Recursively retrieves the next to-be-loaded and parsed dependency on the stack, or pops the list off the
	     * stack when complete and continues on the top set.
	     * @param parser The parser that will translate the data into a usable resource.
	     */
	    private retrieveNext(parser?);
	    /**
	     * Retrieves a single dependency.
	     * @param parser The parser that will translate the data into a usable resource.
	     */
	    private retrieveDependency(dependency);
	    private joinUrl(base, end);
	    private resolveDependencyUrl(dependency);
	    private retrieveParserDependencies();
	    private resolveParserDependencies();
	    /**
	     * Called when a single dependency loading failed, and pushes further dependencies onto the stack.
	     * @param event
	     */
	    private onLoadError(event);
	    /**
	     * Called when a dependency parsing failed, and dispatches a <code>ParserEvent.PARSE_ERROR</code>
	     * @param event
	     */
	    private onParseError(event);
	    private onAssetComplete(event);
	    private onReadyForDependencies(event);
	    /**
	     * Called when a single dependency was parsed, and pushes further dependencies onto the stack.
	     * @param event
	     */
	    private onLoadComplete(event);
	    /**
	     * Called when parsing is complete.
	     */
	    private onParseComplete(event);
	    /**
	     * Called when an image is too large or it's dimensions are not a power of 2
	     * @param event
	     */
	    private onTextureSizeError(event);
	    private addEventListeners(loader);
	    private removeEventListeners(loader);
	    stop(): void;
	    private dispose();
	    /**
	     * @private
	     * This method is used by other loader classes (e.g. Loader3D and AssetLibraryBundle) to
	     * add error event listeners to the AssetLoader instance. This system is used instead of
	     * the regular EventDispatcher system so that the AssetLibrary error handler can be sure
	     * that if hasEventListener() returns true, it's client code that's listening for the
	     * event. Secondly, functions added as error handler through this custom method are
	     * expected to return a boolean value indicating whether the event was handled (i.e.
	     * whether they in turn had any client code listening for the event.) If no handlers
	     * return true, the AssetLoader knows that the event wasn't handled and will throw an RTE.
	     */
	    _iAddParseErrorHandler(handler: any): void;
	    _iAddErrorHandler(handler: any): void;
	    /**
	     * Guesses the parser to be used based on the file contents.
	     * @param data The data to be parsed.
	     * @param uri The url or id of the object to be parsed.
	     * @return An instance of the guessed parser.
	     */
	    private getParserFromData(data);
	    /**
	     * Initiates parsing of the loaded dependency.
	     *
	     * @param The dependency to be parsed.
	     */
	    private parseDependency(dependency);
	    /**
	     * Guesses the parser to be used based on the file extension.
	     * @return An instance of the guessed parser.
	     */
	    private getParserFromSuffix(url);
	}
	export = AssetLoader;
	
}
declare module "awayjs-core/lib/library/ConflictPrecedence" {
	/**
	 * Enumaration class for precedence when resolving naming conflicts in the library.
	 *
	 * @see away.library.AssetLibrary.conflictPrecedence
	 * @see away.library.AssetLibrary.conflictStrategy
	 * @see away.library.naming.ConflictStrategy
	 */
	class ConflictPrecedence {
	    /**
	     * Signals that in a conflict, the previous owner of the conflicting name
	     * should be favored (and keep it's name) and that the newly renamed asset
	     * is reverted to a non-conflicting name.
	     */
	    static FAVOR_OLD: string;
	    /**
	     * Signales that in a conflict, the newly renamed asset is favored (and keeps
	     * it's newly defined name) and that the previous owner of that name gets
	     * renamed to a non-conflicting name.
	     */
	    static FAVOR_NEW: string;
	}
	export = ConflictPrecedence;
	
}
declare module "awayjs-core/lib/library/ConflictStrategyBase" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	/**
	 * Abstract base class for naming conflict resolution classes. Extend this to create a
	 * strategy class which the asset library can use to resolve asset naming conflicts, or
	 * use one of the bundled concrete strategy classes:
	 *
	 * <ul>
	 *   <li>IgnoreConflictStrategy (ConflictStrategy.IGNORE)</li>
	 *   <li>ErrorConflictStrategy (ConflictStrategy.THROW_ERROR)</li>
	 *   <li>NumSuffixConflictStrategy (ConflictStrategy.APPEND_NUM_SUFFIX)</li>
	 * </ul>
	 *
	 * @see away.library.AssetLibrary.conflictStrategy
	 * @see away.library.ConflictStrategy
	 * @see away.library.IgnoreConflictStrategy
	 * @see away.library.ErrorConflictStrategy
	 * @see away.library.NumSuffixConflictStrategy
	 */
	class ConflictStrategyBase {
	    constructor();
	    /**
	     * Resolve a naming conflict between two assets. Must be implemented by concrete strategy
	     * classes.
	     */
	    resolveConflict(changedAsset: IAsset, oldAsset: IAsset, assetsDictionary: Object, precedence: string): void;
	    /**
	     * Create instance of this conflict strategy. Used internally by the AssetLibrary to
	     * make sure the same strategy instance is not used in all AssetLibrary instances, which
	     * would break any state caching that happens inside the strategy class.
	     */
	    create(): ConflictStrategyBase;
	    /**
	     * Provided as a convenience method for all conflict strategy classes, as a way to finalize
	     * the conflict resolution by applying the new names and dispatching the correct events.
	     */
	    _pUpdateNames(ns: string, nonConflictingName: string, oldAsset: IAsset, newAsset: IAsset, assetsDictionary: Object, precedence: string): void;
	}
	export = ConflictStrategyBase;
	
}
declare module "awayjs-core/lib/library/ErrorConflictStrategy" {
	import ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	class ErrorConflictStrategy extends ConflictStrategyBase {
	    constructor();
	    resolveConflict(changedAsset: IAsset, oldAsset: IAsset, assetsDictionary: Object, precedence: string): void;
	    create(): ConflictStrategyBase;
	}
	export = ErrorConflictStrategy;
	
}
declare module "awayjs-core/lib/library/IgnoreConflictStrategy" {
	import ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	class IgnoreConflictStrategy extends ConflictStrategyBase {
	    constructor();
	    resolveConflict(changedAsset: IAsset, oldAsset: IAsset, assetsDictionary: Object, precedence: string): void;
	    create(): ConflictStrategyBase;
	}
	export = IgnoreConflictStrategy;
	
}
declare module "awayjs-core/lib/library/NumSuffixConflictStrategy" {
	import ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	class NumSuffixConflictStrategy extends ConflictStrategyBase {
	    private _separator;
	    private _next_suffix;
	    constructor(separator?: string);
	    resolveConflict(changedAsset: IAsset, oldAsset: IAsset, assetsDictionary: Object, precedence: string): void;
	    create(): ConflictStrategyBase;
	}
	export = NumSuffixConflictStrategy;
	
}
declare module "awayjs-core/lib/library/ConflictStrategy" {
	import ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
	/**
	 * Enumeration class for bundled conflict strategies. Set one of these values (or an
	 * instance of a self-defined sub-class of ConflictStrategyBase) to the conflictStrategy
	 * property on an AssetLibrary to define how that library resolves naming conflicts.
	 *
	 * The value of the <code>AssetLibrary.conflictPrecedence</code> property defines which
	 * of the conflicting assets will get to keep it's name, and which is renamed (if any.)
	 *
	 * @see away.library.AssetLibrary.conflictStrategy
	 * @see away.library.naming.ConflictStrategyBase
	 */
	class ConflictStrategy {
	    /**
	     * Specifies that in case of a naming conflict, one of the assets will be renamed and
	     * a numeric suffix appended to the base name.
	     */
	    static APPEND_NUM_SUFFIX: ConflictStrategyBase;
	    /**
	     * Specifies that naming conflicts should be ignored. This is not recommended in most
	     * cases, unless it can be 100% guaranteed that the application does not cause naming
	     * conflicts in the library (i.e. when an app-level system is in place to prevent this.)
	     */
	    static IGNORE: ConflictStrategyBase;
	    /**
	     * Specifies that an error should be thrown if a naming conflict is discovered. Use this
	     * to be 100% sure that naming conflicts never occur unnoticed, and when it's undesirable
	     * to have the library automatically rename assets to avoid such conflicts.
	     */
	    static THROW_ERROR: ConflictStrategyBase;
	    constructor(include?: ConflictStrategyBase);
	}
	export = ConflictStrategy;
	
}
declare module "awayjs-core/lib/library/AssetLibraryBundle" {
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import AssetLibraryIterator = require("awayjs-core/lib/library/AssetLibraryIterator");
	import AssetLoaderToken = require("awayjs-core/lib/library/AssetLoaderToken");
	import AssetLoaderContext = require("awayjs-core/lib/library/AssetLoaderContext");
	import ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	/**
	 * AssetLibraryBundle enforces a multiton pattern and is not intended to be instanced directly.
	 * Its purpose is to create a container for 3D data management, both before and after parsing.
	 * If you are interested in creating multiple library bundles, please use the <code>getInstance()</code> method.
	 */
	class AssetLibraryBundle extends EventDispatcher {
	    static _iInstances: Object;
	    private _loadingSessions;
	    private _strategy;
	    private _strategyPreference;
	    private _assets;
	    private _assetDictionary;
	    private _assetDictDirty;
	    private _loadingSessionsGarbage;
	    private _gcTimeoutIID;
	    private _onAssetRenameDelegate;
	    private _onAssetConflictResolvedDelegate;
	    private _onResourceCompleteDelegate;
	    private _onTextureSizeErrorDelegate;
	    private _onAssetCompleteDelegate;
	    private _onLoadErrorDelegate;
	    private _onParseErrorDelegate;
	    /**
	     * Creates a new <code>AssetLibraryBundle</code> object.
	     *
	     * @param me A multiton enforcer for the AssetLibraryBundle ensuring it cannnot be instanced.
	     */
	    constructor();
	    /**
	     * Returns an AssetLibraryBundle instance. If no key is given, returns the default bundle instance (which is
	     * similar to using the AssetLibraryBundle as a singleton.) To keep several separated library bundles,
	     * pass a string key to this method to define which bundle should be returned. This is
	     * referred to as using the AssetLibrary as a multiton.
	     *
	     * @param key Defines which multiton instance should be returned.
	     * @return An instance of the asset library
	     */
	    static getInstance(key?: string): AssetLibraryBundle;
	    /**
	     *
	     */
	    enableParser(parserClass: Object): void;
	    /**
	     *
	     */
	    enableParsers(parserClasses: Object[]): void;
	    /**
	     * Defines which strategy should be used for resolving naming conflicts, when two library
	     * assets are given the same name. By default, <code>ConflictStrategy.APPEND_NUM_SUFFIX</code>
	     * is used which means that a numeric suffix is appended to one of the assets. The
	     * <code>conflictPrecedence</code> property defines which of the two conflicting assets will
	     * be renamed.
	     *
	     * @see naming.ConflictStrategy
	     * @see AssetLibrary.conflictPrecedence
	     */
	    conflictStrategy: ConflictStrategyBase;
	    /**
	     * Defines which asset should have precedence when resolving a naming conflict between
	     * two assets of which one has just been renamed by the user or by a parser. By default
	     * <code>ConflictPrecedence.FAVOR_NEW</code> is used, meaning that the newly renamed
	     * asset will keep it's new name while the older asset gets renamed to not conflict.
	     *
	     * This property is ignored for conflict strategies that do not actually rename an
	     * asset automatically, such as ConflictStrategy.IGNORE and ConflictStrategy.THROW_ERROR.
	     *
	     * @see away.library.ConflictPrecedence
	     * @see away.library.ConflictStrategy
	     */
	    conflictPrecedence: string;
	    /**
	     * Create an AssetLibraryIterator instance that can be used to iterate over the assets
	     * in this asset library instance. The iterator can filter assets on asset type and/or
	     * namespace. A "null" filter value means no filter of that type is used.
	     *
	     * @param assetTypeFilter Asset type to filter on (from the AssetType enum class.) Use
	     * null to not filter on asset type.
	     * @param namespaceFilter Namespace to filter on. Use null to not filter on namespace.
	     * @param filterFunc Callback function to use when deciding whether an asset should be
	     * included in the iteration or not. This needs to be a function that takes a single
	     * parameter of type IAsset and returns a boolean where true means it should be included.
	     *
	     * @see away.library.AssetType
	     */
	    createIterator(assetTypeFilter?: string, namespaceFilter?: string, filterFunc?: any): AssetLibraryIterator;
	    /**
	     * Loads a file and (optionally) all of its dependencies.
	     *
	     * @param req The URLRequest object containing the URL of the file to be loaded.
	     * @param context An optional context object providing additional parameters for loading
	     * @param ns An optional namespace string under which the file is to be loaded, allowing the differentiation of two resources with identical assets
	     * @param parser An optional parser object for translating the loaded data into a usable resource. If not provided, AssetLoader will attempt to auto-detect the file type.
	     * @return A handle to the retrieved resource.
	     */
	    load(req: URLRequest, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     * Loads a resource from existing data in memory.
	     *
	     * @param data The data object containing all resource information.
	     * @param context An optional context object providing additional parameters for loading
	     * @param ns An optional namespace string under which the file is to be loaded, allowing the differentiation of two resources with identical assets
	     * @param parser An optional parser object for translating the loaded data into a usable resource. If not provided, AssetLoader will attempt to auto-detect the file type.
	     * @return A handle to the retrieved resource.
	     */
	    loadData(data: any, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     *
	     */
	    getAsset(name: string, ns?: string): IAsset;
	    /**
	     * Adds an asset to the asset library, first making sure that it's name is unique
	     * using the method defined by the <code>conflictStrategy</code> and
	     * <code>conflictPrecedence</code> properties.
	     */
	    addAsset(asset: IAsset): void;
	    /**
	     * Removes an asset from the library, and optionally disposes that asset by calling
	     * it's disposeAsset() method (which for most assets is implemented as a default
	     * version of that type's dispose() method.
	     *
	     * @param asset The asset which should be removed from this library.
	     * @param dispose Defines whether the assets should also be disposed.
	     */
	    removeAsset(asset: IAsset, dispose?: boolean): void;
	    /**
	     * Removes an asset which is specified using name and namespace.
	     *
	     * @param name The name of the asset to be removed.
	     * @param ns The namespace to which the desired asset belongs.
	     * @param dispose Defines whether the assets should also be disposed.
	     *
	     * @see away.library.AssetLibrary.removeAsset()
	     */
	    removeAssetByName(name: string, ns?: string, dispose?: boolean): IAsset;
	    /**
	     * Removes all assets from the asset library, optionally disposing them as they
	     * are removed.
	     *
	     * @param dispose Defines whether the assets should also be disposed.
	     */
	    removeAllAssets(dispose?: boolean): void;
	    /**
	     * Removes all assets belonging to a particular namespace (null for default)
	     * from the asset library, and optionall disposes them by calling their
	     * disposeAsset() method.
	     *
	     * @param ns The namespace from which all assets should be removed.
	     * @param dispose Defines whether the assets should also be disposed.
	     *
	     * @see away.library.AssetLibrary.removeAsset()
	     */
	    removeNamespaceAssets(ns?: string, dispose?: boolean): void;
	    private removeAssetFromDict(asset, autoRemoveEmptyNamespace?);
	    stopAllLoadingSessions(): void;
	    private rehashAssetDict();
	    /**
	     * Called when a an error occurs during loading.
	     */
	    private onLoadError(event);
	    /**
	     * Called when a an error occurs during parsing.
	     */
	    private onParseError(event);
	    private onAssetComplete(event);
	    private onTextureSizeError(event);
	    /**
	     * Called when the resource and all of its dependencies was retrieved.
	     */
	    private onResourceComplete(event);
	    private loadingSessionGC();
	    private killLoadingSession(loader);
	    /**
	     * Called when unespected error occurs
	     */
	    private onAssetRename(event);
	    private onAssetConflictResolved(event);
	}
	export = AssetLibraryBundle;
	
}
declare module "awayjs-core/lib/library/AssetLibrary" {
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import AssetLibraryBundle = require("awayjs-core/lib/library/AssetLibraryBundle");
	import AssetLibraryIterator = require("awayjs-core/lib/library/AssetLibraryIterator");
	import AssetLoaderContext = require("awayjs-core/lib/library/AssetLoaderContext");
	import AssetLoaderToken = require("awayjs-core/lib/library/AssetLoaderToken");
	import ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	/**
	 * AssetLibrary enforces a singleton pattern and is not intended to be instanced.
	 * It's purpose is to allow access to the default library bundle through a set of static shortcut methods.
	 * If you are interested in creating multiple library bundles, please use the <code>getBundle()</code> method.
	 */
	class AssetLibrary {
	    /**
	     * Creates a new <code>AssetLibrary</code> object.
	     *
	     */
	    constructor();
	    /**
	     * Returns an AssetLibrary bundle instance. If no key is given, returns the default bundle (which is
	     * similar to using the AssetLibraryBundle as a singleton). To keep several separated library bundles,
	     * pass a string key to this method to define which bundle should be returned. This is
	     * referred to as using the AssetLibraryBundle as a multiton.
	     *
	     * @param key Defines which multiton instance should be returned.
	     * @return An instance of the asset library
	     */
	    static getBundle(key?: string): AssetLibraryBundle;
	    /**
	     *
	     */
	    static enableParser(parserClass: any): void;
	    /**
	     *
	     */
	    static enableParsers(parserClasses: Object[]): void;
	    /**
	     * Short-hand for conflictStrategy property on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.conflictStrategy
	     */
	    static conflictStrategy: ConflictStrategyBase;
	    /**
	     * Short-hand for conflictPrecedence property on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.conflictPrecedence
	     */
	    static conflictPrecedence: string;
	    /**
	     * Short-hand for createIterator() method on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.createIterator()
	     */
	    static createIterator(assetTypeFilter?: string, namespaceFilter?: string, filterFunc?: any): AssetLibraryIterator;
	    /**
	     * Short-hand for load() method on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.load()
	     */
	    static load(req: URLRequest, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     * Short-hand for loadData() method on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.loadData()
	     */
	    static loadData(data: any, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    static stopLoad(): void;
	    /**
	     * Short-hand for getAsset() method on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.getAsset()
	     */
	    static getAsset(name: string, ns?: string): IAsset;
	    /**
	     * Short-hand for addEventListener() method on default asset library bundle.
	     */
	    static addEventListener(type: string, listener: Function): void;
	    /**
	     * Short-hand for removeEventListener() method on default asset library bundle.
	     */
	    static removeEventListener(type: string, listener: Function): void;
	    /**
	     * Short-hand for hasEventListener() method on default asset library bundle.
	
	     public static hasEventListener(type:string):boolean
	     {
	        return AssetLibrary.getBundle().hasEventListener(type);
	    }
	
	     public static willTrigger(type:string):boolean
	     {
	        return getBundle().willTrigger(type);
	    }
	     */
	    /**
	     * Short-hand for addAsset() method on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.addAsset()
	     */
	    static addAsset(asset: IAsset): void;
	    /**
	     * Short-hand for removeAsset() method on default asset library bundle.
	     *
	     * @param asset The asset which should be removed from the library.
	     * @param dispose Defines whether the assets should also be disposed.
	     *
	     * @see AssetLibraryBundle.removeAsset()
	     */
	    static removeAsset(asset: IAsset, dispose?: boolean): void;
	    /**
	     * Short-hand for removeAssetByName() method on default asset library bundle.
	     *
	     * @param name The name of the asset to be removed.
	     * @param ns The namespace to which the desired asset belongs.
	     * @param dispose Defines whether the assets should also be disposed.
	     *
	     * @see AssetLibraryBundle.removeAssetByName()
	     */
	    static removeAssetByName(name: string, ns?: string, dispose?: boolean): IAsset;
	    /**
	     * Short-hand for removeAllAssets() method on default asset library bundle.
	     *
	     * @param dispose Defines whether the assets should also be disposed.
	     *
	     * @see AssetLibraryBundle.removeAllAssets()
	     */
	    static removeAllAssets(dispose?: boolean): void;
	    /**
	     * Short-hand for removeNamespaceAssets() method on default asset library bundle.
	     *
	     * @see AssetLibraryBundle.removeNamespaceAssets()
	     */
	    static removeNamespaceAssets(ns?: string, dispose?: boolean): void;
	}
	export = AssetLibrary;
	
}
declare module "awayjs-core/lib/library/IDUtil" {
	class IDUtil {
	    /**
	     *  @private
	     *  Char codes for 0123456789ABCDEF
	     */
	    private static ALPHA_CHAR_CODES;
	    /**
	     *  Generates a UID (unique identifier) based on ActionScript's
	     *  pseudo-random number generator and the current time.
	     *
	     *  <p>The UID has the form
	     *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>
	     *  where X is a hexadecimal digit (0-9, A-F).</p>
	     *
	     *  <p>This UID will not be truly globally unique; but it is the best
	     *  we can do without player support for UID generation.</p>
	     *
	     *  @return The newly-generated UID.
	     *
	     *  @langversion 3.0
	     *  @playerversion Flash 9
	     *  @playerversion AIR 1.1
	     *  @productversion Flex 3
	     */
	    static createUID(): string;
	}
	export = IDUtil;
	
}
declare module "awayjs-core/lib/net/CrossDomainPolicy" {
	class CrossDomainPolicy {
	    static ANONYMOUS: string;
	    static USE_CREDENTIALS: string;
	}
	export = CrossDomainPolicy;
	
}
declare module "awayjs-core/lib/parsers/ParserDataFormat" {
	/**
	 * An enumeration providing values to describe the data format of parsed data.
	 */
	class ParserDataFormat {
	    /**
	     * Describes the format of a binary file.
	     */
	    static BINARY: string;
	    /**
	     * Describes the format of a plain text file.
	     */
	    static PLAIN_TEXT: string;
	    /**
	     * Describes the format of an image file
	     */
	    static IMAGE: string;
	}
	export = ParserDataFormat;
	
}
declare module "awayjs-core/lib/projections/CoordinateSystem" {
	/**
	 * Provides constant values for camera lens projection options use the the <code>coordinateSystem</code> property
	 *
	 * @see away.projections.PerspectiveLens#coordinateSystem
	 */
	class CoordinateSystem {
	    /**
	     * Default option, projects to a left-handed coordinate system
	     */
	    static LEFT_HANDED: string;
	    /**
	     * Projects to a right-handed coordinate system
	     */
	    static RIGHT_HANDED: string;
	}
	export = CoordinateSystem;
	
}
declare module "awayjs-core/lib/projections/ProjectionBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import IProjection = require("awayjs-core/lib/projections/IProjection");
	class ProjectionBase extends EventDispatcher implements IProjection {
	    _pMatrix: Matrix3D;
	    _pScissorRect: Rectangle;
	    _pViewPort: Rectangle;
	    _pNear: number;
	    _pFar: number;
	    _pAspectRatio: number;
	    _pMatrixInvalid: boolean;
	    _pFrustumCorners: number[];
	    _pCoordinateSystem: string;
	    _pOriginX: number;
	    _pOriginY: number;
	    private _unprojection;
	    private _unprojectionInvalid;
	    constructor(coordinateSystem?: string);
	    /**
	     * The handedness of the coordinate system projection. The default is LEFT_HANDED.
	     */
	    coordinateSystem: string;
	    frustumCorners: number[];
	    matrix: Matrix3D;
	    near: number;
	    originX: number;
	    originY: number;
	    far: number;
	    project(point3d: Vector3D): Vector3D;
	    unprojectionMatrix: Matrix3D;
	    unproject(nX: number, nY: number, sZ: number): Vector3D;
	    clone(): ProjectionBase;
	    _iAspectRatio: number;
	    pInvalidateMatrix(): void;
	    pUpdateMatrix(): void;
	    _iUpdateScissorRect(x: number, y: number, width: number, height: number): void;
	    _iUpdateViewport(x: number, y: number, width: number, height: number): void;
	}
	export = ProjectionBase;
	
}
declare module "awayjs-core/lib/projections/PerspectiveProjection" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import ProjectionBase = require("awayjs-core/lib/projections/ProjectionBase");
	class PerspectiveProjection extends ProjectionBase {
	    private _fieldOfView;
	    private _focalLength;
	    private _hFieldOfView;
	    private _hFocalLength;
	    private _preserveAspectRatio;
	    private _preserveFocalLength;
	    constructor(fieldOfView?: number, coordinateSystem?: string);
	    /**
	     *
	     */
	    preserveAspectRatio: boolean;
	    /**
	     *
	     */
	    preserveFocalLength: boolean;
	    /**
	     *
	     */
	    fieldOfView: number;
	    /**
	     *
	     */
	    focalLength: number;
	    /**
	     *
	     */
	    hFieldOfView: number;
	    /**
	     *
	     */
	    hFocalLength: number;
	    unproject(nX: number, nY: number, sZ: number): Vector3D;
	    clone(): ProjectionBase;
	    pUpdateMatrix(): void;
	}
	export = PerspectiveProjection;
	
}
declare module "awayjs-core/lib/projections/FreeMatrixProjection" {
	import ProjectionBase = require("awayjs-core/lib/projections/ProjectionBase");
	class FreeMatrixProjection extends ProjectionBase {
	    constructor();
	    near: number;
	    far: number;
	    iAspectRatio: number;
	    clone(): ProjectionBase;
	    pUpdateMatrix(): void;
	}
	export = FreeMatrixProjection;
	
}
declare module "awayjs-core/lib/projections/ObliqueNearPlaneProjection" {
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import IProjection = require("awayjs-core/lib/projections/IProjection");
	import ProjectionBase = require("awayjs-core/lib/projections/ProjectionBase");
	class ObliqueNearPlaneProjection extends ProjectionBase {
	    private _baseProjection;
	    private _plane;
	    private _onProjectionMatrixChangedDelegate;
	    constructor(baseProjection: IProjection, plane: Plane3D);
	    frustumCorners: number[];
	    near: number;
	    far: number;
	    iAspectRatio: number;
	    plane: Plane3D;
	    baseProjection: IProjection;
	    private onProjectionMatrixChanged(event);
	    pUpdateMatrix(): void;
	}
	export = ObliqueNearPlaneProjection;
	
}
declare module "awayjs-core/lib/projections/OrthographicOffCenterProjection" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import ProjectionBase = require("awayjs-core/lib/projections/ProjectionBase");
	class OrthographicOffCenterProjection extends ProjectionBase {
	    private _minX;
	    private _maxX;
	    private _minY;
	    private _maxY;
	    constructor(minX: number, maxX: number, minY: number, maxY: number);
	    minX: number;
	    maxX: number;
	    minY: number;
	    maxY: number;
	    unproject(nX: number, nY: number, sZ: number): Vector3D;
	    clone(): ProjectionBase;
	    pUpdateMatrix(): void;
	}
	export = OrthographicOffCenterProjection;
	
}
declare module "awayjs-core/lib/projections/OrthographicProjection" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import ProjectionBase = require("awayjs-core/lib/projections/ProjectionBase");
	class OrthographicProjection extends ProjectionBase {
	    private _projectionHeight;
	    private _xMax;
	    private _yMax;
	    constructor(projectionHeight?: number);
	    projectionHeight: number;
	    unproject(nX: number, nY: number, sZ: number): Vector3D;
	    clone(): ProjectionBase;
	    pUpdateMatrix(): void;
	}
	export = OrthographicProjection;
	
}
declare module "awayjs-core/lib/textures/BitmapCubeTexture" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	class BitmapCubeTexture extends CubeTextureBase {
	    private _bitmapDatas;
	    /**
	     * The texture on the cube's right face.
	     */
	    positiveX: BitmapData;
	    /**
	     * The texture on the cube's left face.
	     */
	    negativeX: BitmapData;
	    /**
	     * The texture on the cube's top face.
	     */
	    positiveY: BitmapData;
	    /**
	     * The texture on the cube's bottom face.
	     */
	    negativeY: BitmapData;
	    /**
	     * The texture on the cube's far face.
	     */
	    positiveZ: BitmapData;
	    /**
	     * The texture on the cube's near face.
	     */
	    negativeZ: BitmapData;
	    constructor(posX: BitmapData, negX: BitmapData, posY: BitmapData, negY: BitmapData, posZ: BitmapData, negZ: BitmapData, generateMipmaps?: boolean);
	    /**
	     *
	     * @param value
	     * @private
	     */
	    private _testSize(value);
	    dispose(): void;
	    _iGetTextureData(side: number): BitmapData;
	}
	export = BitmapCubeTexture;
	
}
declare module "awayjs-core/lib/textures/BitmapTexture" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	class BitmapTexture extends Texture2DBase {
	    _bitmapData: BitmapData;
	    /**
	     *
	     * @returns {BitmapData}
	     */
	    bitmapData: BitmapData;
	    constructor(bitmapData: BitmapData, generateMipmaps?: boolean);
	    dispose(): void;
	    _iGetTextureData(): BitmapData;
	}
	export = BitmapTexture;
	
}
declare module "awayjs-core/lib/textures/RenderTexture" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	class RenderTexture extends Texture2DBase {
	    /**
	     *
	     * @returns {number}
	     */
	    width: number;
	    /**
	     *
	     * @returns {number}
	     */
	    height: number;
	    constructor(width: number, height: number);
	}
	export = RenderTexture;
	
}
declare module "awayjs-core/lib/textures/SpecularBitmapTexture" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
	/**
	 * A convenience texture that encodes a specular map in the red channel, and the gloss map in the green channel, as expected by BasicSpecularMapMethod
	 */
	class SpecularBitmapTexture extends BitmapTexture {
	    private _specularMap;
	    private _glossMap;
	    constructor(specularMap?: BitmapData, glossMap?: BitmapData, generateMipmaps?: boolean);
	    specularMap: BitmapData;
	    glossMap: BitmapData;
	    private _testSize();
	    _iGetTextureData(): BitmapData;
	}
	export = SpecularBitmapTexture;
	
}
declare module "awayjs-core/lib/ui/Keyboard" {
	class Keyboard {
	    /**
	     * Constant associated with the key code value for the A key (65).
	     */
	    static A: number;
	    /**
	     * Constant associated with the key code value for the Alternate (Option) key  (18).
	     */
	    static ALTERNATE: number;
	    /**
	     * Select the audio mode
	     */
	    static AUDIO: number;
	    /**
	     * Constant associated with the key code value for the B key (66).
	     */
	    static B: number;
	    /**
	     * Return to previous page in application
	     */
	    static BACK: number;
	    /**
	     * Constant associated with the key code value for the ` key (192).
	     */
	    static BACKQUOTE: number;
	    /**
	     * Constant associated with the key code value for the \ key (220).
	     */
	    static BACKSLASH: number;
	    /**
	     * Constant associated with the key code value for the Backspace key (8).
	     */
	    static BACKSPACE: number;
	    /**
	     * Blue function key button
	     */
	    static BLUE: number;
	    /**
	     * Constant associated with the key code value for the C key (67).
	     */
	    static C: number;
	    /**
	     * Constant associated with the key code value for the Caps Lock key (20).
	     */
	    static CAPS_LOCK: number;
	    /**
	     * Channel down
	     */
	    static CHANNEL_DOWN: number;
	    /**
	     * Channel up
	     */
	    static CHANNEL_UP: number;
	    /**
	     * Constant associated with the key code value for the , key (188).
	     */
	    static COMMA: number;
	    /**
	     * Constant associated with the Mac command key (15). This constant is
	     * currently only used for setting menu key equivalents.
	     */
	    static COMMAND: number;
	    /**
	     * Constant associated with the key code value for the Control key (17).
	     */
	    static CONTROL: number;
	    /**
	     * An array containing all the defined key name constants.
	     */
	    static CharCodeStrings: any[];
	    /**
	     * Constant associated with the key code value for the D key (68).
	     */
	    static D: number;
	    /**
	     * Constant associated with the key code value for the Delete key (46).
	     */
	    static DELETE: number;
	    /**
	     * Constant associated with the key code value for the Down Arrow key (40).
	     */
	    static DOWN: number;
	    /**
	     * Engage DVR application mode
	     */
	    static DVR: number;
	    /**
	     * Constant associated with the key code value for the E key (69).
	     */
	    static E: number;
	    /**
	     * Constant associated with the key code value for the End key (35).
	     */
	    static END: number;
	    /**
	     * Constant associated with the key code value for the Enter key (13).
	     */
	    static ENTER: number;
	    /**
	     * Constant associated with the key code value for the = key (187).
	     */
	    static EQUAL: number;
	    /**
	     * Constant associated with the key code value for the Escape key (27).
	     */
	    static ESCAPE: number;
	    /**
	     * Exits current application mode
	     */
	    static EXIT: number;
	    /**
	     * Constant associated with the key code value for the F key (70).
	     */
	    static F: number;
	    /**
	     * Constant associated with the key code value for the F1 key (112).
	     */
	    static F1: number;
	    /**
	     * Constant associated with the key code value for the F10 key (121).
	     */
	    static F10: number;
	    /**
	     * Constant associated with the key code value for the F11 key (122).
	     */
	    static F11: number;
	    /**
	     * Constant associated with the key code value for the F12 key (123).
	     */
	    static F12: number;
	    /**
	     * Constant associated with the key code value for the F13 key (124).
	     */
	    static F13: number;
	    /**
	     * Constant associated with the key code value for the F14 key (125).
	     */
	    static F14: number;
	    /**
	     * Constant associated with the key code value for the F15 key (126).
	     */
	    static F15: number;
	    /**
	     * Constant associated with the key code value for the F2 key (113).
	     */
	    static F2: number;
	    /**
	     * Constant associated with the key code value for the F3 key (114).
	     */
	    static F3: number;
	    /**
	     * Constant associated with the key code value for the F4 key (115).
	     */
	    static F4: number;
	    /**
	     * Constant associated with the key code value for the F5 key (116).
	     */
	    static F5: number;
	    /**
	     * Constant associated with the key code value for the F6 key (117).
	     */
	    static F6: number;
	    /**
	     * Constant associated with the key code value for the F7 key (118).
	     */
	    static F7: number;
	    /**
	     * Constant associated with the key code value for the F8 key (119).
	     */
	    static F8: number;
	    /**
	     * Constant associated with the key code value for the F9 key (120).
	     */
	    static F9: number;
	    /**
	     * Engage fast-forward transport mode
	     */
	    static FAST_FORWARD: number;
	    /**
	     * Constant associated with the key code value for the G key (71).
	     */
	    static G: number;
	    /**
	     * Green function key button
	     */
	    static GREEN: number;
	    /**
	     * Engage program guide
	     */
	    static GUIDE: number;
	    /**
	     * Constant associated with the key code value for the H key (72).
	     */
	    static H: number;
	    /**
	     * Engage help application or context-sensitive help
	     */
	    static HELP: number;
	    /**
	     * Constant associated with the key code value for the Home key (36).
	     */
	    static HOME: number;
	    /**
	     * Constant associated with the key code value for the I key (73).
	     */
	    static I: number;
	    /**
	     * Info button
	     */
	    static INFO: number;
	    /**
	     * Cycle input
	     */
	    static INPUT: number;
	    /**
	     * Constant associated with the key code value for the Insert key (45).
	     */
	    static INSERT: number;
	    /**
	     * Constant associated with the key code value for the J key (74).
	     */
	    static J: number;
	    /**
	     * Constant associated with the key code value for the K key (75).
	     */
	    static K: number;
	    /**
	     * The Begin key
	     */
	    static KEYNAME_BEGIN: string;
	    /**
	     * The Break key
	     */
	    static KEYNAME_BREAK: string;
	    /**
	     * The Clear Display key
	     */
	    static KEYNAME_CLEARDISPLAY: string;
	    /**
	     * The Clear Line key
	     */
	    static KEYNAME_CLEARLINE: string;
	    /**
	     * The Delete key
	     */
	    static KEYNAME_DELETE: string;
	    /**
	     * The Delete Character key
	     */
	    static KEYNAME_DELETECHAR: string;
	    /**
	     * The Delete Line key
	     */
	    static KEYNAME_DELETELINE: string;
	    /**
	     * The down arrow
	     */
	    static KEYNAME_DOWNARROW: string;
	    /**
	     * The End key
	     */
	    static KEYNAME_END: string;
	    /**
	     * The Execute key
	     */
	    static KEYNAME_EXECUTE: string;
	    /**
	     * The F1 key
	     */
	    static KEYNAME_F1: string;
	    /**
	     * The F10 key
	     */
	    static KEYNAME_F10: string;
	    /**
	     * The F11 key
	     */
	    static KEYNAME_F11: string;
	    /**
	     * The F12 key
	     */
	    static KEYNAME_F12: string;
	    /**
	     * The F13 key
	     */
	    static KEYNAME_F13: string;
	    /**
	     * The F14 key
	     */
	    static KEYNAME_F14: string;
	    /**
	     * The F15 key
	     */
	    static KEYNAME_F15: string;
	    /**
	     * The F16 key
	     */
	    static KEYNAME_F16: string;
	    /**
	     * The F17 key
	     */
	    static KEYNAME_F17: string;
	    /**
	     * The F18 key
	     */
	    static KEYNAME_F18: string;
	    /**
	     * The F19 key
	     */
	    static KEYNAME_F19: string;
	    /**
	     * The F2 key
	     */
	    static KEYNAME_F2: string;
	    /**
	     * The F20 key
	     */
	    static KEYNAME_F20: string;
	    /**
	     * The F21 key
	     */
	    static KEYNAME_F21: string;
	    /**
	     * The F22 key
	     */
	    static KEYNAME_F22: string;
	    /**
	     * The F23 key
	     */
	    static KEYNAME_F23: string;
	    /**
	     * The F24 key
	     */
	    static KEYNAME_F24: string;
	    /**
	     * The F25 key
	     */
	    static KEYNAME_F25: string;
	    /**
	     * The F26 key
	     */
	    static KEYNAME_F26: string;
	    /**
	     * The F27 key
	     */
	    static KEYNAME_F27: string;
	    /**
	     * The F28 key
	     */
	    static KEYNAME_F28: string;
	    /**
	     * The F29 key
	     */
	    static KEYNAME_F29: string;
	    /**
	     * The F3 key
	     */
	    static KEYNAME_F3: string;
	    /**
	     * The F30 key
	     */
	    static KEYNAME_F30: string;
	    /**
	     * The F31 key
	     */
	    static KEYNAME_F31: string;
	    /**
	     * The F32 key
	     */
	    static KEYNAME_F32: string;
	    /**
	     * The F33 key
	     */
	    static KEYNAME_F33: string;
	    /**
	     * The F34 key
	     */
	    static KEYNAME_F34: string;
	    /**
	     * The F35 key
	     */
	    static KEYNAME_F35: string;
	    /**
	     * The F4 key
	     */
	    static KEYNAME_F4: string;
	    /**
	     * The F5 key
	     */
	    static KEYNAME_F5: string;
	    /**
	     * The F6 key
	     */
	    static KEYNAME_F6: string;
	    /**
	     * The F7 key
	     */
	    static KEYNAME_F7: string;
	    /**
	     * The F8 key
	     */
	    static KEYNAME_F8: string;
	    /**
	     * The F9 key
	     */
	    static KEYNAME_F9: string;
	    /**
	     * The Find key
	     */
	    static KEYNAME_FIND: string;
	    /**
	     * The Help key
	     */
	    static KEYNAME_HELP: string;
	    /**
	     * The Home key
	     */
	    static KEYNAME_HOME: string;
	    /**
	     * The Insert key
	     */
	    static KEYNAME_INSERT: string;
	    /**
	     * The Insert Character key
	     */
	    static KEYNAME_INSERTCHAR: string;
	    /**
	     * The Insert Line key
	     */
	    static KEYNAME_INSERTLINE: string;
	    /**
	     * The left arrow
	     */
	    static KEYNAME_LEFTARROW: string;
	    /**
	     * The Menu key
	     */
	    static KEYNAME_MENU: string;
	    /**
	     * The Mode Switch key
	     */
	    static KEYNAME_MODESWITCH: string;
	    /**
	     * The Next key
	     */
	    static KEYNAME_NEXT: string;
	    /**
	     * The Page Down key
	     */
	    static KEYNAME_PAGEDOWN: string;
	    /**
	     * The Page Up key
	     */
	    static KEYNAME_PAGEUP: string;
	    /**
	     * The Pause key
	     */
	    static KEYNAME_PAUSE: string;
	    /**
	     * The Previous key
	     */
	    static KEYNAME_PREV: string;
	    /**
	     * The PRINT key
	     */
	    static KEYNAME_PRINT: string;
	    /**
	     * The PRINT Screen
	     */
	    static KEYNAME_PRINTSCREEN: string;
	    /**
	     * The Redo key
	     */
	    static KEYNAME_REDO: string;
	    /**
	     * The Reset key
	     */
	    static KEYNAME_RESET: string;
	    /**
	     * The right arrow
	     */
	    static KEYNAME_RIGHTARROW: string;
	    /**
	     * The Scroll Lock key
	     */
	    static KEYNAME_SCROLLLOCK: string;
	    /**
	     * The Select key
	     */
	    static KEYNAME_SELECT: string;
	    /**
	     * The Stop key
	     */
	    static KEYNAME_STOP: string;
	    /**
	     * The System Request key
	     */
	    static KEYNAME_SYSREQ: string;
	    /**
	     * The System key
	     */
	    static KEYNAME_SYSTEM: string;
	    /**
	     * The Undo key
	     */
	    static KEYNAME_UNDO: string;
	    /**
	     * The up arrow
	     */
	    static KEYNAME_UPARROW: string;
	    /**
	     * The User key
	     */
	    static KEYNAME_USER: string;
	    /**
	     * Constant associated with the key code value for the L key (76).
	     */
	    static L: number;
	    /**
	     * Watch last channel or show watched
	     */
	    static LAST: number;
	    /**
	     * Constant associated with the key code value for the Left Arrow key (37).
	     */
	    static LEFT: number;
	    /**
	     * Constant associated with the key code value for the [ key (219).
	     */
	    static LEFTBRACKET: number;
	    /**
	     * Return to live [position in broadcast]
	     */
	    static LIVE: number;
	    /**
	     * Constant associated with the key code value for the M key (77).
	     */
	    static M: number;
	    /**
	     * Engage "Master Shell" e.g. TiVo or other vendor button
	     */
	    static MASTER_SHELL: number;
	    /**
	     * Engage menu
	     */
	    static MENU: number;
	    /**
	     * Constant associated with the key code value for the - key (189).
	     */
	    static MINUS: number;
	    /**
	     * Constant associated with the key code value for the N key (78).
	     */
	    static N: number;
	    /**
	     * Skip to next track or chapter
	     */
	    static NEXT: number;
	    /**
	     * Constant associated with the key code value for the 0 key (48).
	     */
	    static NUMBER_0: number;
	    /**
	     * Constant associated with the key code value for the 1 key (49).
	     */
	    static NUMBER_1: number;
	    /**
	     * Constant associated with the key code value for the 2 key (50).
	     */
	    static NUMBER_2: number;
	    /**
	     * Constant associated with the key code value for the 3 key (51).
	     */
	    static NUMBER_3: number;
	    /**
	     * Constant associated with the key code value for the 4 key (52).
	     */
	    static NUMBER_4: number;
	    /**
	     * Constant associated with the key code value for the 5 key (53).
	     */
	    static NUMBER_5: number;
	    /**
	     * Constant associated with the key code value for the 6 key (54).
	     */
	    static NUMBER_6: number;
	    /**
	     * Constant associated with the key code value for the 7 key (55).
	     */
	    static NUMBER_7: number;
	    /**
	     * Constant associated with the key code value for the 8 key (56).
	     */
	    static NUMBER_8: number;
	    /**
	     * Constant associated with the key code value for the 9 key (57).
	     */
	    static NUMBER_9: number;
	    /**
	     * Constant associated with the pseudo-key code for the the number pad (21). Use to set numpad modifier on key equivalents
	     */
	    static NUMPAD: number;
	    /**
	     * Constant associated with the key code value for the number 0 key on the number pad (96).
	     */
	    static NUMPAD_0: number;
	    /**
	     * Constant associated with the key code value for the number 1 key on the number pad (97).
	     */
	    static NUMPAD_1: number;
	    /**
	     * Constant associated with the key code value for the number 2 key on the number pad (98).
	     */
	    static NUMPAD_2: number;
	    /**
	     * Constant associated with the key code value for the number 3 key on the number pad (99).
	     */
	    static NUMPAD_3: number;
	    /**
	     * Constant associated with the key code value for the number 4 key on the number pad (100).
	     */
	    static NUMPAD_4: number;
	    /**
	     * Constant associated with the key code value for the number 5 key on the number pad (101).
	     */
	    static NUMPAD_5: number;
	    /**
	     * Constant associated with the key code value for the number 6 key on the number pad (102).
	     */
	    static NUMPAD_6: number;
	    /**
	     * Constant associated with the key code value for the number 7 key on the number pad (103).
	     */
	    static NUMPAD_7: number;
	    /**
	     * Constant associated with the key code value for the number 8 key on the number pad (104).
	     */
	    static NUMPAD_8: number;
	    /**
	     * Constant associated with the key code value for the number 9 key on the number pad (105).
	     */
	    static NUMPAD_9: number;
	    /**
	     * Constant associated with the key code value for the addition key on the number pad (107).
	     */
	    static NUMPAD_ADD: number;
	    /**
	     * Constant associated with the key code value for the decimal key on the number pad (110).
	     */
	    static NUMPAD_DECIMAL: number;
	    /**
	     * Constant associated with the key code value for the division key on the number pad (111).
	     */
	    static NUMPAD_DIVIDE: number;
	    /**
	     * Constant associated with the key code value for the Enter key on the number pad (108).
	     */
	    static NUMPAD_ENTER: number;
	    /**
	     * Constant associated with the key code value for the multiplication key on the number pad (106).
	     */
	    static NUMPAD_MULTIPLY: number;
	    /**
	     * Constant associated with the key code value for the subtraction key on the number pad (109).
	     */
	    static NUMPAD_SUBTRACT: number;
	    /**
	     * Constant associated with the key code value for the O key (79).
	     */
	    static O: number;
	    /**
	     * Constant associated with the key code value for the P key (80).
	     */
	    static P: number;
	    /**
	     * Constant associated with the key code value for the Page Down key (34).
	     */
	    static PAGE_DOWN: number;
	    /**
	     * Constant associated with the key code value for the Page Up key (33).
	     */
	    static PAGE_UP: number;
	    /**
	     * Engage pause transport mode
	     */
	    static PAUSE: number;
	    /**
	     * Constant associated with the key code value for the . key (190).
	     */
	    static PERIOD: number;
	    /**
	     * Engage play transport mode
	     */
	    static PLAY: number;
	    /**
	     * Skip to previous track or chapter
	     */
	    static PREVIOUS: number;
	    /**
	     * Constant associated with the key code value for the Q key (81).
	     */
	    static Q: number;
	    /**
	     * Constant associated with the key code value for the ' key (222).
	     */
	    static QUOTE: number;
	    /**
	     * Constant associated with the key code value for the R key (82).
	     */
	    static R: number;
	    /**
	     * Record item or engage record transport mode
	     */
	    static RECORD: number;
	    /**
	     * Red function key button
	     */
	    static RED: number;
	    /**
	     * Engage rewind transport mode
	     */
	    static REWIND: number;
	    /**
	     * Constant associated with the key code value for the Right Arrow key (39).
	     */
	    static RIGHT: number;
	    /**
	     * Constant associated with the key code value for the ] key (221).
	     */
	    static RIGHTBRACKET: number;
	    /**
	     * Constant associated with the key code value for the S key (83).
	     */
	    static S: number;
	    /**
	     * Search button
	     */
	    static SEARCH: number;
	    /**
	     * Constant associated with the key code value for the ; key (186).
	     */
	    static SEMICOLON: number;
	    /**
	     * Engage setup application or menu
	     */
	    static SETUP: number;
	    /**
	     * Constant associated with the key code value for the Shift key (16).
	     */
	    static SHIFT: number;
	    /**
	     * Quick skip backward (usually 7-10 seconds)
	     */
	    static SKIP_BACKWARD: number;
	    /**
	     * Quick skip ahead (usually 30 seconds)
	     */
	    static SKIP_FORWARD: number;
	    /**
	     * Constant associated with the key code value for the / key (191).
	     */
	    static SLASH: number;
	    /**
	     * Constant associated with the key code value for the Spacebar (32).
	     */
	    static SPACE: number;
	    /**
	     * Engage stop transport mode
	     */
	    static STOP: number;
	    /**
	     * Toggle subtitles
	     */
	    static SUBTITLE: number;
	    /**
	     * Constant associated with the key code value for the T key (84).
	     */
	    static T: number;
	    /**
	     * Constant associated with the key code value for the Tab key (9).
	     */
	    static TAB: number;
	    /**
	     * Constant associated with the key code value for the U key (85).
	     */
	    static U: number;
	    /**
	     * Constant associated with the key code value for the Up Arrow key (38).
	     */
	    static UP: number;
	    /**
	     * Constant associated with the key code value for the V key (86).
	     */
	    static V: number;
	    /**
	     * Engage video-on-demand
	     */
	    static VOD: number;
	    /**
	     * Constant associated with the key code value for the W key (87).
	     */
	    static W: number;
	    /**
	     * Constant associated with the key code value for the X key (88).
	     */
	    static X: number;
	    /**
	     * Constant associated with the key code value for the Y key (89).
	     */
	    static Y: number;
	    /**
	     * Yellow function key button
	     */
	    static YELLOW: number;
	    /**
	     * Constant associated with the key code value for the Z key (90).
	     */
	    static Z: number;
	}
	export = Keyboard;
	
}
declare module "awayjs-core/lib/utils/ByteArrayBuffer" {
	import ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");
	class ByteArrayBuffer extends ByteArrayBase {
	    _bytes: number[];
	    constructor();
	    writeByte(b: number): void;
	    readByte(): number;
	    writeUnsignedByte(b: number): void;
	    readUnsignedByte(): number;
	    writeUnsignedShort(b: number): void;
	    readUnsignedShort(): number;
	    writeUnsignedInt(b: number): void;
	    readUnsignedInt(): number;
	    writeFloat(b: number): void;
	    toFloatBits(x: number): number;
	    readFloat(b: number): number;
	    fromFloatBits(x: number): number;
	}
	export = ByteArrayBuffer;
	
}
declare module "awayjs-core/lib/utils/CSS" {
	class CSS {
	    static setElementSize(element: HTMLElement, width: number, height: number): void;
	    static setElementWidth(element: HTMLElement, width: number): void;
	    static setElementHeight(element: HTMLElement, height: number): void;
	    static setElementX(element: HTMLElement, x: number): void;
	    static setElementY(element: HTMLElement, y: number): void;
	    static getElementVisibility(element: HTMLElement): boolean;
	    static setElementVisibility(element: HTMLElement, visible: boolean): void;
	    static setElementAlpha(element: HTMLElement, alpha: number): void;
	    static setElementPosition(element: HTMLElement, x: number, y: number, absolute?: boolean): void;
	}
	export = CSS;
	
}
declare module "awayjs-core/lib/utils/Debug" {
	/**
	 *
	 */
	class Debug {
	    static THROW_ERRORS: boolean;
	    static ENABLE_LOG: boolean;
	    static LOG_PI_ERRORS: boolean;
	    private static keyword;
	    static breakpoint(): void;
	    static throwPIROnKeyWordOnly(str: string, enable?: boolean): void;
	    static throwPIR(clss: string, fnc: string, msg: string): void;
	    private static logPIR(clss, fnc, msg?);
	    static log(...args: any[]): void;
	}
	export = Debug;
	
}
declare module "awayjs-core/lib/utils/RequestAnimationFrame" {
	class RequestAnimationFrame {
	    private _callback;
	    private _callbackContext;
	    private _active;
	    private _rafUpdateFunction;
	    private _prevTime;
	    private _dt;
	    private _currentTime;
	    private _argsArray;
	    private _getTimer;
	    constructor(callback: Function, callbackContext: Object);
	    /**
	     *
	     * @param callback
	     * @param callbackContext
	     */
	    setCallback(callback: Function, callbackContext: Object): void;
	    /**
	     *
	     */
	    start(): void;
	    /**
	     *
	     */
	    stop(): void;
	    /**
	     *
	     * @returns {boolean}
	     */
	    active: boolean;
	    /**
	     *
	     * @private
	     */
	    private _tick();
	}
	export = RequestAnimationFrame;
	
}
declare module "awayjs-display/lib/animators/nodes/AnimationNodeBase" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	/**
	 * Provides an abstract base class for nodes in an animation blend tree.
	 */
	class AnimationNodeBase extends NamedAssetBase implements IAsset {
	    _pStateClass: any;
	    stateClass: any;
	    /**
	     * Creates a new <code>AnimationNodeBase</code> object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	}
	export = AnimationNodeBase;
	
}
declare module "awayjs-display/lib/animators/IAnimationSet" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	/**
	 * Provides an interface for data set classes that hold animation data for use in animator classes.
	 *
	 * @see away.animators.AnimatorBase
	 */
	interface IAnimationSet extends IAsset {
	    /**
	     * Check to determine whether a state is registered in the animation set under the given name.
	     *
	     * @param stateName The name of the animation state object to be checked.
	     */
	    hasAnimation(name: string): boolean;
	    /**
	     * Retrieves the animation state object registered in the animation data set under the given name.
	     *
	     * @param stateName The name of the animation state object to be retrieved.
	     */
	    getAnimation(name: string): AnimationNodeBase;
	    /**
	     * Indicates whether the properties of the animation data contained within the set combined with
	     * the vertex registers aslready in use on shading materials allows the animation data to utilise
	     * GPU calls.
	     */
	    usesCPU: boolean;
	    /**
	     * Called by the material to reset the GPU indicator before testing whether register space in the shader
	     * is available for running GPU-based animation code.
	     *
	     * @private
	     */
	    resetGPUCompatibility(): any;
	    /**
	     * Called by the animator to void the GPU indicator when register space in the shader
	     * is no longer available for running GPU-based animation code.
	     *
	     * @private
	     */
	    cancelGPUCompatibility(): any;
	}
	export = IAnimationSet;
	
}
declare module "awayjs-display/lib/events/GeometryEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	/**
	* Dispatched to notify changes in a geometry object's state.
	*
	* @class away.events.GeometryEvent
	* @see away3d.core.base.Geometry
	*/
	class GeometryEvent extends Event {
	    /**
	     * Dispatched when a TriangleSubGeometry was added to the dispatching Geometry.
	     */
	    static SUB_GEOMETRY_ADDED: string;
	    /**
	     * Dispatched when a TriangleSubGeometry was removed from the dispatching Geometry.
	     */
	    static SUB_GEOMETRY_REMOVED: string;
	    static BOUNDS_INVALID: string;
	    private _subGeometry;
	    /**
	     * Create a new GeometryEvent
	     * @param type The event type.
	     * @param subGeometry An optional TriangleSubGeometry object that is the subject of this event.
	     */
	    constructor(type: string, subGeometry?: SubGeometryBase);
	    /**
	     * The TriangleSubGeometry object that is the subject of this event, if appropriate.
	     */
	    subGeometry: SubGeometryBase;
	    /**
	     * Clones the event.
	     * @return An exact duplicate of the current object.
	     */
	    clone(): Event;
	}
	export = GeometryEvent;
	
}
declare module "awayjs-display/lib/base/Geometry" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	/**
	 *
	 * Geometry is a collection of SubGeometries, each of which contain the actual geometrical data such as vertices,
	 * normals, uvs, etc. It also contains a reference to an animation class, which defines how the geometry moves.
	 * A Geometry object is assigned to a Mesh, a scene graph occurence of the geometry, which in turn assigns
	 * the SubGeometries to its respective TriangleSubMesh objects.
	 *
	 *
	 *
	 * @see away.core.base.SubGeometry
	 * @see away.entities.Mesh
	 *
	 * @class Geometry
	 */
	class Geometry extends NamedAssetBase implements IAsset {
	    private _subGeometries;
	    assetType: string;
	    /**
	     * A collection of TriangleSubGeometry objects, each of which contain geometrical data such as vertices, normals, etc.
	     */
	    subGeometries: SubGeometryBase[];
	    getSubGeometries(): SubGeometryBase[];
	    /**
	     * Creates a new Geometry object.
	     */
	    constructor();
	    applyTransformation(transform: Matrix3D): void;
	    /**
	     * Adds a new TriangleSubGeometry object to the list.
	     * @param subGeometry The TriangleSubGeometry object to be added.
	     */
	    addSubGeometry(subGeometry: SubGeometryBase): void;
	    /**
	     * Removes a new TriangleSubGeometry object from the list.
	     * @param subGeometry The TriangleSubGeometry object to be removed.
	     */
	    removeSubGeometry(subGeometry: SubGeometryBase): void;
	    /**
	     * Clones the geometry.
	     * @return An exact duplicate of the current Geometry object.
	     */
	    clone(): Geometry;
	    /**
	     * Scales the geometry.
	     * @param scale The amount by which to scale.
	     */
	    scale(scale: number): void;
	    /**
	     * Clears all resources used by the Geometry object, including SubGeometries.
	     */
	    dispose(): void;
	    /**
	     * Scales the uv coordinates (tiling)
	     * @param scaleU The amount by which to scale on the u axis. Default is 1;
	     * @param scaleV The amount by which to scale on the v axis. Default is 1;
	     */
	    scaleUV(scaleU?: number, scaleV?: number): void;
	    iInvalidateBounds(subGeom: SubGeometryBase): void;
	}
	export = Geometry;
	
}
declare module "awayjs-display/lib/base/BlendMode" {
	/**
	 * A class that provides constant values for visual blend mode effects. These
	 * constants are used in the following:
	 * <ul>
	 *   <li> The <code>blendMode</code> property of the
	 * flash.display.DisplayObject class.</li>
	 *   <li> The <code>blendMode</code> parameter of the <code>draw()</code>
	 * method of the flash.display.BitmapData class</li>
	 * </ul>
	 */
	class BlendMode {
	    /**
	     * Adds the values of the constituent colors of the display object to the
	     * colors of its background, applying a ceiling of 0xFF. This setting is
	     * commonly used for animating a lightening dissolve between two objects.
	     *
	     * <p>For example, if the display object has a pixel with an RGB value of
	     * 0xAAA633, and the background pixel has an RGB value of 0xDD2200, the
	     * resulting RGB value for the displayed pixel is 0xFFC833(because 0xAA +
	     * 0xDD > 0xFF, 0xA6 + 0x22 = 0xC8, and 0x33 + 0x00 = 0x33).</p>
	     */
	    static ADD: string;
	    /**
	     * Applies the alpha value of each pixel of the display object to the
	     * background. This requires the <code>blendMode</code> property of the
	     * parent display object be set to
	     * <code>away.base.BlendMode.LAYER</code>.
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static ALPHA: string;
	    /**
	     * Selects the darker of the constituent colors of the display object and the
	     * colors of the background(the colors with the smaller values). This
	     * setting is commonly used for superimposing type.
	     *
	     * <p>For example, if the display object has a pixel with an RGB value of
	     * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	     * resulting RGB value for the displayed pixel is 0xDDCC00(because 0xFF >
	     * 0xDD, 0xCC < 0xF8, and 0x33 > 0x00 = 33).</p>
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static DARKEN: string;
	    /**
	     * Compares the constituent colors of the display object with the colors of
	     * its background, and subtracts the darker of the values of the two
	     * constituent colors from the lighter value. This setting is commonly used
	     * for more vibrant colors.
	     *
	     * <p>For example, if the display object has a pixel with an RGB value of
	     * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	     * resulting RGB value for the displayed pixel is 0x222C33(because 0xFF -
	     * 0xDD = 0x22, 0xF8 - 0xCC = 0x2C, and 0x33 - 0x00 = 0x33).</p>
	     */
	    static DIFFERENCE: string;
	    /**
	     * Erases the background based on the alpha value of the display object. This
	     * process requires that the <code>blendMode</code> property of the parent
	     * display object be set to <code>flash.display.BlendMode.LAYER</code>.
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static ERASE: string;
	    /**
	     * Adjusts the color of each pixel based on the darkness of the display
	     * object. If the display object is lighter than 50% gray, the display object
	     * and background colors are screened, which results in a lighter color. If
	     * the display object is darker than 50% gray, the colors are multiplied,
	     * which results in a darker color. This setting is commonly used for shading
	     * effects.
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static HARDLIGHT: string;
	    /**
	     * Inverts the background.
	     */
	    static INVERT: string;
	    /**
	     * Forces the creation of a transparency group for the display object. This
	     * means that the display object is precomposed in a temporary buffer before
	     * it is processed further. The precomposition is done automatically if the
	     * display object is precached by means of bitmap caching or if the display
	     * object is a display object container that has at least one child object
	     * with a <code>blendMode</code> setting other than <code>"normal"</code>.
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static LAYER: string;
	    /**
	     * Selects the lighter of the constituent colors of the display object and
	     * the colors of the background(the colors with the larger values). This
	     * setting is commonly used for superimposing type.
	     *
	     * <p>For example, if the display object has a pixel with an RGB value of
	     * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	     * resulting RGB value for the displayed pixel is 0xFFF833(because 0xFF >
	     * 0xDD, 0xCC < 0xF8, and 0x33 > 0x00 = 33).</p>
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static LIGHTEN: string;
	    /**
	     * Multiplies the values of the display object constituent colors by the
	     * constituent colors of the background color, and normalizes by dividing by
	     * 0xFF, resulting in darker colors. This setting is commonly used for
	     * shadows and depth effects.
	     *
	     * <p>For example, if a constituent color(such as red) of one pixel in the
	     * display object and the corresponding color of the pixel in the background
	     * both have the value 0x88, the multiplied result is 0x4840. Dividing by
	     * 0xFF yields a value of 0x48 for that constituent color, which is a darker
	     * shade than the color of the display object or the color of the
	     * background.</p>
	     */
	    static MULTIPLY: string;
	    /**
	     * The display object appears in front of the background. Pixel values of the
	     * display object override the pixel values of the background. Where the
	     * display object is transparent, the background is visible.
	     */
	    static NORMAL: string;
	    /**
	     * Adjusts the color of each pixel based on the darkness of the background.
	     * If the background is lighter than 50% gray, the display object and
	     * background colors are screened, which results in a lighter color. If the
	     * background is darker than 50% gray, the colors are multiplied, which
	     * results in a darker color. This setting is commonly used for shading
	     * effects.
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static OVERLAY: string;
	    /**
	     * Multiplies the complement(inverse) of the display object color by the
	     * complement of the background color, resulting in a bleaching effect. This
	     * setting is commonly used for highlights or to remove black areas of the
	     * display object.
	     */
	    static SCREEN: string;
	    /**
	     * Uses a shader to define the blend between objects.
	     *
	     * <p>Setting the <code>blendShader</code> property to a Shader instance
	     * automatically sets the display object's <code>blendMode</code> property to
	     * <code>BlendMode.SHADER</code>. If the <code>blendMode</code> property is
	     * set to <code>BlendMode.SHADER</code> without first setting the
	     * <code>blendShader</code> property, the <code>blendMode</code> property is
	     * set to <code>BlendMode.NORMAL</code> instead. If the
	     * <code>blendShader</code> property is set(which sets the
	     * <code>blendMode</code> property to <code>BlendMode.SHADER</code>), then
	     * later the value of the <code>blendMode</code> property is changed, the
	     * blend mode can be reset to use the blend shader simply by setting the
	     * <code>blendMode</code> property to <code>BlendMode.SHADER</code>. The
	     * <code>blendShader</code> property does not need to be set again except to
	     * change the shader that's used to define the blend mode.</p>
	     *
	     * <p>Not supported under GPU rendering.</p>
	     */
	    static SHADER: string;
	    /**
	     * Subtracts the values of the constituent colors in the display object from
	     * the values of the background color, applying a floor of 0. This setting is
	     * commonly used for animating a darkening dissolve between two objects.
	     *
	     * <p>For example, if the display object has a pixel with an RGB value of
	     * 0xAA2233, and the background pixel has an RGB value of 0xDDA600, the
	     * resulting RGB value for the displayed pixel is 0x338400(because 0xDD -
	     * 0xAA = 0x33, 0xA6 - 0x22 = 0x84, and 0x00 - 0x33 < 0x00).</p>
	     */
	    static SUBTRACT: string;
	}
	export = BlendMode;
	
}
declare module "awayjs-display/lib/base/IStage" {
	/**
	 * The IStage interface is implemented by objects that control the rendering context
	 * of the AwayJS Stage area
	 *
	 */
	interface IStage {
	}
	export = IStage;
	
}
declare module "awayjs-display/lib/events/SceneEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	class SceneEvent extends Event {
	    /**
	     *
	     */
	    static ADDED_TO_SCENE: string;
	    /**
	     *
	     */
	    static REMOVED_FROM_SCENE: string;
	    /**
	     *
	     */
	    static PARTITION_CHANGED: string;
	    /**
	     *
	     */
	    displayObject: DisplayObject;
	    constructor(type: string, displayObject: DisplayObject);
	}
	export = SceneEvent;
	
}
declare module "awayjs-display/lib/containers/Scene" {
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import Partition = require("awayjs-display/lib/partition/Partition");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	class Scene extends EventDispatcher {
	    private _expandedPartitions;
	    private _partitions;
	    _iSceneGraphRoot: DisplayObjectContainer;
	    _iCollectionMark: number;
	    constructor();
	    traversePartitions(traverser: ICollector): void;
	    partition: Partition;
	    contains(child: DisplayObject): boolean;
	    addChild(child: DisplayObject): DisplayObject;
	    removeChild(child: DisplayObject): void;
	    removeChildAt(index: number): void;
	    getChildAt(index: number): DisplayObject;
	    numChildren: number;
	    /**
	     * @internal
	     */
	    iRegisterEntity(displayObject: DisplayObject): void;
	    /**
	     * @internal
	     */
	    iRegisterPartition(partition: Partition): void;
	    /**
	     * @internal
	     */
	    iUnregisterEntity(displayObject: DisplayObject): void;
	    /**
	     * @internal
	     */
	    iUnregisterPartition(partition: Partition): void;
	}
	export = Scene;
	
}
declare module "awayjs-display/lib/events/CameraEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	import Camera = require("awayjs-display/lib/entities/Camera");
	/**
	 * @class away.events.CameraEvent
	 */
	class CameraEvent extends Event {
	    static PROJECTION_CHANGED: string;
	    private _camera;
	    constructor(type: string, camera: Camera);
	    camera: Camera;
	}
	export = CameraEvent;
	
}
declare module "awayjs-display/lib/partition/CameraNode" {
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.partition.CameraNode
	 */
	class CameraNode extends EntityNode {
	    constructor(camera: IEntity);
	    /**
	     * @inheritDoc
	     */
	    acceptTraverser(traverser: ICollector): void;
	}
	export = CameraNode;
	
}
declare module "awayjs-display/lib/entities/Mesh" {
	import UVTransform = require("awayjs-core/lib/geom/UVTransform");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import ISubMesh = require("awayjs-display/lib/base/ISubMesh");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * Mesh is an instance of a Geometry, augmenting it with a presence in the scene graph, a material, and an animation
	 * state. It consists out of SubMeshes, which in turn correspond to SubGeometries. SubMeshes allow different parts
	 * of the geometry to be assigned different materials.
	 */
	class Mesh extends DisplayObjectContainer implements IEntity {
	    private _uvTransform;
	    private _subMeshes;
	    private _geometry;
	    private _material;
	    private _animator;
	    private _castsShadows;
	    private _shareAnimationGeometry;
	    private _onGeometryBoundsInvalidDelegate;
	    private _onSubGeometryAddedDelegate;
	    private _onSubGeometryRemovedDelegate;
	    /**
	     * Defines the animator of the mesh. Act on the mesh's geometry.  Default value is <code>null</code>.
	     */
	    animator: IAnimator;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     * Indicates whether or not the Mesh can cast shadows. Default value is <code>true</code>.
	     */
	    castsShadows: boolean;
	    /**
	     * The geometry used by the mesh that provides it with its shape.
	     */
	    geometry: Geometry;
	    /**
	     * The material with which to render the Mesh.
	     */
	    material: MaterialBase;
	    /**
	     * Indicates whether or not the mesh share the same animation geometry.
	     */
	    shareAnimationGeometry: boolean;
	    /**
	     * The SubMeshes out of which the Mesh consists. Every SubMesh can be assigned a material to override the Mesh's
	     * material.
	     */
	    subMeshes: ISubMesh[];
	    /**
	     *
	     */
	    uvTransform: UVTransform;
	    /**
	     * Create a new Mesh object.
	     *
	     * @param geometry                    The geometry used by the mesh that provides it with its shape.
	     * @param material    [optional]        The material with which to render the Mesh.
	     */
	    constructor(geometry: Geometry, material?: MaterialBase);
	    /**
	     *
	     */
	    bakeTransformations(): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * Disposes mesh including the animator and children. This is a merely a convenience method.
	     * @return
	     */
	    disposeWithAnimatorAndChildren(): void;
	    /**
	     * Clones this Mesh instance along with all it's children, while re-using the same
	     * material, geometry and animation set. The returned result will be a copy of this mesh,
	     * containing copies of all of it's children.
	     *
	     * Properties that are re-used (i.e. not cloned) by the new copy include name,
	     * geometry, and material. Properties that are cloned or created anew for the copy
	     * include subMeshes, children of the mesh, and the animator.
	     *
	     * If you want to copy just the mesh, reusing it's geometry and material while not
	     * cloning it's children, the simplest way is to create a new mesh manually:
	     *
	     * <code>
	     * var clone : Mesh = new Mesh(original.geometry, original.material);
	     * </code>
	     */
	    clone(): DisplayObject;
	    /**
	     * //TODO
	     *
	     * @param subGeometry
	     * @returns {SubMeshBase}
	     */
	    getSubMeshFromSubGeometry(subGeometry: SubGeometryBase): ISubMesh;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    /**
	     * //TODO
	     *
	     * @protected
	     */
	    pUpdateBounds(): void;
	    /**
	     * //TODO
	     *
	     * @private
	     */
	    private onGeometryBoundsInvalid(event);
	    /**
	     * Called when a SubGeometry was added to the Geometry.
	     *
	     * @private
	     */
	    private onSubGeometryAdded(event);
	    /**
	     * Called when a SubGeometry was removed from the Geometry.
	     *
	     * @private
	     */
	    private onSubGeometryRemoved(event);
	    /**
	     * Adds a SubMeshBase wrapping a SubGeometry.
	     *
	     * @param subGeometry
	     */
	    private addSubMesh(subGeometry);
	    /**
	     * //TODO
	     *
	     * @param shortestCollisionDistance
	     * @param findClosest
	     * @returns {boolean}
	     *
	     * @internal
	     */
	    _iTestCollision(shortestCollisionDistance: number, findClosest: boolean): boolean;
	    /**
	     *
	     * @param renderer
	     *
	     * @internal
	     */
	    _iCollectRenderables(renderer: IRenderer): void;
	    _iInvalidateRenderableGeometries(): void;
	}
	export = Mesh;
	
}
declare module "awayjs-display/lib/base/SubMeshBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import UVTransform = require("awayjs-core/lib/geom/UVTransform");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * SubMeshBase wraps a TriangleSubGeometry as a scene graph instantiation. A SubMeshBase is owned by a Mesh object.
	 *
	 *
	 * @see away.base.TriangleSubGeometry
	 * @see away.entities.Mesh
	 *
	 * @class away.base.SubMeshBase
	 */
	class SubMeshBase extends NamedAssetBase {
	    _pParentMesh: Mesh;
	    _uvTransform: UVTransform;
	    _iIndex: number;
	    _material: MaterialBase;
	    private _renderables;
	    /**
	     * The animator object that provides the state for the TriangleSubMesh's animation.
	     */
	    animator: IAnimator;
	    /**
	     * The material used to render the current TriangleSubMesh. If set to null, its parent Mesh's material will be used instead.
	     */
	    material: MaterialBase;
	    /**
	     * The scene transform object that transforms from model to world space.
	     */
	    sceneTransform: Matrix3D;
	    /**
	     * The entity that that initially provided the IRenderable to the render pipeline (ie: the owning Mesh object).
	     */
	    parentMesh: Mesh;
	    /**
	     *
	     */
	    uvTransform: UVTransform;
	    /**
	     * Creates a new SubMeshBase object
	     */
	    constructor();
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     * @param camera
	     * @returns {away.geom.Matrix3D}
	     */
	    getRenderSceneTransform(camera: Camera): Matrix3D;
	    _iAddRenderable(renderable: IRenderable): IRenderable;
	    _iRemoveRenderable(renderable: IRenderable): IRenderable;
	    _iInvalidateRenderableGeometry(): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	    _iGetExplicitMaterial(): MaterialBase;
	}
	export = SubMeshBase;
	
}
declare module "awayjs-display/lib/base/TriangleSubMesh" {
	import ISubMesh = require("awayjs-display/lib/base/ISubMesh");
	import SubMeshBase = require("awayjs-display/lib/base/SubMeshBase");
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * TriangleSubMesh wraps a TriangleSubGeometry as a scene graph instantiation. A TriangleSubMesh is owned by a Mesh object.
	 *
	 *
	 * @see away.base.TriangleSubGeometry
	 * @see away.entities.Mesh
	 *
	 * @class away.base.TriangleSubMesh
	 */
	class TriangleSubMesh extends SubMeshBase implements ISubMesh {
	    private _subGeometry;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     * The TriangleSubGeometry object which provides the geometry data for this TriangleSubMesh.
	     */
	    subGeometry: TriangleSubGeometry;
	    /**
	     * Creates a new TriangleSubMesh object
	     * @param subGeometry The TriangleSubGeometry object which provides the geometry data for this TriangleSubMesh.
	     * @param parentMesh The Mesh object to which this TriangleSubMesh belongs.
	     * @param material An optional material used to render this TriangleSubMesh.
	     */
	    constructor(subGeometry: TriangleSubGeometry, parentMesh: Mesh, material?: MaterialBase);
	    /**
	     *
	     */
	    dispose(): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	}
	export = TriangleSubMesh;
	
}
declare module "awayjs-display/lib/events/SubGeometryEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	/**
	 * Dispatched to notify changes in a sub geometry object's state.
	 *
	 * @class away.events.SubGeometryEvent
	 * @see away.core.base.Geometry
	 */
	class SubGeometryEvent extends Event {
	    /**
	     * Dispatched when a TriangleSubGeometry's index data has been updated.
	     */
	    static INDICES_UPDATED: string;
	    /**
	     * Dispatched when a TriangleSubGeometry's vertex data has been updated.
	     */
	    static VERTICES_UPDATED: string;
	    private _dataType;
	    /**
	     * Create a new GeometryEvent
	     * @param type The event type.
	     * @param dataType An optional data type of the vertex data being updated.
	     */
	    constructor(type: string, dataType?: string);
	    /**
	     * The data type of the vertex data.
	     */
	    dataType: string;
	    /**
	     * Clones the event.
	     *
	     * @return An exact duplicate of the current object.
	     */
	    clone(): Event;
	}
	export = SubGeometryEvent;
	
}
declare module "awayjs-display/lib/base/TriangleSubGeometry" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	/**
	 * @class away.base.TriangleSubGeometry
	 */
	class TriangleSubGeometry extends SubGeometryBase {
	    static POSITION_DATA: string;
	    static NORMAL_DATA: string;
	    static TANGENT_DATA: string;
	    static UV_DATA: string;
	    static SECONDARY_UV_DATA: string;
	    static JOINT_INDEX_DATA: string;
	    static JOINT_WEIGHT_DATA: string;
	    static POSITION_FORMAT: string;
	    static NORMAL_FORMAT: string;
	    static TANGENT_FORMAT: string;
	    static UV_FORMAT: string;
	    static SECONDARY_UV_FORMAT: string;
	    private _positionsDirty;
	    private _faceNormalsDirty;
	    private _faceTangentsDirty;
	    private _vertexNormalsDirty;
	    private _vertexTangentsDirty;
	    private _uvsDirty;
	    private _secondaryUVsDirty;
	    private _jointIndicesDirty;
	    private _jointWeightsDirty;
	    private _positions;
	    private _vertexNormals;
	    private _vertexTangents;
	    private _uvs;
	    private _secondaryUVs;
	    private _jointIndices;
	    private _jointWeights;
	    private _useCondensedIndices;
	    private _condensedJointIndices;
	    private _condensedIndexLookUp;
	    private _numCondensedJoints;
	    private _jointsPerVertex;
	    private _concatenateArrays;
	    private _autoDeriveNormals;
	    private _autoDeriveTangents;
	    private _autoDeriveUVs;
	    private _useFaceWeights;
	    private _faceNormals;
	    private _faceTangents;
	    private _faceWeights;
	    private _scaleU;
	    private _scaleV;
	    private _positionsUpdated;
	    private _normalsUpdated;
	    private _tangentsUpdated;
	    private _uvsUpdated;
	    private _secondaryUVsUpdated;
	    private _jointIndicesUpdated;
	    private _jointWeightsUpdated;
	    /**
	     *
	     */
	    scaleU: number;
	    /**
	     *
	     */
	    scaleV: number;
	    /**
	     * Offers the option of enabling GPU accelerated animation on skeletons larger than 32 joints
	     * by condensing the number of joint index values required per mesh. Only applicable to
	     * skeleton animations that utilise more than one mesh object. Defaults to false.
	     */
	    useCondensedIndices: boolean;
	    _pUpdateStrideOffset(): void;
	    /**
	     *
	     */
	    jointsPerVertex: number;
	    /**
	     * Defines whether a UV buffer should be automatically generated to contain dummy UV coordinates.
	     * Set to true if a geometry lacks UV data but uses a material that requires it, or leave as false
	     * in cases where UV data is explicitly defined or the material does not require UV data.
	     */
	    autoDeriveUVs: boolean;
	    /**
	     * True if the vertex normals should be derived from the geometry, false if the vertex normals are set
	     * explicitly.
	     */
	    autoDeriveNormals: boolean;
	    /**
	     * True if the vertex tangents should be derived from the geometry, false if the vertex normals are set
	     * explicitly.
	     */
	    autoDeriveTangents: boolean;
	    /**
	     *
	     */
	    vertices: number[];
	    /**
	     *
	     */
	    positions: number[];
	    /**
	     *
	     */
	    vertexNormals: number[];
	    /**
	     *
	     */
	    vertexTangents: number[];
	    /**
	     * The raw data of the face normals, in the same order as the faces are listed in the index list.
	     */
	    faceNormals: number[];
	    /**
	     * The raw data of the face tangets, in the same order as the faces are listed in the index list.
	     */
	    faceTangents: number[];
	    /**
	     *
	     */
	    uvs: number[];
	    /**
	     *
	     */
	    secondaryUVs: number[];
	    /**
	     *
	     */
	    jointIndices: number[];
	    /**
	     *
	     */
	    jointWeights: number[];
	    /**
	     * Indicates whether or not to take the size of faces into account when auto-deriving vertex normals and tangents.
	     */
	    useFaceWeights: boolean;
	    numCondensedJoints: number;
	    condensedIndexLookUp: number[];
	    /**
	     *
	     */
	    constructor(concatenatedArrays: boolean);
	    getBoundingPositions(): number[];
	    /**
	     *
	     */
	    updatePositions(values: number[]): void;
	    /**
	     * Updates the vertex normals based on the geometry.
	     */
	    updateVertexNormals(values: number[]): void;
	    /**
	     * Updates the vertex tangents based on the geometry.
	     */
	    updateVertexTangents(values: number[]): void;
	    /**
	     * Updates the uvs based on the geometry.
	     */
	    updateUVs(values: number[]): void;
	    /**
	     * Updates the secondary uvs based on the geometry.
	     */
	    updateSecondaryUVs(values: number[]): void;
	    /**
	     * Updates the joint indices
	     */
	    updateJointIndices(values: number[]): void;
	    /**
	     * Updates the joint weights.
	     */
	    updateJointWeights(values: number[]): void;
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     * Updates the face indices of the TriangleSubGeometry.
	     *
	     * @param indices The face indices to upload.
	     */
	    updateIndices(indices: number[]): void;
	    /**
	     * Clones the current object
	     * @return An exact duplicate of the current object.
	     */
	    clone(): TriangleSubGeometry;
	    scaleUV(scaleU?: number, scaleV?: number): void;
	    /**
	     * Scales the geometry.
	     * @param scale The amount by which to scale.
	     */
	    scale(scale: number): void;
	    applyTransformation(transform: Matrix3D): void;
	    /**
	     * Updates the tangents for each face.
	     */
	    private updateFaceTangents();
	    /**
	     * Updates the normals for each face.
	     */
	    private updateFaceNormals();
	    _pNotifyVerticesUpdate(): void;
	    private notifyPositionsUpdate();
	    private notifyNormalsUpdate();
	    private notifyTangentsUpdate();
	    private notifyUVsUpdate();
	    private notifySecondaryUVsUpdate();
	    private notifyJointIndicesUpdate();
	    private notifyJointWeightsUpdate();
	}
	export = TriangleSubGeometry;
	
}
declare module "awayjs-display/lib/base/LineSubGeometry" {
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	/**
	 * @class LineSubGeometry
	 */
	class LineSubGeometry extends SubGeometryBase {
	    static VERTEX_DATA: string;
	    static START_POSITION_DATA: string;
	    static END_POSITION_DATA: string;
	    static THICKNESS_DATA: string;
	    static COLOR_DATA: string;
	    static POSITION_FORMAT: string;
	    static COLOR_FORMAT: string;
	    static THICKNESS_FORMAT: string;
	    private _positionsDirty;
	    private _boundingPositionDirty;
	    private _thicknessDirty;
	    private _colorsDirty;
	    private _startPositions;
	    private _endPositions;
	    private _boundingPositions;
	    private _thickness;
	    private _startColors;
	    private _endColors;
	    private _numSegments;
	    private _positionsUpdated;
	    private _thicknessUpdated;
	    private _colorUpdated;
	    _pUpdateStrideOffset(): void;
	    /**
	     *
	     */
	    vertices: number[];
	    /**
	     *
	     */
	    startPositions: number[];
	    /**
	     *
	     */
	    endPositions: number[];
	    /**
	     *
	     */
	    thickness: number[];
	    /**
	     *
	     */
	    startColors: number[];
	    /**
	     *
	     */
	    endColors: number[];
	    /**
	     * The total amount of segments in the TriangleSubGeometry.
	     */
	    numSegments: number;
	    /**
	     *
	     */
	    constructor();
	    getBoundingPositions(): number[];
	    /**
	     *
	     */
	    updatePositions(startValues: number[], endValues: number[]): void;
	    /**
	     * Updates the thickness.
	     */
	    updateThickness(values: number[]): void;
	    /**
	     *
	     */
	    updateColors(startValues: number[], endValues: number[]): void;
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     * @protected
	     */
	    pInvalidateBounds(): void;
	    /**
	     * The Geometry object that 'owns' this TriangleSubGeometry object.
	     *
	     * @private
	     */
	    parentGeometry: Geometry;
	    /**
	     * Clones the current object
	     * @return An exact duplicate of the current object.
	     */
	    clone(): LineSubGeometry;
	    _pNotifyVerticesUpdate(): void;
	    private notifyPositionsUpdate();
	    private notifyThicknessUpdate();
	    private notifyColorsUpdate();
	}
	export = LineSubGeometry;
	
}
declare module "awayjs-display/lib/base/LineSubMesh" {
	import ISubMesh = require("awayjs-display/lib/base/ISubMesh");
	import LineSubGeometry = require("awayjs-display/lib/base/LineSubGeometry");
	import SubMeshBase = require("awayjs-display/lib/base/SubMeshBase");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * LineSubMesh wraps a LineSubGeometry as a scene graph instantiation. A LineSubMesh is owned by a Mesh object.
	 *
	 *
	 * @see away.base.LineSubGeometry
	 * @see away.entities.Mesh
	 *
	 * @class away.base.LineSubMesh
	 */
	class LineSubMesh extends SubMeshBase implements ISubMesh {
	    private _subGeometry;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     * The LineSubGeometry object which provides the geometry data for this LineSubMesh.
	     */
	    subGeometry: LineSubGeometry;
	    /**
	     * Creates a new LineSubMesh object
	     * @param subGeometry The LineSubGeometry object which provides the geometry data for this LineSubMesh.
	     * @param parentMesh The Mesh object to which this LineSubMesh belongs.
	     * @param material An optional material used to render this LineSubMesh.
	     */
	    constructor(subGeometry: LineSubGeometry, parentMesh: Mesh, material?: MaterialBase);
	    /**
	     *
	     */
	    dispose(): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	}
	export = LineSubMesh;
	
}
declare module "awayjs-display/lib/sort/IEntitySorter" {
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	/**
	 * @interface away.sort.IEntitySorter
	 */
	interface IEntitySorter {
	    sortBlendedRenderables(head: IRenderable): IRenderable;
	    sortOpaqueRenderables(head: IRenderable): IRenderable;
	}
	export = IEntitySorter;
	
}
declare module "awayjs-display/lib/events/MaterialEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class MaterialEvent extends Event {
	    static SIZE_CHANGED: string;
	    constructor(type: string);
	}
	export = MaterialEvent;
	
}
declare module "awayjs-display/lib/entities/Billboard" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import UVTransform = require("awayjs-core/lib/geom/UVTransform");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * The Billboard class represents display objects that represent bitmap images.
	 * These can be images that you load with the <code>flash.Assets</code> or
	 * <code>flash.display.Loader</code> classes, or they can be images that you
	 * create with the <code>Billboard()</code> constructor.
	 *
	 * <p>The <code>Billboard()</code> constructor allows you to create a Billboard
	 * object that contains a reference to a BitmapData object. After you create a
	 * Billboard object, use the <code>addChild()</code> or <code>addChildAt()</code>
	 * method of the parent DisplayObjectContainer instance to place the bitmap on
	 * the display list.</p>
	 *
	 * <p>A Billboard object can share its BitmapData reference among several Billboard
	 * objects, independent of translation or rotation properties. Because you can
	 * create multiple Billboard objects that reference the same BitmapData object,
	 * multiple display objects can use the same complex BitmapData object without
	 * incurring the memory overhead of a BitmapData object for each display
	 * object instance.</p>
	 *
	 * <p>A BitmapData object can be drawn to the screen by a Billboard object in one
	 * of two ways: by using the default hardware renderer with a single hardware surface,
	 * or by using the slower software renderer when 3D acceleration is not available.</p>
	 *
	 * <p>If you would prefer to perform a batch rendering command, rather than using a
	 * single surface for each Billboard object, you can also draw to the screen using the
	 * <code>drawTiles()</code> or <code>drawTriangles()</code> methods which are
	 * available to <code>flash.display.Tilesheet</code> and <code>flash.display.Graphics
	 * objects.</code></p>
	 *
	 * <p><b>Note:</b> The Billboard class is not a subclass of the InteractiveObject
	 * class, so it cannot dispatch mouse events. However, you can use the
	 * <code>addEventListener()</code> method of the display object container that
	 * contains the Billboard object.</p>
	 */
	class Billboard extends DisplayObject implements IEntity, IMaterialOwner {
	    private _animator;
	    private _billboardWidth;
	    private _billboardHeight;
	    private _material;
	    private _uvTransform;
	    private onSizeChangedDelegate;
	    /**
	     * Defines the animator of the mesh. Act on the mesh's geometry. Defaults to null
	     */
	    animator: IAnimator;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     * The BitmapData object being referenced.
	     */
	    bitmapData: BitmapData;
	    /**
	     *
	     */
	    billboardHeight: number;
	    /**
	     *
	     */
	    billboardWidth: number;
	    /**
	     *
	     */
	    material: MaterialBase;
	    /**
	     * Controls whether or not the Billboard object is snapped to the nearest pixel.
	     * This value is ignored in the native and HTML5 targets.
	     * The PixelSnapping class includes possible values:
	     * <ul>
	     *   <li><code>PixelSnapping.NEVER</code> - No pixel snapping occurs.</li>
	     *   <li><code>PixelSnapping.ALWAYS</code> - The image is always snapped to
	     * the nearest pixel, independent of transformation.</li>
	     *   <li><code>PixelSnapping.AUTO</code> - The image is snapped to the
	     * nearest pixel if it is drawn with no rotation or skew and it is drawn at a
	     * scale factor of 99.9% to 100.1%. If these conditions are satisfied, the
	     * bitmap image is drawn at 100% scale, snapped to the nearest pixel.
	     * When targeting Flash Player, this value allows the image to be drawn as fast
	     * as possible using the internal vector renderer.</li>
	     * </ul>
	     */
	    pixelSnapping: string;
	    /**
	     * Controls whether or not the bitmap is smoothed when scaled. If
	     * <code>true</code>, the bitmap is smoothed when scaled. If
	     * <code>false</code>, the bitmap is not smoothed when scaled.
	     */
	    smoothing: boolean;
	    /**
	     *
	     */
	    uvTransform: UVTransform;
	    constructor(material: MaterialBase, pixelSnapping?: string, smoothing?: boolean);
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    /**
	     * @protected
	     */
	    pUpdateBounds(): void;
	    /**
	     * //TODO
	     *
	     * @param shortestCollisionDistance
	     * @param findClosest
	     * @returns {boolean}
	     *
	     * @internal
	     */
	    _iTestCollision(shortestCollisionDistance: number, findClosest: boolean): boolean;
	    /**
	     * @private
	     */
	    private onSizeChanged(event);
	    _iCollectRenderables(renderer: IRenderer): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	}
	export = Billboard;
	
}
declare module "awayjs-display/lib/partition/SkyboxNode" {
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * SkyboxNode is a space partitioning leaf node that contains a Skybox object.
	 *
	 * @class away.partition.SkyboxNode
	 */
	class SkyboxNode extends EntityNode {
	    private _skyBox;
	    /**
	     * Creates a new SkyboxNode object.
	     * @param skyBox The Skybox to be contained in the node.
	     */
	    constructor(skyBox: IEntity);
	    /**
	     * @inheritDoc
	     */
	    acceptTraverser(traverser: ICollector): void;
	    /**
	     *
	     * @param planes
	     * @param numPlanes
	     * @returns {boolean}
	     */
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	}
	export = SkyboxNode;
	
}
declare module "awayjs-display/lib/entities/Skybox" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import UVTransform = require("awayjs-core/lib/geom/UVTransform");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import SkyboxNode = require("awayjs-display/lib/partition/SkyboxNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * A Skybox class is used to render a sky in the scene. It's always considered static and 'at infinity', and as
	 * such it's always centered at the camera's position and sized to exactly fit within the camera's frustum, ensuring
	 * the sky box is always as large as possible without being clipped.
	 */
	class Skybox extends DisplayObject implements IEntity, IMaterialOwner {
	    private _uvTransform;
	    private _material;
	    private _animator;
	    animator: IAnimator;
	    /**
	     *
	     */
	    uvTransform: UVTransform;
	    /**
	     * Create a new Skybox object.
	     *
	     * @param material	The material with which to render the Skybox.
	     */
	    constructor(material: MaterialBase);
	    /**
	     * The material with which to render the Skybox.
	     */
	    material: MaterialBase;
	    assetType: string;
	    /**
	     * @protected
	     */
	    pInvalidateBounds(): void;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): SkyboxNode;
	    /**
	     * @protected
	     */
	    pCreateDefaultBoundingVolume(): BoundingVolumeBase;
	    /**
	     * @protected
	     */
	    pUpdateBounds(): void;
	    castsShadows: boolean;
	    _iCollectRenderables(renderer: IRenderer): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	}
	export = Skybox;
	
}
declare module "awayjs-display/lib/render/IRenderer" {
	import IEventDispatcher = require("awayjs-core/lib/events/IEventDispatcher");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import LineSubMesh = require("awayjs-display/lib/base/LineSubMesh");
	import TriangleSubMesh = require("awayjs-display/lib/base/TriangleSubMesh");
	import IEntitySorter = require("awayjs-display/lib/sort/IEntitySorter");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import Billboard = require("awayjs-display/lib/entities/Billboard");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	/**
	 * IRenderer is an interface for classes that are used in the rendering pipeline to render the
	 * contents of a partition
	 *
	 * @class away.render.IRenderer
	 */
	interface IRenderer extends IEventDispatcher {
	    /**
	     *
	     */
	    renderableSorter: IEntitySorter;
	    /**
	     *
	     */
	    shareContext: boolean;
	    /**
	     *
	     */
	    x: number;
	    /**
	     *
	     */
	    y: number;
	    /**
	     *
	     */
	    width: number;
	    /**
	     *
	     */
	    height: number;
	    /**
	     *
	     */
	    viewPort: Rectangle;
	    /**
	     *
	     */
	    scissorRect: Rectangle;
	    /**
	     *
	     * @param billboard
	     */
	    applyBillboard(billboard: Billboard): any;
	    /**
	     *
	     * @param triangleSubMesh
	     */
	    applyLineSubMesh(triangleSubMesh: LineSubMesh): any;
	    /**
	     *
	     * @param triangleSubMesh
	     */
	    applyTriangleSubMesh(triangleSubMesh: TriangleSubMesh): any;
	    /**
	     *
	     */
	    dispose(): any;
	    /**
	     *
	     * @param entityCollector
	     */
	    render(entityCollector: ICollector): any;
	    /**
	     * @internal
	     */
	    _iBackgroundR: number;
	    /**
	     * @internal
	     */
	    _iBackgroundG: number;
	    /**
	     * @internal
	     */
	    _iBackgroundB: number;
	    /**
	     * @internal
	     */
	    _iBackgroundAlpha: number;
	    /**
	     * @internal
	     */
	    _iCreateEntityCollector(): ICollector;
	    _iRender(entityCollector: ICollector, target?: TextureProxyBase, scissorRect?: Rectangle, surfaceSelector?: number): any;
	    _iRenderCascades(entityCollector: ICollector, target: TextureProxyBase, numCascades: number, scissorRects: Rectangle[], cameras: Camera[]): any;
	}
	export = IRenderer;
	
}
declare module "awayjs-display/lib/entities/Camera" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import IProjection = require("awayjs-core/lib/projections/IProjection");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	class Camera extends DisplayObjectContainer implements IEntity {
	    private _viewProjection;
	    private _viewProjectionDirty;
	    private _projection;
	    private _frustumPlanes;
	    private _frustumPlanesDirty;
	    private _onProjectionMatrixChangedDelegate;
	    constructor(projection?: IProjection);
	    pCreateDefaultBoundingVolume(): BoundingVolumeBase;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    assetType: string;
	    private onProjectionMatrixChanged(event);
	    frustumPlanes: Plane3D[];
	    private updateFrustum();
	    /**
	     * @protected
	     */
	    pInvalidateSceneTransform(): void;
	    /**
	     * @protected
	     */
	    pUpdateBounds(): void;
	    /**
	     *
	     */
	    projection: IProjection;
	    /**
	     *
	     */
	    viewProjection: Matrix3D;
	    /**
	     * Calculates the ray in scene space from the camera to the given normalized coordinates in screen space.
	     *
	     * @param nX The normalised x coordinate in screen space, -1 corresponds to the left edge of the viewport, 1 to the right.
	     * @param nY The normalised y coordinate in screen space, -1 corresponds to the top edge of the viewport, 1 to the bottom.
	     * @param sZ The z coordinate in screen space, representing the distance into the screen.
	     * @return The ray from the camera to the scene space position of the given screen coordinates.
	     */
	    getRay(nX: number, nY: number, sZ: number): Vector3D;
	    /**
	     * Calculates the normalised position in screen space of the given scene position.
	     *
	     * @param point3d the position vector of the scene coordinates to be projected.
	     * @return The normalised screen position of the given scene coordinates.
	     */
	    project(point3d: Vector3D): Vector3D;
	    /**
	     * Calculates the scene position of the given normalized coordinates in screen space.
	     *
	     * @param nX The normalised x coordinate in screen space, minus the originX offset of the projection property.
	     * @param nY The normalised y coordinate in screen space, minus the originY offset of the projection property.
	     * @param sZ The z coordinate in screen space, representing the distance into the screen.
	     * @return The scene position of the given screen coordinates.
	     */
	    unproject(nX: number, nY: number, sZ: number): Vector3D;
	    _iCollectRenderables(renderer: IRenderer): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	}
	export = Camera;
	
}
declare module "awayjs-display/lib/events/LightEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class LightEvent extends Event {
	    static CASTS_SHADOW_CHANGE: string;
	    constructor(type: string);
	    clone(): Event;
	}
	export = LightEvent;
	
}
declare module "awayjs-display/lib/pool/EntityListItem" {
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.pool.EntityListItem
	 */
	class EntityListItem {
	    /**
	     *
	     */
	    entity: IEntity;
	    /**
	     *
	     */
	    next: EntityListItem;
	}
	export = EntityListItem;
	
}
declare module "awayjs-display/lib/pool/EntityListItemPool" {
	import EntityListItem = require("awayjs-display/lib/pool/EntityListItem");
	/**
	 * @class away.pool.EntityListItemPool
	 */
	class EntityListItemPool {
	    private _pool;
	    private _index;
	    private _poolSize;
	    /**
	     *
	     */
	    constructor();
	    /**
	     *
	     */
	    getItem(): EntityListItem;
	    /**
	     *
	     */
	    freeAll(): void;
	    dispose(): void;
	}
	export = EntityListItemPool;
	
}
declare module "awayjs-display/lib/traverse/CollectorBase" {
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import EntityListItem = require("awayjs-display/lib/pool/EntityListItem");
	import EntityListItemPool = require("awayjs-display/lib/pool/EntityListItemPool");
	import NodeBase = require("awayjs-display/lib/partition/NodeBase");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.traverse.CollectorBase
	 */
	class CollectorBase implements ICollector {
	    scene: Scene;
	    _pEntityHead: EntityListItem;
	    _pEntityListItemPool: EntityListItemPool;
	    _pCamera: Camera;
	    private _customCullPlanes;
	    private _cullPlanes;
	    private _numCullPlanes;
	    _pNumEntities: number;
	    _pNumInteractiveEntities: number;
	    constructor();
	    /**
	     *
	     */
	    camera: Camera;
	    /**
	     *
	     */
	    cullPlanes: Plane3D[];
	    /**
	     *
	     */
	    entityHead: EntityListItem;
	    /**
	     *
	     */
	    numEntities: number;
	    /**
	     *
	     */
	    numInteractiveEntities: number;
	    /**
	     *
	     */
	    clear(): void;
	    /**
	     *
	     * @param node
	     * @returns {boolean}
	     */
	    enterNode(node: NodeBase): boolean;
	    /**
	     *
	     * @param entity
	     */
	    applyDirectionalLight(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applyEntity(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applyLightProbe(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applyPointLight(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applySkybox(entity: IEntity): void;
	}
	export = CollectorBase;
	
}
declare module "awayjs-display/lib/partition/LightProbeNode" {
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.partition.LightProbeNode
	 */
	class LightProbeNode extends EntityNode {
	    private _lightProbe;
	    /**
	     *
	     * @param lightProbe
	     */
	    constructor(lightProbe: IEntity);
	    /**
	     * @inheritDoc
	     */
	    acceptTraverser(traverser: ICollector): void;
	    /**
	     *
	     * @returns {boolean}
	     */
	    isCastingShadow(): boolean;
	}
	export = LightProbeNode;
	
}
declare module "awayjs-display/lib/entities/LightProbe" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	class LightProbe extends LightBase implements IEntity {
	    private _diffuseMap;
	    private _specularMap;
	    constructor(diffuseMap: CubeTextureBase, specularMap?: CubeTextureBase);
	    diffuseMap: CubeTextureBase;
	    specularMap: CubeTextureBase;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    pUpdateBounds(): void;
	    pCreateDefaultBoundingVolume(): BoundingVolumeBase;
	    iGetObjectProjectionMatrix(entity: IEntity, camera: Camera, target?: Matrix3D): Matrix3D;
	    _iCollectRenderables(renderer: IRenderer): void;
	}
	export = LightProbe;
	
}
declare module "awayjs-display/lib/partition/PointLightNode" {
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.partition.PointLightNode
	 */
	class PointLightNode extends EntityNode {
	    private _pointLight;
	    /**
	     *
	     * @param pointLight
	     */
	    constructor(pointLight: IEntity);
	    /**
	     * @inheritDoc
	     */
	    acceptTraverser(traverser: ICollector): void;
	    /**
	     *
	     * @returns {boolean}
	     */
	    isCastingShadow(): boolean;
	}
	export = PointLightNode;
	
}
declare module "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper" {
	import Scene = require("awayjs-display/lib/containers/Scene");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import ShadowMapperBase = require("awayjs-display/lib/materials/shadowmappers/ShadowMapperBase");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	class CubeMapShadowMapper extends ShadowMapperBase {
	    private _depthCameras;
	    private _projections;
	    private _needsRender;
	    constructor();
	    private initCameras();
	    private addCamera(rotationX, rotationY, rotationZ);
	    pCreateDepthTexture(): TextureProxyBase;
	    pUpdateDepthProjection(viewCamera: Camera): void;
	    pDrawDepthMap(target: RenderTexture, scene: Scene, renderer: IRenderer): void;
	}
	export = CubeMapShadowMapper;
	
}
declare module "awayjs-display/lib/entities/PointLight" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import CubeMapShadowMapper = require("awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper");
	class PointLight extends LightBase implements IEntity {
	    _pRadius: number;
	    _pFallOff: number;
	    _pFallOffFactor: number;
	    constructor();
	    pCreateShadowMapper(): CubeMapShadowMapper;
	    radius: number;
	    iFallOffFactor(): number;
	    fallOff: number;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    pUpdateBounds(): void;
	    pCreateDefaultBoundingVolume(): BoundingVolumeBase;
	    iGetObjectProjectionMatrix(entity: IEntity, camera: Camera, target?: Matrix3D): Matrix3D;
	    _iCollectRenderables(renderer: IRenderer): void;
	}
	export = PointLight;
	
}
declare module "awayjs-display/lib/traverse/EntityCollector" {
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import CollectorBase = require("awayjs-display/lib/traverse/CollectorBase");
	import DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import LightProbe = require("awayjs-display/lib/entities/LightProbe");
	import PointLight = require("awayjs-display/lib/entities/PointLight");
	import Skybox = require("awayjs-display/lib/entities/Skybox");
	/**
	 * @class away.traverse.EntityCollector
	 */
	class EntityCollector extends CollectorBase {
	    _pSkybox: Skybox;
	    _pLights: LightBase[];
	    private _directionalLights;
	    private _pointLights;
	    private _lightProbes;
	    _pNumLights: number;
	    private _numDirectionalLights;
	    private _numPointLights;
	    private _numLightProbes;
	    /**
	     *
	     */
	    directionalLights: DirectionalLight[];
	    /**
	     *
	     */
	    lightProbes: LightProbe[];
	    /**
	     *
	     */
	    lights: LightBase[];
	    /**
	     *
	     */
	    pointLights: PointLight[];
	    /**
	     *
	     */
	    skyBox: Skybox;
	    constructor();
	    /**
	     *
	     * @param entity
	     */
	    applyDirectionalLight(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applyLightProbe(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applyPointLight(entity: IEntity): void;
	    /**
	     *
	     * @param entity
	     */
	    applySkybox(entity: IEntity): void;
	    /**
	     *
	     */
	    clear(): void;
	}
	export = EntityCollector;
	
}
declare module "awayjs-display/lib/traverse/ShadowCasterCollector" {
	import NodeBase = require("awayjs-display/lib/partition/NodeBase");
	import CollectorBase = require("awayjs-display/lib/traverse/CollectorBase");
	/**
	 * @class away.traverse.ShadowCasterCollector
	 */
	class ShadowCasterCollector extends CollectorBase {
	    constructor();
	    /**
	     *
	     */
	    enterNode(node: NodeBase): boolean;
	}
	export = ShadowCasterCollector;
	
}
declare module "awayjs-display/lib/materials/shadowmappers/ShadowMapperBase" {
	import Scene = require("awayjs-display/lib/containers/Scene");
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import EntityCollector = require("awayjs-display/lib/traverse/EntityCollector");
	import ShadowCasterCollector = require("awayjs-display/lib/traverse/ShadowCasterCollector");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	class ShadowMapperBase {
	    _pCasterCollector: ShadowCasterCollector;
	    private _depthMap;
	    _pDepthMapSize: number;
	    _pLight: LightBase;
	    private _explicitDepthMap;
	    private _autoUpdateShadows;
	    _iShadowsInvalid: boolean;
	    constructor();
	    pCreateCasterCollector(): ShadowCasterCollector;
	    autoUpdateShadows: boolean;
	    updateShadows(): void;
	    iSetDepthMap(depthMap: TextureProxyBase): void;
	    light: LightBase;
	    depthMap: TextureProxyBase;
	    depthMapSize: number;
	    dispose(): void;
	    pCreateDepthTexture(): TextureProxyBase;
	    iRenderDepthMap(entityCollector: EntityCollector, renderer: IRenderer): void;
	    pUpdateDepthProjection(viewCamera: Camera): void;
	    pDrawDepthMap(target: TextureProxyBase, scene: Scene, renderer: IRenderer): void;
	    _pSetDepthMapSize(value: any): void;
	}
	export = ShadowMapperBase;
	
}
declare module "awayjs-display/lib/base/LightBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import ShadowMapperBase = require("awayjs-display/lib/materials/shadowmappers/ShadowMapperBase");
	class LightBase extends DisplayObjectContainer {
	    private _color;
	    private _colorR;
	    private _colorG;
	    private _colorB;
	    private _ambientColor;
	    private _ambient;
	    _iAmbientR: number;
	    _iAmbientG: number;
	    _iAmbientB: number;
	    private _specular;
	    _iSpecularR: number;
	    _iSpecularG: number;
	    _iSpecularB: number;
	    private _diffuse;
	    _iDiffuseR: number;
	    _iDiffuseG: number;
	    _iDiffuseB: number;
	    private _castsShadows;
	    private _shadowMapper;
	    constructor();
	    castsShadows: boolean;
	    pCreateShadowMapper(): ShadowMapperBase;
	    specular: number;
	    diffuse: number;
	    color: number;
	    ambient: number;
	    ambientColor: number;
	    private updateAmbient();
	    iGetObjectProjectionMatrix(entity: IEntity, camera: Camera, target?: Matrix3D): Matrix3D;
	    assetType: string;
	    private updateSpecular();
	    private updateDiffuse();
	    shadowMapper: ShadowMapperBase;
	}
	export = LightBase;
	
}
declare module "awayjs-display/lib/partition/DirectionalLightNode" {
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.partition.DirectionalLightNode
	 */
	class DirectionalLightNode extends EntityNode {
	    private _directionalLight;
	    /**
	     *
	     * @param directionalLight
	     */
	    constructor(directionalLight: IEntity);
	    /**
	     * @inheritDoc
	     */
	    acceptTraverser(traverser: ICollector): void;
	    /**
	     *
	     * @returns {boolean}
	     */
	    isCastingShadow(): boolean;
	}
	export = DirectionalLightNode;
	
}
declare module "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import FreeMatrixProjection = require("awayjs-core/lib/projections/FreeMatrixProjection");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import ShadowMapperBase = require("awayjs-display/lib/materials/shadowmappers/ShadowMapperBase");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	class DirectionalShadowMapper extends ShadowMapperBase {
	    _pOverallDepthCamera: Camera;
	    _pLocalFrustum: number[];
	    _pLightOffset: number;
	    _pMatrix: Matrix3D;
	    _pOverallDepthProjection: FreeMatrixProjection;
	    _pSnap: number;
	    _pCullPlanes: Plane3D[];
	    _pMinZ: number;
	    _pMaxZ: number;
	    constructor();
	    snap: number;
	    lightOffset: number;
	    iDepthProjection: Matrix3D;
	    depth: number;
	    pDrawDepthMap(target: TextureProxyBase, scene: Scene, renderer: IRenderer): void;
	    pUpdateCullPlanes(viewCamera: Camera): void;
	    pUpdateDepthProjection(viewCamera: Camera): void;
	    pUpdateProjectionFromFrustumCorners(viewCamera: Camera, corners: number[], matrix: Matrix3D): void;
	}
	export = DirectionalShadowMapper;
	
}
declare module "awayjs-display/lib/entities/DirectionalLight" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import DirectionalShadowMapper = require("awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper");
	class DirectionalLight extends LightBase implements IEntity {
	    private _direction;
	    private _tmpLookAt;
	    private _sceneDirection;
	    private _projAABBPoints;
	    constructor(xDir?: number, yDir?: number, zDir?: number);
	    sceneDirection: Vector3D;
	    direction: Vector3D;
	    /**
	     *
	     * @returns {away.bounds.NullBounds}
	     */
	    pCreateDefaultBoundingVolume(): BoundingVolumeBase;
	    /**
	     *
	     */
	    pUpdateBounds(): void;
	    pUpdateSceneTransform(): void;
	    pCreateShadowMapper(): DirectionalShadowMapper;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    iGetObjectProjectionMatrix(entity: IEntity, camera: Camera, target?: Matrix3D): Matrix3D;
	    _iCollectRenderables(renderer: IRenderer): void;
	}
	export = DirectionalLight;
	
}
declare module "awayjs-display/lib/traverse/ICollector" {
	import Scene = require("awayjs-display/lib/containers/Scene");
	import NodeBase = require("awayjs-display/lib/partition/NodeBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.traverse.ICollector
	 */
	interface ICollector {
	    /**
	     *
	     */
	    camera: Camera;
	    /**
	     *
	     */
	    scene: Scene;
	    /**
	     *
	     */
	    numEntities: number;
	    /**
	     *
	     */
	    numInteractiveEntities: number;
	    /**
	     *
	     */
	    clear(): any;
	    /**
	     *
	     */
	    entityHead: any;
	    /**
	     *
	     * @param node
	     */
	    enterNode(node: NodeBase): boolean;
	    /**
	     *
	     * @param entity
	     */
	    applyDirectionalLight(entity: IEntity): any;
	    /**
	     *
	     * @param entity
	     */
	    applyEntity(entity: IEntity): any;
	    /**
	     *
	     * @param entity
	     */
	    applyLightProbe(entity: IEntity): any;
	    /**
	     *
	     * @param entity
	     */
	    applyPointLight(entity: IEntity): any;
	    /**
	     *
	     * @param entity
	     */
	    applySkybox(entity: IEntity): any;
	}
	export = ICollector;
	
}
declare module "awayjs-display/lib/partition/NodeBase" {
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.partition.NodeBase
	 */
	class NodeBase {
	    private _boundsChildrenVisible;
	    private _explicitBoundsVisible;
	    private _implicitBoundsVisible;
	    _iParent: NodeBase;
	    _pChildNodes: NodeBase[];
	    _pNumChildNodes: number;
	    _pBoundsPrimitive: IEntity;
	    _iNumEntities: number;
	    _iCollectionMark: number;
	    /**
	     *
	     */
	    boundsVisible: boolean;
	    boundsChildrenVisible: boolean;
	    /**
	     *
	     */
	    parent: NodeBase;
	    /**
	     *
	     * @protected
	     */
	    _pNumEntities: number;
	    /**
	     *
	     */
	    constructor();
	    /**
	     *
	     * @param planes
	     * @param numPlanes
	     * @returns {boolean}
	     * @internal
	     */
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	    /**
	     *
	     * @param rayPosition
	     * @param rayDirection
	     * @returns {boolean}
	     */
	    isIntersectingRay(rayPosition: Vector3D, rayDirection: Vector3D): boolean;
	    /**
	     *
	     * @returns {boolean}
	     */
	    isCastingShadow(): boolean;
	    /**
	     *
	     * @param entity
	     * @returns {away.partition.NodeBase}
	     */
	    findPartitionForEntity(entity: IEntity): NodeBase;
	    /**
	     *
	     * @param traverser
	     */
	    acceptTraverser(traverser: ICollector): void;
	    /**
	     *
	     * @protected
	     */
	    _pCreateBoundsPrimitive(): IEntity;
	    /**
	     *
	     * @param node
	     * @internal
	     */
	    iAddNode(node: NodeBase): void;
	    /**
	     *
	     * @param node
	     * @internal
	     */
	    iRemoveNode(node: NodeBase): void;
	    private _iUpdateImplicitBoundsVisible(value);
	    /**
	     * @internal
	     */
	    _iIsBoundsVisible(): boolean;
	    _iUpdateEntityBounds(): void;
	}
	export = NodeBase;
	
}
declare module "awayjs-display/lib/partition/EntityNode" {
	import Plane3D = require("awayjs-core/lib/geom/Plane3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import NodeBase = require("awayjs-display/lib/partition/NodeBase");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.partition.EntityNode
	 */
	class EntityNode extends NodeBase {
	    private _entity;
	    _iUpdateQueueNext: EntityNode;
	    constructor(entity: IEntity);
	    entity: IEntity;
	    removeFromParent(): void;
	    /**
	     *
	     * @returns {boolean}
	     */
	    isCastingShadow(): boolean;
	    /**
	     *
	     * @param planes
	     * @param numPlanes
	     * @returns {boolean}
	     */
	    isInFrustum(planes: Plane3D[], numPlanes: number): boolean;
	    /**
	     * @inheritDoc
	     */
	    acceptTraverser(traverser: ICollector): void;
	    /**
	     * @inheritDoc
	     */
	    isIntersectingRay(rayPosition: Vector3D, rayDirection: Vector3D): boolean;
	    /**
	     *
	     * @protected
	     */
	    _pCreateBoundsPrimitive(): IEntity;
	}
	export = EntityNode;
	
}
declare module "awayjs-display/lib/partition/NullNode" {
	/**
	 * @class away.partition.NullNode
	 */
	class NullNode {
	    constructor();
	}
	export = NullNode;
	
}
declare module "awayjs-display/lib/partition/Partition" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import NodeBase = require("awayjs-display/lib/partition/NodeBase");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	/**
	 * @class away.partition.Partition
	 */
	class Partition {
	    _rootNode: NodeBase;
	    private _updatesMade;
	    private _updateQueue;
	    constructor(rootNode: NodeBase);
	    rootNode: NodeBase;
	    traverse(traverser: ICollector): void;
	    iMarkForUpdate(entity: DisplayObject): void;
	    iRemoveEntity(entity: DisplayObject): void;
	    private updateEntities();
	}
	export = Partition;
	
}
declare module "awayjs-display/lib/containers/DisplayObjectContainer" {
	import Point = require("awayjs-core/lib/geom/Point");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import Partition = require("awayjs-display/lib/partition/Partition");
	import Scene = require("awayjs-display/lib/containers/Scene");
	/**
	 * The DisplayObjectContainer class is the base class for all objects that can
	 * serve as display object containers on the display list. The display list
	 * manages all objects displayed in the Flash runtimes. Use the
	 * DisplayObjectContainer class to arrange the display objects in the display
	 * list. Each DisplayObjectContainer object has its own child list for
	 * organizing the z-order of the objects. The z-order is the front-to-back
	 * order that determines which object is drawn in front, which is behind, and
	 * so on.
	 *
	 * <p>DisplayObject is an abstract base class; therefore, you cannot call
	 * DisplayObject directly. Invoking <code>new DisplayObject()</code> throws an
	 * <code>ArgumentError</code> exception.</p>
	 * The DisplayObjectContainer class is an abstract base class for all objects
	 * that can contain child objects. It cannot be instantiated directly; calling
	 * the <code>new DisplayObjectContainer()</code> constructor throws an
	 * <code>ArgumentError</code> exception.
	 *
	 * <p>For more information, see the "Display Programming" chapter of the
	 * <i>ActionScript 3.0 Developer's Guide</i>.</p>
	 */
	class DisplayObjectContainer extends DisplayObject implements IAsset {
	    private _mouseChildren;
	    private _children;
	    _iIsRoot: boolean;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     * Determines whether or not the children of the object are mouse, or user
	     * input device, enabled. If an object is enabled, a user can interact with
	     * it by using a mouse or user input device. The default is
	     * <code>true</code>.
	     *
	     * <p>This property is useful when you create a button with an instance of
	     * the Sprite class(instead of using the SimpleButton class). When you use a
	     * Sprite instance to create a button, you can choose to decorate the button
	     * by using the <code>addChild()</code> method to add additional Sprite
	     * instances. This process can cause unexpected behavior with mouse events
	     * because the Sprite instances you add as children can become the target
	     * object of a mouse event when you expect the parent instance to be the
	     * target object. To ensure that the parent instance serves as the target
	     * objects for mouse events, you can set the <code>mouseChildren</code>
	     * property of the parent instance to <code>false</code>.</p>
	     *
	     * <p> No event is dispatched by setting this property. You must use the
	     * <code>addEventListener()</code> method to create interactive
	     * functionality.</p>
	     */
	    mouseChildren: boolean;
	    /**
	     * Returns the number of children of this object.
	     */
	    numChildren: number;
	    /**
	     * Determines whether the children of the object are tab enabled. Enables or
	     * disables tabbing for the children of the object. The default is
	     * <code>true</code>.
	     *
	     * <p><b>Note:</b> Do not use the <code>tabChildren</code> property with
	     * Flex. Instead, use the
	     * <code>mx.core.UIComponent.hasFocusableChildren</code> property.</p>
	     *
	     * @throws IllegalOperationError Calling this property of the Stage object
	     *                               throws an exception. The Stage object does
	     *                               not implement this property.
	     */
	    tabChildren: boolean;
	    /**
	     * Calling the <code>new DisplayObjectContainer()</code> constructor throws
	     * an <code>ArgumentError</code> exception. You <i>can</i>, however, call
	     * constructors for the following subclasses of DisplayObjectContainer:
	     * <ul>
	     *   <li><code>new Loader()</code></li>
	     *   <li><code>new Sprite()</code></li>
	     *   <li><code>new MovieClip()</code></li>
	     * </ul>
	     */
	    constructor();
	    /**
	     * Adds a child DisplayObject instance to this DisplayObjectContainer
	     * instance. The child is added to the front(top) of all other children in
	     * this DisplayObjectContainer instance.(To add a child to a specific index
	     * position, use the <code>addChildAt()</code> method.)
	     *
	     * <p>If you add a child object that already has a different display object
	     * container as a parent, the object is removed from the child list of the
	     * other display object container. </p>
	     *
	     * <p><b>Note:</b> The command <code>stage.addChild()</code> can cause
	     * problems with a published SWF file, including security problems and
	     * conflicts with other loaded SWF files. There is only one Stage within a
	     * Flash runtime instance, no matter how many SWF files you load into the
	     * runtime. So, generally, objects should not be added to the Stage,
	     * directly, at all. The only object the Stage should contain is the root
	     * object. Create a DisplayObjectContainer to contain all of the items on the
	     * display list. Then, if necessary, add that DisplayObjectContainer instance
	     * to the Stage.</p>
	     *
	     * @param child The DisplayObject instance to add as a child of this
	     *              DisplayObjectContainer instance.
	     * @return The DisplayObject instance that you pass in the <code>child</code>
	     *         parameter.
	     * @throws ArgumentError Throws if the child is the same as the parent. Also
	     *                       throws if the caller is a child(or grandchild etc.)
	     *                       of the child being added.
	     * @event added Dispatched when a display object is added to the display
	     *              list.
	     */
	    addChild(child: DisplayObject): DisplayObject;
	    /**
	     * Adds a child DisplayObject instance to this DisplayObjectContainer
	     * instance. The child is added at the index position specified. An index of
	     * 0 represents the back(bottom) of the display list for this
	     * DisplayObjectContainer object.
	     *
	     * <p>For example, the following example shows three display objects, labeled
	     * a, b, and c, at index positions 0, 2, and 1, respectively:</p>
	     *
	     * <p>If you add a child object that already has a different display object
	     * container as a parent, the object is removed from the child list of the
	     * other display object container. </p>
	     *
	     * @param child The DisplayObject instance to add as a child of this
	     *              DisplayObjectContainer instance.
	     * @param index The index position to which the child is added. If you
	     *              specify a currently occupied index position, the child object
	     *              that exists at that position and all higher positions are
	     *              moved up one position in the child list.
	     * @return The DisplayObject instance that you pass in the <code>child</code>
	     *         parameter.
	     * @throws ArgumentError Throws if the child is the same as the parent. Also
	     *                       throws if the caller is a child(or grandchild etc.)
	     *                       of the child being added.
	     * @throws RangeError    Throws if the index position does not exist in the
	     *                       child list.
	     * @event added Dispatched when a display object is added to the display
	     *              list.
	     */
	    addChildAt(child: DisplayObject, index: number): DisplayObject;
	    addChildren(...childarray: DisplayObject[]): void;
	    /**
	     *
	     */
	    clone(): DisplayObject;
	    /**
	     * Determines whether the specified display object is a child of the
	     * DisplayObjectContainer instance or the instance itself. The search
	     * includes the entire display list including this DisplayObjectContainer
	     * instance. Grandchildren, great-grandchildren, and so on each return
	     * <code>true</code>.
	     *
	     * @param child The child object to test.
	     * @return <code>true</code> if the <code>child</code> object is a child of
	     *         the DisplayObjectContainer or the container itself; otherwise
	     *         <code>false</code>.
	     */
	    contains(child: DisplayObject): boolean;
	    /**
	     *
	     */
	    disposeWithChildren(): void;
	    /**
	     * Returns the child display object instance that exists at the specified
	     * index.
	     *
	     * @param index The index position of the child object.
	     * @return The child display object at the specified index position.
	     * @throws RangeError    Throws if the index does not exist in the child
	     *                       list.
	     */
	    getChildAt(index: number): DisplayObject;
	    /**
	     * Returns the child display object that exists with the specified name. If
	     * more that one child display object has the specified name, the method
	     * returns the first object in the child list.
	     *
	     * <p>The <code>getChildAt()</code> method is faster than the
	     * <code>getChildByName()</code> method. The <code>getChildAt()</code> method
	     * accesses a child from a cached array, whereas the
	     * <code>getChildByName()</code> method has to traverse a linked list to
	     * access a child.</p>
	     *
	     * @param name The name of the child to return.
	     * @return The child display object with the specified name.
	     */
	    getChildByName(name: string): DisplayObject;
	    /**
	     * Returns the index position of a <code>child</code> DisplayObject instance.
	     *
	     * @param child The DisplayObject instance to identify.
	     * @return The index position of the child display object to identify.
	     * @throws ArgumentError Throws if the child parameter is not a child of this
	     *                       object.
	     */
	    getChildIndex(child: DisplayObject): number;
	    /**
	     * Returns an array of objects that lie under the specified point and are
	     * children(or grandchildren, and so on) of this DisplayObjectContainer
	     * instance. Any child objects that are inaccessible for security reasons are
	     * omitted from the returned array. To determine whether this security
	     * restriction affects the returned array, call the
	     * <code>areInaccessibleObjectsUnderPoint()</code> method.
	     *
	     * <p>The <code>point</code> parameter is in the coordinate space of the
	     * Stage, which may differ from the coordinate space of the display object
	     * container(unless the display object container is the Stage). You can use
	     * the <code>globalToLocal()</code> and the <code>localToGlobal()</code>
	     * methods to convert points between these coordinate spaces.</p>
	     *
	     * @param point The point under which to look.
	     * @return An array of objects that lie under the specified point and are
	     *         children(or grandchildren, and so on) of this
	     *         DisplayObjectContainer instance.
	     */
	    getObjectsUnderPoint(point: Point): DisplayObject[];
	    /**
	     * Removes the specified <code>child</code> DisplayObject instance from the
	     * child list of the DisplayObjectContainer instance. The <code>parent</code>
	     * property of the removed child is set to <code>null</code> , and the object
	     * is garbage collected if no other references to the child exist. The index
	     * positions of any display objects above the child in the
	     * DisplayObjectContainer are decreased by 1.
	     *
	     * <p>The garbage collector reallocates unused memory space. When a variable
	     * or object is no longer actively referenced or stored somewhere, the
	     * garbage collector sweeps through and wipes out the memory space it used to
	     * occupy if no other references to it exist.</p>
	     *
	     * @param child The DisplayObject instance to remove.
	     * @return The DisplayObject instance that you pass in the <code>child</code>
	     *         parameter.
	     * @throws ArgumentError Throws if the child parameter is not a child of this
	     *                       object.
	     */
	    removeChild(child: DisplayObject): DisplayObject;
	    /**
	     * Removes a child DisplayObject from the specified <code>index</code>
	     * position in the child list of the DisplayObjectContainer. The
	     * <code>parent</code> property of the removed child is set to
	     * <code>null</code>, and the object is garbage collected if no other
	     * references to the child exist. The index positions of any display objects
	     * above the child in the DisplayObjectContainer are decreased by 1.
	     *
	     * <p>The garbage collector reallocates unused memory space. When a variable
	     * or object is no longer actively referenced or stored somewhere, the
	     * garbage collector sweeps through and wipes out the memory space it used to
	     * occupy if no other references to it exist.</p>
	     *
	     * @param index The child index of the DisplayObject to remove.
	     * @return The DisplayObject instance that was removed.
	     * @throws RangeError    Throws if the index does not exist in the child
	     *                       list.
	     * @throws SecurityError This child display object belongs to a sandbox to
	     *                       which the calling object does not have access. You
	     *                       can avoid this situation by having the child movie
	     *                       call the <code>Security.allowDomain()</code> method.
	     */
	    removeChildAt(index: number): DisplayObject;
	    /**
	     * Removes all <code>child</code> DisplayObject instances from the child list
	     * of the DisplayObjectContainer instance. The <code>parent</code> property
	     * of the removed children is set to <code>null</code>, and the objects are
	     * garbage collected if no other references to the children exist.
	     *
	     * The garbage collector reallocates unused memory space. When a variable or
	     * object is no longer actively referenced or stored somewhere, the garbage
	     * collector sweeps through and wipes out the memory space it used to occupy
	     * if no other references to it exist.
	     *
	     * @param beginIndex The beginning position. A value smaller than 0 throws a RangeError.
	     * @param endIndex The ending position. A value smaller than 0 throws a RangeError.
	     * @throws RangeError    Throws if the beginIndex or endIndex positions do
	     *                       not exist in the child list.
	     */
	    removeChildren(beginIndex?: number, endIndex?: number): void;
	    /**
	     * Changes the position of an existing child in the display object container.
	     * This affects the layering of child objects. For example, the following
	     * example shows three display objects, labeled a, b, and c, at index
	     * positions 0, 1, and 2, respectively:
	     *
	     * <p>When you use the <code>setChildIndex()</code> method and specify an
	     * index position that is already occupied, the only positions that change
	     * are those in between the display object's former and new position. All
	     * others will stay the same. If a child is moved to an index LOWER than its
	     * current index, all children in between will INCREASE by 1 for their index
	     * reference. If a child is moved to an index HIGHER than its current index,
	     * all children in between will DECREASE by 1 for their index reference. For
	     * example, if the display object container in the previous example is named
	     * <code>container</code>, you can swap the position of the display objects
	     * labeled a and b by calling the following code:</p>
	     *
	     * <p>This code results in the following arrangement of objects:</p>
	     *
	     * @param child The child DisplayObject instance for which you want to change
	     *              the index number.
	     * @param index The resulting index number for the <code>child</code> display
	     *              object.
	     * @throws ArgumentError Throws if the child parameter is not a child of this
	     *                       object.
	     * @throws RangeError    Throws if the index does not exist in the child
	     *                       list.
	     */
	    setChildIndex(child: DisplayObject, index: number): void;
	    /**
	     * Swaps the z-order (front-to-back order) of the two specified child
	     * objects. All other child objects in the display object container remain in
	     * the same index positions.
	     *
	     * @param child1 The first child object.
	     * @param child2 The second child object.
	     * @throws ArgumentError Throws if either child parameter is not a child of
	     *                       this object.
	     */
	    swapChildren(child1: DisplayObject, child2: DisplayObject): void;
	    /**
	     * Swaps the z-order(front-to-back order) of the child objects at the two
	     * specified index positions in the child list. All other child objects in
	     * the display object container remain in the same index positions.
	     *
	     * @param index1 The index position of the first child object.
	     * @param index2 The index position of the second child object.
	     * @throws RangeError If either index does not exist in the child list.
	     */
	    swapChildrenAt(index1: number, index2: number): void;
	    /**
	     * @protected
	     */
	    pInvalidateSceneTransform(): void;
	    /**
	     * @protected
	     */
	    _pUpdateScene(value: Scene): void;
	    /**
	     * @protected
	     */
	    _pUpdateImplicitMouseEnabled(value: boolean): void;
	    /**
	     * @protected
	     */
	    _pUpdateImplicitVisibility(value: boolean): void;
	    /**
	     * @protected
	     */
	    _pUpdateImplicitPartition(value: Partition): void;
	    /**
	     * @private
	     *
	     * @param child
	     */
	    private removeChildInternal(child);
	}
	export = DisplayObjectContainer;
	
}
declare module "awayjs-display/lib/controllers/ControllerBase" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	class ControllerBase {
	    _pAutoUpdate: boolean;
	    _pTargetObject: DisplayObject;
	    constructor(targetObject?: DisplayObject);
	    pNotifyUpdate(): void;
	    targetObject: DisplayObject;
	    autoUpdate: boolean;
	    update(interpolate?: boolean): void;
	}
	export = ControllerBase;
	
}
declare module "awayjs-display/lib/base/AlignmentMode" {
	/**
	 *
	 */
	class AlignmentMode {
	    /**
	     *
	     */
	    static REGISTRATION_POINT: string;
	    /**
	     *
	     */
	    static PIVOT_POINT: string;
	}
	export = AlignmentMode;
	
}
declare module "awayjs-display/lib/containers/Loader" {
	import AssetLoaderContext = require("awayjs-core/lib/library/AssetLoaderContext");
	import AssetLoaderToken = require("awayjs-core/lib/library/AssetLoaderToken");
	import URLRequest = require("awayjs-core/lib/net/URLRequest");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import LoaderInfo = require("awayjs-display/lib/base/LoaderInfo");
	/**
	 * The Loader class is used to load SWF files or image(JPG, PNG, or GIF)
	 * files. Use the <code>load()</code> method to initiate loading. The loaded
	 * display object is added as a child of the Loader object.
	 *
	 * <p>Use the URLLoader class to load text or binary data.</p>
	 *
	 * <p>The Loader class overrides the following methods that it inherits,
	 * because a Loader object can only have one child display object - the
	 * display object that it loads. Calling the following methods throws an
	 * exception: <code>addChild()</code>, <code>addChildAt()</code>,
	 * <code>removeChild()</code>, <code>removeChildAt()</code>, and
	 * <code>setChildIndex()</code>. To remove a loaded display object, you must
	 * remove the <i>Loader</i> object from its parent DisplayObjectContainer
	 * child array. </p>
	 *
	 * <p><b>Note:</b> The ActionScript 2.0 MovieClipLoader and LoadVars classes
	 * are not used in ActionScript 3.0. The Loader and URLLoader classes replace
	 * them.</p>
	 *
	 * <p>When you use the Loader class, consider the Flash Player and Adobe AIR
	 * security model: </p>
	 *
	 * <ul>
	 *   <li>You can load content from any accessible source. </li>
	 *   <li>Loading is not allowed if the calling SWF file is in a network
	 * sandbox and the file to be loaded is local. </li>
	 *   <li>If the loaded content is a SWF file written with ActionScript 3.0, it
	 * cannot be cross-scripted by a SWF file in another security sandbox unless
	 * that cross-scripting arrangement was approved through a call to the
	 * <code>System.allowDomain()</code> or the
	 * <code>System.allowInsecureDomain()</code> method in the loaded content
	 * file.</li>
	 *   <li>If the loaded content is an AVM1 SWF file(written using ActionScript
	 * 1.0 or 2.0), it cannot be cross-scripted by an AVM2 SWF file(written using
	 * ActionScript 3.0). However, you can communicate between the two SWF files
	 * by using the LocalConnection class.</li>
	 *   <li>If the loaded content is an image, its data cannot be accessed by a
	 * SWF file outside of the security sandbox, unless the domain of that SWF
	 * file was included in a URL policy file at the origin domain of the
	 * image.</li>
	 *   <li>Movie clips in the local-with-file-system sandbox cannot script movie
	 * clips in the local-with-networking sandbox, and the reverse is also
	 * prevented. </li>
	 *   <li>You cannot connect to commonly reserved ports. For a complete list of
	 * blocked ports, see "Restricting Networking APIs" in the <i>ActionScript 3.0
	 * Developer's Guide</i>. </li>
	 * </ul>
	 *
	 * <p>However, in AIR, content in the <code>application</code> security
	 * sandbox(content installed with the AIR application) are not restricted by
	 * these security limitations.</p>
	 *
	 * <p>For more information related to security, see the Flash Player Developer
	 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 *
	 * <p>When loading a SWF file from an untrusted source(such as a domain other
	 * than that of the Loader object's root SWF file), you may want to define a
	 * mask for the Loader object, to prevent the loaded content(which is a child
	 * of the Loader object) from drawing to portions of the Stage outside of that
	 * mask, as shown in the following code:</p>
	 */
	class Loader extends DisplayObjectContainer {
	    /**
	     * Dispatched when any asset finishes parsing. Also see specific events for each
	     * individual asset type (meshes, materials et c.)
	     *
	     * @eventType AssetEvent
	     */
	    /**
	     * Dispatched when a full resource (including dependencies) finishes loading.
	     *
	     * @eventType LoaderEvent
	     */
	    private _loadingSessions;
	    private _useAssetLib;
	    private _assetLibId;
	    private _onResourceCompleteDelegate;
	    private _onAssetCompleteDelegate;
	    private _content;
	    private _contentLoaderInfo;
	    /**
	     * Contains the root display object of the SWF file or image(JPG, PNG, or
	     * GIF) file that was loaded by using the <code>load()</code> or
	     * <code>loadBytes()</code> methods.
	     *
	     * @throws SecurityError The loaded SWF file or image file belongs to a
	     *                       security sandbox to which you do not have access.
	     *                       For a loaded SWF file, you can avoid this situation
	     *                       by having the file call the
	     *                       <code>Security.allowDomain()</code> method or by
	     *                       having the loading file specify a
	     *                       <code>loaderContext</code> parameter with its
	     *                       <code>securityDomain</code> property set to
	     *                       <code>SecurityDomain.currentDomain</code> when you
	     *                       call the <code>load()</code> or
	     *                       <code>loadBytes()</code> method.
	     */
	    content: DisplayObject;
	    /**
	     * Returns a LoaderInfo object corresponding to the object being loaded.
	     * LoaderInfo objects are shared between the Loader object and the loaded
	     * content object. The LoaderInfo object supplies loading progress
	     * information and statistics about the loaded file.
	     *
	     * <p>Events related to the load are dispatched by the LoaderInfo object
	     * referenced by the <code>contentLoaderInfo</code> property of the Loader
	     * object. The <code>contentLoaderInfo</code> property is set to a valid
	     * LoaderInfo object, even before the content is loaded, so that you can add
	     * event listeners to the object prior to the load.</p>
	     *
	     * <p>To detect uncaught errors that happen in a loaded SWF, use the
	     * <code>Loader.uncaughtErrorEvents</code> property, not the
	     * <code>Loader.contentLoaderInfo.uncaughtErrorEvents</code> property.</p>
	     */
	    contentLoaderInfo: LoaderInfo;
	    /**
	     * Creates a Loader object that you can use to load files, such as SWF, JPEG,
	     * GIF, or PNG files. Call the <code>load()</code> method to load the asset
	     * as a child of the Loader instance. You can then add the Loader object to
	     * the display list(for instance, by using the <code>addChild()</code>
	     * method of a DisplayObjectContainer instance). The asset appears on the
	     * Stage as it loads.
	     *
	     * <p>You can also use a Loader instance "offlist," that is without adding it
	     * to a display object container on the display list. In this mode, the
	     * Loader instance might be used to load a SWF file that contains additional
	     * modules of an application. </p>
	     *
	     * <p>To detect when the SWF file is finished loading, you can use the events
	     * of the LoaderInfo object associated with the
	     * <code>contentLoaderInfo</code> property of the Loader object. At that
	     * point, the code in the module SWF file can be executed to initialize and
	     * start the module. In the offlist mode, a Loader instance might also be
	     * used to load a SWF file that contains components or media assets. Again,
	     * you can use the LoaderInfo object event notifications to detect when the
	     * components are finished loading. At that point, the application can start
	     * using the components and media assets in the library of the SWF file by
	     * instantiating the ActionScript 3.0 classes that represent those components
	     * and assets.</p>
	     *
	     * <p>To determine the status of a Loader object, monitor the following
	     * events that the LoaderInfo object associated with the
	     * <code>contentLoaderInfo</code> property of the Loader object:</p>
	     *
	     * <ul>
	     *   <li>The <code>open</code> event is dispatched when loading begins.</li>
	     *   <li>The <code>ioError</code> or <code>securityError</code> event is
	     * dispatched if the file cannot be loaded or if an error occured during the
	     * load process. </li>
	     *   <li>The <code>progress</code> event fires continuously while the file is
	     * being loaded.</li>
	     *   <li>The <code>complete</code> event is dispatched when a file completes
	     * downloading, but before the loaded movie clip's methods and properties are
	     * available. </li>
	     *   <li>The <code>init</code> event is dispatched after the properties and
	     * methods of the loaded SWF file are accessible, so you can begin
	     * manipulating the loaded SWF file. This event is dispatched before the
	     * <code>complete</code> handler. In streaming SWF files, the
	     * <code>init</code> event can occur significantly earlier than the
	     * <code>complete</code> event. For most purposes, use the <code>init</code>
	     * handler.</li>
	     * </ul>
	     */
	    constructor(useAssetLibrary?: boolean, assetLibraryId?: string);
	    /**
	     * Cancels a <code>load()</code> method operation that is currently in
	     * progress for the Loader instance.
	     *
	     */
	    close(): void;
	    /**
	     * Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an
	     * object that is a child of this Loader object. If you load an animated GIF
	     * file, only the first frame is displayed. As the Loader object can contain
	     * only a single child, issuing a subsequent <code>load()</code> request
	     * terminates the previous request, if still pending, and commences a new
	     * load.
	     *
	     * <p><b>Note</b>: In AIR 1.5 and Flash Player 10, the maximum size for a
	     * loaded image is 8,191 pixels in width or height, and the total number of
	     * pixels cannot exceed 16,777,215 pixels.(So, if an loaded image is 8,191
	     * pixels wide, it can only be 2,048 pixels high.) In Flash Player 9 and
	     * earlier and AIR 1.1 and earlier, the limitation is 2,880 pixels in height
	     * and 2,880 pixels in width.</p>
	     *
	     * <p>A SWF file or image loaded into a Loader object inherits the position,
	     * rotation, and scale properties of the parent display objects of the Loader
	     * object. </p>
	     *
	     * <p>Use the <code>unload()</code> method to remove movies or images loaded
	     * with this method, or to cancel a load operation that is in progress.</p>
	     *
	     * <p>You can prevent a SWF file from using this method by setting the
	     * <code>allowNetworking</code> parameter of the the <code>object</code> and
	     * <code>embed</code> tags in the HTML page that contains the SWF
	     * content.</p>
	     *
	     * <p>When you use this method, consider the Flash Player security model,
	     * which is described in the Loader class description. </p>
	     *
	     * <p> In Flash Player 10 and later, if you use a multipart Content-Type(for
	     * example "multipart/form-data") that contains an upload(indicated by a
	     * "filename" parameter in a "content-disposition" header within the POST
	     * body), the POST operation is subject to the security rules applied to
	     * uploads:</p>
	     *
	     * <ul>
	     *   <li>The POST operation must be performed in response to a user-initiated
	     * action, such as a mouse click or key press.</li>
	     *   <li>If the POST operation is cross-domain(the POST target is not on the
	     * same server as the SWF file that is sending the POST request), the target
	     * server must provide a URL policy file that permits cross-domain
	     * access.</li>
	     * </ul>
	     *
	     * <p>Also, for any multipart Content-Type, the syntax must be valid
	     * (according to the RFC2046 standard). If the syntax appears to be invalid,
	     * the POST operation is subject to the security rules applied to
	     * uploads.</p>
	     *
	     * <p>For more information related to security, see the Flash Player
	     * Developer Center Topic: <a
	     * href="http://www.adobe.com/go/devnet_security_en"
	     * scope="external">Security</a>.</p>
	     *
	     * @param request The absolute or relative URL of the SWF, JPEG, GIF, or PNG
	     *                file to be loaded. A relative path must be relative to the
	     *                main SWF file. Absolute URLs must include the protocol
	     *                reference, such as http:// or file:///. Filenames cannot
	     *                include disk drive specifications.
	     * @param context A LoaderContext object, which has properties that define
	     *                the following:
	     *                <ul>
	     *                  <li>Whether or not to check for the existence of a policy
	     *                file upon loading the object</li>
	     *                  <li>The ApplicationDomain for the loaded object</li>
	     *                  <li>The SecurityDomain for the loaded object</li>
	     *                  <li>The ImageDecodingPolicy for the loaded image
	     *                object</li>
	     *                </ul>
	     *
	     *                <p>If the <code>context</code> parameter is not specified
	     *                or refers to a null object, the loaded content remains in
	     *                its own security domain.</p>
	     *
	     *                <p>For complete details, see the description of the
	     *                properties in the <a
	     *                href="../system/LoaderContext.html">LoaderContext</a>
	     *                class.</p>
	     * @param ns      An optional namespace string under which the file is to be
	     *                loaded, allowing the differentiation of two resources with
	     *                identical assets.
	     * @param parser  An optional parser object for translating the loaded data
	     *                into a usable resource. If not provided, AssetLoader will
	     *                attempt to auto-detect the file type.
	     * @throws IOError               The <code>digest</code> property of the
	     *                               <code>request</code> object is not
	     *                               <code>null</code>. You should only set the
	     *                               <code>digest</code> property of a URLRequest
	     *                               object when calling the
	     *                               <code>URLLoader.load()</code> method when
	     *                               loading a SWZ file(an Adobe platform
	     *                               component).
	     * @throws IllegalOperationError If the <code>requestedContentParent</code>
	     *                               property of the <code>context</code>
	     *                               parameter is a <code>Loader</code>.
	     * @throws IllegalOperationError If the <code>LoaderContext.parameters</code>
	     *                               parameter is set to non-null and has some
	     *                               values which are not Strings.
	     * @throws SecurityError         The value of
	     *                               <code>LoaderContext.securityDomain</code>
	     *                               must be either <code>null</code> or
	     *                               <code>SecurityDomain.currentDomain</code>.
	     *                               This reflects the fact that you can only
	     *                               place the loaded media in its natural
	     *                               security sandbox or your own(the latter
	     *                               requires a policy file).
	     * @throws SecurityError         Local SWF files may not set
	     *                               LoaderContext.securityDomain to anything
	     *                               other than <code>null</code>. It is not
	     *                               permitted to import non-local media into a
	     *                               local sandbox, or to place other local media
	     *                               in anything other than its natural sandbox.
	     * @throws SecurityError         You cannot connect to commonly reserved
	     *                               ports. For a complete list of blocked ports,
	     *                               see "Restricting Networking APIs" in the
	     *                               <i>ActionScript 3.0 Developer's Guide</i>.
	     * @throws SecurityError         If the <code>applicationDomain</code> or
	     *                               <code>securityDomain</code> properties of
	     *                               the <code>context</code> parameter are from
	     *                               a disallowed domain.
	     * @throws SecurityError         If a local SWF file is attempting to use the
	     *                               <code>securityDomain</code> property of the
	     *                               <code>context</code> parameter.
	     * @event asyncError    Dispatched by the <code>contentLoaderInfo</code>
	     *                      object if the
	     *                      <code>LoaderContext.requestedContentParent</code>
	     *                      property has been specified and it is not possible to
	     *                      add the loaded content as a child to the specified
	     *                      DisplayObjectContainer. This could happen if the
	     *                      loaded content is a
	     *                      <code>flash.display.AVM1Movie</code> or if the
	     *                      <code>addChild()</code> call to the
	     *                      requestedContentParent throws an error.
	     * @event complete      Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the file has completed loading. The
	     *                      <code>complete</code> event is always dispatched
	     *                      after the <code>init</code> event.
	     * @event httpStatus    Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when a network request is made over HTTP and
	     *                      Flash Player can detect the HTTP status code.
	     * @event init          Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the properties and methods of the loaded
	     *                      SWF file are accessible. The <code>init</code> event
	     *                      always precedes the <code>complete</code> event.
	     * @event ioError       Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when an input or output error occurs that
	     *                      causes a load operation to fail.
	     * @event open          Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the loading operation starts.
	     * @event progress      Dispatched by the <code>contentLoaderInfo</code>
	     *                      object as data is received while load operation
	     *                      progresses.
	     * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	     *                      object if a SWF file in the local-with-filesystem
	     *                      sandbox attempts to load content in the
	     *                      local-with-networking sandbox, or vice versa.
	     * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	     *                      object if the
	     *                      <code>LoaderContext.requestedContentParent</code>
	     *                      property has been specified and the security sandbox
	     *                      of the
	     *                      <code>LoaderContext.requestedContentParent</code>
	     *                      does not have access to the loaded SWF.
	     * @event unload        Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when a loaded object is removed.
	     */
	    load(request: URLRequest, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     * Loads from binary data stored in a ByteArray object.
	     *
	     * <p>The <code>loadBytes()</code> method is asynchronous. You must wait for
	     * the "init" event before accessing the properties of a loaded object.</p>
	     *
	     * <p>When you use this method, consider the Flash Player security model,
	     * which is described in the Loader class description. </p>
	     *
	     * @param bytes   A ByteArray object. The contents of the ByteArray can be
	     *                any of the file formats supported by the Loader class: SWF,
	     *                GIF, JPEG, or PNG.
	     * @param context A LoaderContext object. Only the
	     *                <code>applicationDomain</code> property of the
	     *                LoaderContext object applies; the
	     *                <code>checkPolicyFile</code> and
	     *                <code>securityDomain</code> properties of the LoaderContext
	     *                object do not apply.
	     *
	     *                <p>If the <code>context</code> parameter is not specified
	     *                or refers to a null object, the content is loaded into the
	     *                current security domain -  a process referred to as "import
	     *                loading" in Flash Player security documentation.
	     *                Specifically, if the loading SWF file trusts the remote SWF
	     *                by incorporating the remote SWF into its code, then the
	     *                loading SWF can import it directly into its own security
	     *                domain.</p>
	     *
	     *                <p>For more information related to security, see the Flash
	     *                Player Developer Center Topic: <a
	     *                href="http://www.adobe.com/go/devnet_security_en"
	     *                scope="external">Security</a>.</p>
	     * @throws ArgumentError         If the <code>length</code> property of the
	     *                               ByteArray object is not greater than 0.
	     * @throws IllegalOperationError If the <code>checkPolicyFile</code> or
	     *                               <code>securityDomain</code> property of the
	     *                               <code>context</code> parameter are non-null.
	     * @throws IllegalOperationError If the <code>requestedContentParent</code>
	     *                               property of the <code>context</code>
	     *                               parameter is a <code>Loader</code>.
	     * @throws IllegalOperationError If the <code>LoaderContext.parameters</code>
	     *                               parameter is set to non-null and has some
	     *                               values which are not Strings.
	     * @throws SecurityError         If the provided
	     *                               <code>applicationDomain</code> property of
	     *                               the <code>context</code> property is from a
	     *                               disallowed domain.
	     * @throws SecurityError         You cannot connect to commonly reserved
	     *                               ports. For a complete list of blocked ports,
	     *                               see "Restricting Networking APIs" in the
	     *                               <i>ActionScript 3.0 Developer's Guide</i>.
	     * @event asyncError    Dispatched by the <code>contentLoaderInfo</code>
	     *                      object if the
	     *                      <code>LoaderContext.requestedContentParent</code>
	     *                      property has been specified and it is not possible to
	     *                      add the loaded content as a child to the specified
	     *                      DisplayObjectContainer. This could happen if the
	     *                      loaded content is a
	     *                      <code>flash.display.AVM1Movie</code> or if the
	     *                      <code>addChild()</code> call to the
	     *                      requestedContentParent throws an error.
	     * @event complete      Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the operation is complete. The
	     *                      <code>complete</code> event is always dispatched
	     *                      after the <code>init</code> event.
	     * @event init          Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the properties and methods of the loaded
	     *                      data are accessible. The <code>init</code> event
	     *                      always precedes the <code>complete</code> event.
	     * @event ioError       Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the runtime cannot parse the data in the
	     *                      byte array.
	     * @event open          Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when the operation starts.
	     * @event progress      Dispatched by the <code>contentLoaderInfo</code>
	     *                      object as data is transfered in memory.
	     * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	     *                      object if the
	     *                      <code>LoaderContext.requestedContentParent</code>
	     *                      property has been specified and the security sandbox
	     *                      of the
	     *                      <code>LoaderContext.requestedContentParent</code>
	     *                      does not have access to the loaded SWF.
	     * @event unload        Dispatched by the <code>contentLoaderInfo</code>
	     *                      object when a loaded object is removed.
	     */
	    loadData(data: any, context?: AssetLoaderContext, ns?: string, parser?: ParserBase): AssetLoaderToken;
	    /**
	     * Removes a child of this Loader object that was loaded by using the
	     * <code>load()</code> method. The <code>property</code> of the associated
	     * LoaderInfo object is reset to <code>null</code>. The child is not
	     * necessarily destroyed because other objects might have references to it;
	     * however, it is no longer a child of the Loader object.
	     *
	     * <p>As a best practice, before you unload a child SWF file, you should
	     * explicitly close any streams in the child SWF file's objects, such as
	     * LocalConnection, NetConnection, NetStream, and Sound objects. Otherwise,
	     * audio in the child SWF file might continue to play, even though the child
	     * SWF file was unloaded. To close streams in the child SWF file, add an
	     * event listener to the child that listens for the <code>unload</code>
	     * event. When the parent calls <code>Loader.unload()</code>, the
	     * <code>unload</code> event is dispatched to the child. The following code
	     * shows how you might do this:</p>
	     * <pre xml:space="preserve"> public closeAllStreams(evt:Event) {
	     * myNetStream.close(); mySound.close(); myNetConnection.close();
	     * myLocalConnection.close(); }
	     * myMovieClip.loaderInfo.addEventListener(Event.UNLOAD,
	     * closeAllStreams);</pre>
	     *
	     */
	    unload(): void;
	    /**
	     * Enables a specific parser.
	     * When no specific parser is set for a loading/parsing opperation,
	     * loader3d can autoselect the correct parser to use.
	     * A parser must have been enabled, to be considered when autoselecting the parser.
	     *
	     * @param parserClass The parser class to enable.
	     * @see away.parsers.Parsers
	     */
	    static enableParser(parserClass: Object): void;
	    /**
	     * Enables a list of parsers.
	     * When no specific parser is set for a loading/parsing opperation,
	     * loader3d can autoselect the correct parser to use.
	     * A parser must have been enabled, to be considered when autoselecting the parser.
	     *
	     * @param parserClasses A Vector of parser classes to enable.
	     * @see away.parsers.Parsers
	     */
	    static enableParsers(parserClasses: Object[]): void;
	    private removeListeners(dispatcher);
	    private onAssetComplete(event);
	    /**
	     * Called when an error occurs during loading
	     */
	    private onLoadError(event);
	    /**
	     * Called when a an error occurs during parsing
	     */
	    private onParseError(event);
	    /**
	     * Called when the resource and all of its dependencies was retrieved.
	     */
	    private onResourceComplete(event);
	}
	export = Loader;
	
}
declare module "awayjs-display/lib/base/LoaderInfo" {
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import Loader = require("awayjs-display/lib/containers/Loader");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	/**
	 * The LoaderInfo class provides information about a loaded SWF file or a
	 * loaded image file(JPEG, GIF, or PNG). LoaderInfo objects are available for
	 * any display object. The information provided includes load progress, the
	 * URLs of the loader and loaded content, the number of bytes total for the
	 * media, and the nominal height and width of the media.
	 *
	 * <p>You can access LoaderInfo objects in two ways: </p>
	 *
	 * <ul>
	 *   <li>The <code>contentLoaderInfo</code> property of a flash.display.Loader
	 * object -  The <code>contentLoaderInfo</code> property is always available
	 * for any Loader object. For a Loader object that has not called the
	 * <code>load()</code> or <code>loadBytes()</code> method, or that has not
	 * sufficiently loaded, attempting to access many of the properties of the
	 * <code>contentLoaderInfo</code> property throws an error.</li>
	 *   <li>The <code>loaderInfo</code> property of a display object. </li>
	 * </ul>
	 *
	 * <p>The <code>contentLoaderInfo</code> property of a Loader object provides
	 * information about the content that the Loader object is loading, whereas
	 * the <code>loaderInfo</code> property of a DisplayObject provides
	 * information about the root SWF file for that display object. </p>
	 *
	 * <p>When you use a Loader object to load a display object(such as a SWF
	 * file or a bitmap), the <code>loaderInfo</code> property of the display
	 * object is the same as the <code>contentLoaderInfo</code> property of the
	 * Loader object(<code>DisplayObject.loaderInfo =
	 * Loader.contentLoaderInfo</code>). Because the instance of the main class of
	 * the SWF file has no Loader object, the <code>loaderInfo</code> property is
	 * the only way to access the LoaderInfo for the instance of the main class of
	 * the SWF file.</p>
	 *
	 * <p>The following diagram shows the different uses of the LoaderInfo
	 * object - for the instance of the main class of the SWF file, for the
	 * <code>contentLoaderInfo</code> property of a Loader object, and for the
	 * <code>loaderInfo</code> property of a loaded object:</p>
	 *
	 * <p>When a loading operation is not complete, some properties of the
	 * <code>contentLoaderInfo</code> property of a Loader object are not
	 * available. You can obtain some properties, such as
	 * <code>bytesLoaded</code>, <code>bytesTotal</code>, <code>url</code>,
	 * <code>loaderURL</code>, and <code>applicationDomain</code>. When the
	 * <code>loaderInfo</code> object dispatches the <code>init</code> event, you
	 * can access all properties of the <code>loaderInfo</code> object and the
	 * loaded image or SWF file.</p>
	 *
	 * <p><b>Note:</b> All properties of LoaderInfo objects are read-only.</p>
	 *
	 * <p>The <code>EventDispatcher.dispatchEvent()</code> method is not
	 * applicable to LoaderInfo objects. If you call <code>dispatchEvent()</code>
	 * on a LoaderInfo object, an IllegalOperationError exception is thrown.</p>
	 *
	 * @event complete   Dispatched when data has loaded successfully. In other
	 *                   words, it is dispatched when all the content has been
	 *                   downloaded and the loading has finished. The
	 *                   <code>complete</code> event is always dispatched after
	 *                   the <code>init</code> event. The <code>init</code> event
	 *                   is dispatched when the object is ready to access, though
	 *                   the content may still be downloading.
	 * @event httpStatus Dispatched when a network request is made over HTTP and
	 *                   an HTTP status code can be detected.
	 * @event init       Dispatched when the properties and methods of a loaded
	 *                   SWF file are accessible and ready for use. The content,
	 *                   however, can still be downloading. A LoaderInfo object
	 *                   dispatches the <code>init</code> event when the following
	 *                   conditions exist:
	 *                   <ul>
	 *                     <li>All properties and methods associated with the
	 *                   loaded object and those associated with the LoaderInfo
	 *                   object are accessible.</li>
	 *                     <li>The constructors for all child objects have
	 *                   completed.</li>
	 *                     <li>All ActionScript code in the first frame of the
	 *                   loaded SWF's main timeline has been executed.</li>
	 *                   </ul>
	 *
	 *                   <p>For example, an <code>Event.INIT</code> is dispatched
	 *                   when the first frame of a movie or animation is loaded.
	 *                   The movie is then accessible and can be added to the
	 *                   display list. The complete movie, however, can take
	 *                   longer to download. The <code>Event.COMPLETE</code> is
	 *                   only dispatched once the full movie is loaded.</p>
	 *
	 *                   <p>The <code>init</code> event always precedes the
	 *                   <code>complete</code> event.</p>
	 * @event ioError    Dispatched when an input or output error occurs that
	 *                   causes a load operation to fail.
	 * @event open       Dispatched when a load operation starts.
	 * @event progress   Dispatched when data is received as the download
	 *                   operation progresses.
	 * @event unload     Dispatched by a LoaderInfo object whenever a loaded
	 *                   object is removed by using the <code>unload()</code>
	 *                   method of the Loader object, or when a second load is
	 *                   performed by the same Loader object and the original
	 *                   content is removed prior to the load beginning.
	 */
	class LoaderInfo extends EventDispatcher {
	    private _bytes;
	    private _bytesLoaded;
	    private _bytesTotal;
	    private _content;
	    private _contentType;
	    private _loader;
	    private _url;
	    /**
	     * The bytes associated with a LoaderInfo object.
	     *
	     * @throws SecurityError If the object accessing this API is prevented from
	     *                       accessing the loaded object due to security
	     *                       restrictions. This situation can occur, for
	     *                       instance, when a Loader object attempts to access
	     *                       the <code>contentLoaderInfo.content</code> property
	     *                       and it is not granted security permission to access
	     *                       the loaded content.
	     *
	     *                       <p>For more information related to security, see the
	     *                       Flash Player Developer Center Topic: <a
	     *                       href="http://www.adobe.com/go/devnet_security_en"
	     *                       scope="external">Security</a>.</p>
	     */
	    bytes: ByteArray;
	    /**
	     * The number of bytes that are loaded for the media. When this number equals
	     * the value of <code>bytesTotal</code>, all of the bytes are loaded.
	     */
	    bytesLoaded: number;
	    /**
	     * The number of compressed bytes in the entire media file.
	     *
	     * <p>Before the first <code>progress</code> event is dispatched by this
	     * LoaderInfo object's corresponding Loader object, <code>bytesTotal</code>
	     * is 0. After the first <code>progress</code> event from the Loader object,
	     * <code>bytesTotal</code> reflects the actual number of bytes to be
	     * downloaded.</p>
	     */
	    bytesTotal: number;
	    /**
	     * The loaded object associated with this LoaderInfo object.
	     *
	     * @throws SecurityError If the object accessing this API is prevented from
	     *                       accessing the loaded object due to security
	     *                       restrictions. This situation can occur, for
	     *                       instance, when a Loader object attempts to access
	     *                       the <code>contentLoaderInfo.content</code> property
	     *                       and it is not granted security permission to access
	     *                       the loaded content.
	     *
	     *                       <p>For more information related to security, see the
	     *                       Flash Player Developer Center Topic: <a
	     *                       href="http://www.adobe.com/go/devnet_security_en"
	     *                       scope="external">Security</a>.</p>
	     */
	    content: DisplayObject;
	    /**
	     * The MIME type of the loaded file. The value is <code>null</code> if not
	     * enough of the file has loaded in order to determine the type. The
	     * following list gives the possible values:
	     * <ul>
	     *   <li><code>"application/x-shockwave-flash"</code></li>
	     *   <li><code>"image/jpeg"</code></li>
	     *   <li><code>"image/gif"</code></li>
	     *   <li><code>"image/png"</code></li>
	     * </ul>
	     */
	    contentType: string;
	    /**
	     * The Loader object associated with this LoaderInfo object. If this
	     * LoaderInfo object is the <code>loaderInfo</code> property of the instance
	     * of the main class of the SWF file, no Loader object is associated.
	     *
	     * @throws SecurityError If the object accessing this API is prevented from
	     *                       accessing the Loader object because of security
	     *                       restrictions. This can occur, for instance, when a
	     *                       loaded SWF file attempts to access its
	     *                       <code>loaderInfo.loader</code> property and it is
	     *                       not granted security permission to access the
	     *                       loading SWF file.
	     *
	     *                       <p>For more information related to security, see the
	     *                       Flash Player Developer Center Topic: <a
	     *                       href="http://www.adobe.com/go/devnet_security_en"
	     *                       scope="external">Security</a>.</p>
	     */
	    loader: Loader;
	    /**
	     * The URL of the media being loaded.
	     *
	     * <p>Before the first <code>progress</code> event is dispatched by this
	     * LoaderInfo object's corresponding Loader object, the value of the
	     * <code>url</code> property might reflect only the initial URL specified in
	     * the call to the <code>load()</code> method of the Loader object. After the
	     * first <code>progress</code> event, the <code>url</code> property reflects
	     * the media's final URL, after any redirects and relative URLs are
	     * resolved.</p>
	     *
	     * <p>In some cases, the value of the <code>url</code> property is truncated;
	     * see the <code>isURLInaccessible</code> property for details.</p>
	     */
	    url: string;
	}
	export = LoaderInfo;
	
}
declare module "awayjs-display/lib/base/OrientationMode" {
	class OrientationMode {
	    /**
	     *
	     */
	    static DEFAULT: string;
	    /**
	     *
	     */
	    static CAMERA_PLANE: string;
	    /**
	     *
	     */
	    static CAMERA_POSITION: string;
	}
	export = OrientationMode;
	
}
declare module "awayjs-display/lib/base/IBitmapDrawable" {
	/**
	 * The IBitmapDrawable interface is implemented by objects that can be passed as the
	 * source parameter of the <code>draw()</code> method of the BitmapData class. These
	 * objects are of type BitmapData or DisplayObject.
	 *
	 * @see away.base.BitmapData#draw()
	 * @see away.base.BitmapData
	 * @see away.base.DisplayObject
	 */
	interface IBitmapDrawable {
	}
	export = IBitmapDrawable;
	
}
declare module "awayjs-display/lib/pick/PickingCollisionVO" {
	import Point = require("awayjs-core/lib/geom/Point");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	/**
	 * Value object for a picking collision returned by a picking collider. Created as unique objects on display objects
	 *
	 * @see away.base.DisplayObject#pickingCollisionVO
	 * @see away.core.pick.IPickingCollider
	 *
	 * @class away.pick.PickingCollisionVO
	 */
	class PickingCollisionVO {
	    /**
	     * The display object to which this collision object belongs.
	     */
	    displayObject: DisplayObject;
	    /**
	     * The local position of the collision on the entity's surface.
	     */
	    localPosition: Vector3D;
	    /**
	     * The local normal vector at the position of the collision.
	     */
	    localNormal: Vector3D;
	    /**
	     * The uv coordinate at the position of the collision.
	     */
	    uv: Point;
	    /**
	     * The index of the face where the event took pl ace.
	     */
	    index: number;
	    /**
	     * The index of the subGeometry where the event took place.
	     */
	    /**
	     * The starting position of the colliding ray in local coordinates.
	     */
	    localRayPosition: Vector3D;
	    /**
	     * The direction of the colliding ray in local coordinates.
	     */
	    localRayDirection: Vector3D;
	    /**
	     * The starting position of the colliding ray in scene coordinates.
	     */
	    rayPosition: Vector3D;
	    /**
	     * The direction of the colliding ray in scene coordinates.
	     */
	    rayDirection: Vector3D;
	    /**
	     * Determines if the ray position is contained within the entity bounds.
	     *
	     * @see away3d.entities.Entity#bounds
	     */
	    rayOriginIsInsideBounds: boolean;
	    /**
	     * The distance along the ray from the starting position to the calculated intersection entry point with the entity.
	     */
	    rayEntryDistance: number;
	    /**
	     * The material ownwer associated with a collision.
	     */
	    materialOwner: IMaterialOwner;
	    /**
	     * Creates a new <code>PickingCollisionVO</code> object.
	     *
	     * @param entity The entity to which this collision object belongs.
	     */
	    constructor(displayObject: DisplayObject);
	}
	export = PickingCollisionVO;
	
}
declare module "awayjs-display/lib/pick/IPickingCollider" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * Provides an interface for picking colliders that can be assigned to individual entities in a scene for specific picking behaviour.
	 * Used with the <code>RaycastPicker</code> picking object.
	 *
	 * @see away.entities.Entity#pickingCollider
	 * @see away.pick.RaycastPicker
	 *
	 * @interface away.pick.IPickingCollider
	 */
	interface IPickingCollider {
	    /**
	     * Sets the position and direction of a picking ray in local coordinates to the entity.
	     *
	     * @param localDirection The position vector in local coordinates
	     * @param localPosition The direction vector in local coordinates
	     */
	    setLocalRay(localPosition: Vector3D, localDirection: Vector3D): any;
	    /**
	     * Tests a <code>Billboard</code> object for a collision with the picking ray.
	     *
	     * @param entity The entity instance to be tested.
	     * @param pickingCollisionVO The collision object used to store the collision results
	     * @param shortestCollisionDistance The current value of the shortest distance to a detected collision along the ray.
	     */
	    testBillboardCollision(entity: IEntity, pickingCollisionVO: PickingCollisionVO, shortestCollisionDistance: number): boolean;
	    /**
	     * Tests a <code>Mesh</code> object for a collision with the picking ray.
	     *
	     * @param entity The entity instance to be tested.
	     * @param pickingCollisionVO The collision object used to store the collision results
	     * @param shortestCollisionDistance The current value of the shortest distance to a detected collision along the ray.
	     * @param findClosest
	     */
	    testMeshCollision(entity: IEntity, pickingCollisionVO: PickingCollisionVO, shortestCollisionDistance: number, findClosest: boolean): boolean;
	}
	export = IPickingCollider;
	
}
declare module "awayjs-display/lib/events/DisplayObjectEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	class DisplayObjectEvent extends Event {
	    static VISIBLITY_UPDATED: string;
	    static SCENETRANSFORM_CHANGED: string;
	    static SCENE_CHANGED: string;
	    static POSITION_CHANGED: string;
	    static ROTATION_CHANGED: string;
	    static SCALE_CHANGED: string;
	    object: DisplayObject;
	    constructor(type: string, object: DisplayObject);
	}
	export = DisplayObjectEvent;
	
}
declare module "awayjs-display/lib/prefabs/PrefabBase" {
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	/**
	 * PrefabBase is an abstract base class for prefabs, which are prebuilt display objects that allow easy cloning and updating
	 */
	class PrefabBase extends NamedAssetBase {
	    _pObjects: DisplayObject[];
	    /**
	     * Creates a new PrefabBase object.
	     */
	    constructor();
	    /**
	     * Returns a display object generated from this prefab
	     */
	    getNewObject(): DisplayObject;
	    _pCreateObject(): DisplayObject;
	    _iValidate(): void;
	}
	export = PrefabBase;
	
}
declare module "awayjs-display/lib/base/DisplayObject" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Point = require("awayjs-core/lib/geom/Point");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import ControllerBase = require("awayjs-display/lib/controllers/ControllerBase");
	import BlendMode = require("awayjs-display/lib/base/BlendMode");
	import LoaderInfo = require("awayjs-display/lib/base/LoaderInfo");
	import IBitmapDrawable = require("awayjs-display/lib/base/IBitmapDrawable");
	import Transform = require("awayjs-display/lib/base/Transform");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import Partition = require("awayjs-display/lib/partition/Partition");
	import IPickingCollider = require("awayjs-display/lib/pick/IPickingCollider");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import PrefabBase = require("awayjs-display/lib/prefabs/PrefabBase");
	/**
	 * The DisplayObject class is the base class for all objects that can be
	 * placed on the display list. The display list manages all objects displayed
	 * in flash. Use the DisplayObjectContainer class to arrange the
	 * display objects in the display list. DisplayObjectContainer objects can
	 * have child display objects, while other display objects, such as Shape and
	 * TextField objects, are "leaf" nodes that have only parents and siblings, no
	 * children.
	 *
	 * <p>The DisplayObject class supports basic functionality like the <i>x</i>
	 * and <i>y</i> position of an object, as well as more advanced properties of
	 * the object such as its transformation matrix. </p>
	 *
	 * <p>DisplayObject is an abstract base class; therefore, you cannot call
	 * DisplayObject directly. Invoking <code>new DisplayObject()</code> throws an
	 * <code>ArgumentError</code> exception. </p>
	 *
	 * <p>All display objects inherit from the DisplayObject class.</p>
	 *
	 * <p>The DisplayObject class itself does not include any APIs for rendering
	 * content onscreen. For that reason, if you want create a custom subclass of
	 * the DisplayObject class, you will want to extend one of its subclasses that
	 * do have APIs for rendering content onscreen, such as the Shape, Sprite,
	 * Bitmap, SimpleButton, TextField, or MovieClip class.</p>
	 *
	 * <p>The DisplayObject class contains several broadcast events. Normally, the
	 * target of any particular event is a specific DisplayObject instance. For
	 * example, the target of an <code>added</code> event is the specific
	 * DisplayObject instance that was added to the display list. Having a single
	 * target restricts the placement of event listeners to that target and in
	 * some cases the target's ancestors on the display list. With broadcast
	 * events, however, the target is not a specific DisplayObject instance, but
	 * rather all DisplayObject instances, including those that are not on the
	 * display list. This means that you can add a listener to any DisplayObject
	 * instance to listen for broadcast events. In addition to the broadcast
	 * events listed in the DisplayObject class's Events table, the DisplayObject
	 * class also inherits two broadcast events from the EventDispatcher class:
	 * <code>activate</code> and <code>deactivate</code>.</p>
	 *
	 * <p>Some properties previously used in the ActionScript 1.0 and 2.0
	 * MovieClip, TextField, and Button classes(such as <code>_alpha</code>,
	 * <code>_height</code>, <code>_name</code>, <code>_width</code>,
	 * <code>_x</code>, <code>_y</code>, and others) have equivalents in the
	 * ActionScript 3.0 DisplayObject class that are renamed so that they no
	 * longer begin with the underscore(_) character.</p>
	 *
	 * <p>For more information, see the "Display Programming" chapter of the
	 * <i>ActionScript 3.0 Developer's Guide</i>.</p>
	 *
	 * @event added            Dispatched when a display object is added to the
	 *                         display list. The following methods trigger this
	 *                         event:
	 *                         <code>DisplayObjectContainer.addChild()</code>,
	 *                         <code>DisplayObjectContainer.addChildAt()</code>.
	 * @event addedToStage     Dispatched when a display object is added to the on
	 *                         stage display list, either directly or through the
	 *                         addition of a sub tree in which the display object
	 *                         is contained. The following methods trigger this
	 *                         event:
	 *                         <code>DisplayObjectContainer.addChild()</code>,
	 *                         <code>DisplayObjectContainer.addChildAt()</code>.
	 * @event enterFrame       [broadcast event] Dispatched when the playhead is
	 *                         entering a new frame. If the playhead is not
	 *                         moving, or if there is only one frame, this event
	 *                         is dispatched continuously in conjunction with the
	 *                         frame rate. This event is a broadcast event, which
	 *                         means that it is dispatched by all display objects
	 *                         with a listener registered for this event.
	 * @event exitFrame        [broadcast event] Dispatched when the playhead is
	 *                         exiting the current frame. All frame scripts have
	 *                         been run. If the playhead is not moving, or if
	 *                         there is only one frame, this event is dispatched
	 *                         continuously in conjunction with the frame rate.
	 *                         This event is a broadcast event, which means that
	 *                         it is dispatched by all display objects with a
	 *                         listener registered for this event.
	 * @event frameConstructed [broadcast event] Dispatched after the constructors
	 *                         of frame display objects have run but before frame
	 *                         scripts have run. If the playhead is not moving, or
	 *                         if there is only one frame, this event is
	 *                         dispatched continuously in conjunction with the
	 *                         frame rate. This event is a broadcast event, which
	 *                         means that it is dispatched by all display objects
	 *                         with a listener registered for this event.
	 * @event removed          Dispatched when a display object is about to be
	 *                         removed from the display list. Two methods of the
	 *                         DisplayObjectContainer class generate this event:
	 *                         <code>removeChild()</code> and
	 *                         <code>removeChildAt()</code>.
	 *
	 *                         <p>The following methods of a
	 *                         DisplayObjectContainer object also generate this
	 *                         event if an object must be removed to make room for
	 *                         the new object: <code>addChild()</code>,
	 *                         <code>addChildAt()</code>, and
	 *                         <code>setChildIndex()</code>. </p>
	 * @event removedFromStage Dispatched when a display object is about to be
	 *                         removed from the display list, either directly or
	 *                         through the removal of a sub tree in which the
	 *                         display object is contained. Two methods of the
	 *                         DisplayObjectContainer class generate this event:
	 *                         <code>removeChild()</code> and
	 *                         <code>removeChildAt()</code>.
	 *
	 *                         <p>The following methods of a
	 *                         DisplayObjectContainer object also generate this
	 *                         event if an object must be removed to make room for
	 *                         the new object: <code>addChild()</code>,
	 *                         <code>addChildAt()</code>, and
	 *                         <code>setChildIndex()</code>. </p>
	 * @event render           [broadcast event] Dispatched when the display list
	 *                         is about to be updated and rendered. This event
	 *                         provides the last opportunity for objects listening
	 *                         for this event to make changes before the display
	 *                         list is rendered. You must call the
	 *                         <code>invalidate()</code> method of the Stage
	 *                         object each time you want a <code>render</code>
	 *                         event to be dispatched. <code>Render</code> events
	 *                         are dispatched to an object only if there is mutual
	 *                         trust between it and the object that called
	 *                         <code>Stage.invalidate()</code>. This event is a
	 *                         broadcast event, which means that it is dispatched
	 *                         by all display objects with a listener registered
	 *                         for this event.
	 *
	 *                         <p><b>Note: </b>This event is not dispatched if the
	 *                         display is not rendering. This is the case when the
	 *                         content is either minimized or obscured. </p>
	 */
	class DisplayObject extends NamedAssetBase implements IBitmapDrawable {
	    private _loaderInfo;
	    private _mouseX;
	    private _mouseY;
	    private _root;
	    private _bounds;
	    private _boundsVisible;
	    private _depth;
	    private _height;
	    private _width;
	    _pScene: Scene;
	    _pParent: DisplayObjectContainer;
	    _pSceneTransform: Matrix3D;
	    _pSceneTransformDirty: boolean;
	    _pIsEntity: boolean;
	    private _explicitPartition;
	    _pImplicitPartition: Partition;
	    private _partitionNode;
	    private _sceneTransformChanged;
	    private _scenechanged;
	    private _transform;
	    private _matrix3D;
	    private _matrix3DDirty;
	    private _inverseSceneTransform;
	    private _inverseSceneTransformDirty;
	    private _scenePosition;
	    private _scenePositionDirty;
	    private _explicitVisibility;
	    _pImplicitVisibility: boolean;
	    private _explicitMouseEnabled;
	    _pImplicitMouseEnabled: boolean;
	    private _listenToSceneTransformChanged;
	    private _listenToSceneChanged;
	    private _positionDirty;
	    private _rotationDirty;
	    private _scaleDirty;
	    private _positionChanged;
	    private _rotationChanged;
	    private _scaleChanged;
	    private _rotationX;
	    private _rotationY;
	    private _rotationZ;
	    private _eulers;
	    private _flipY;
	    private _listenToPositionChanged;
	    private _listenToRotationChanged;
	    private _listenToScaleChanged;
	    private _zOffset;
	    _pScaleX: number;
	    _pScaleY: number;
	    _pScaleZ: number;
	    private _x;
	    private _y;
	    private _z;
	    private _pivot;
	    private _orientationMatrix;
	    private _pivotZero;
	    private _pivotDirty;
	    private _pos;
	    private _rot;
	    private _sca;
	    private _transformComponents;
	    _pIgnoreTransform: boolean;
	    private _shaderPickingDetails;
	    _pPickingCollisionVO: PickingCollisionVO;
	    _pBounds: BoundingVolumeBase;
	    _pBoundsInvalid: boolean;
	    private _worldBounds;
	    private _worldBoundsInvalid;
	    _pPickingCollider: IPickingCollider;
	    _pRenderables: IRenderable[];
	    _iSourcePrefab: PrefabBase;
	    /**
	     *
	     */
	    alignmentMode: string;
	    /**
	     * Indicates the alpha transparency value of the object specified. Valid
	     * values are 0(fully transparent) to 1(fully opaque). The default value is
	     * 1. Display objects with <code>alpha</code> set to 0 <i>are</i> active,
	     * even though they are invisible.
	     */
	    alpha: number;
	    /**
	     * A value from the BlendMode class that specifies which blend mode to use. A
	     * bitmap can be drawn internally in two ways. If you have a blend mode
	     * enabled or an external clipping mask, the bitmap is drawn by adding a
	     * bitmap-filled square shape to the vector render. If you attempt to set
	     * this property to an invalid value, Flash runtimes set the value to
	     * <code>BlendMode.NORMAL</code>.
	     *
	     * <p>The <code>blendMode</code> property affects each pixel of the display
	     * object. Each pixel is composed of three constituent colors(red, green,
	     * and blue), and each constituent color has a value between 0x00 and 0xFF.
	     * Flash Player or Adobe AIR compares each constituent color of one pixel in
	     * the movie clip with the corresponding color of the pixel in the
	     * background. For example, if <code>blendMode</code> is set to
	     * <code>BlendMode.LIGHTEN</code>, Flash Player or Adobe AIR compares the red
	     * value of the display object with the red value of the background, and uses
	     * the lighter of the two as the value for the red component of the displayed
	     * color.</p>
	     *
	     * <p>The following table describes the <code>blendMode</code> settings. The
	     * BlendMode class defines string values you can use. The illustrations in
	     * the table show <code>blendMode</code> values applied to a circular display
	     * object(2) superimposed on another display object(1).</p>
	     */
	    blendMode: BlendMode;
	    /**
	     *
	     */
	    bounds: BoundingVolumeBase;
	    /**
	     * If set to <code>true</code>, NME will use the software renderer to cache
	     * an internal bitmap representation of the display object. For native targets,
	     * this is often much slower than the default hardware renderer. When you
	     * are using the Flash target, this caching may increase performance for display
	     * objects that contain complex vector content.
	     *
	     * <p>All vector data for a display object that has a cached bitmap is drawn
	     * to the bitmap instead of the main display. If
	     * <code>cacheAsBitmapMatrix</code> is null or unsupported, the bitmap is
	     * then copied to the main display as unstretched, unrotated pixels snapped
	     * to the nearest pixel boundaries. Pixels are mapped 1 to 1 with the parent
	     * object. If the bounds of the bitmap change, the bitmap is recreated
	     * instead of being stretched.</p>
	     *
	     * <p>If <code>cacheAsBitmapMatrix</code> is non-null and supported, the
	     * object is drawn to the off-screen bitmap using that matrix and the
	     * stretched and/or rotated results of that rendering are used to draw the
	     * object to the main display.</p>
	     *
	     * <p>No internal bitmap is created unless the <code>cacheAsBitmap</code>
	     * property is set to <code>true</code>.</p>
	     *
	     * <p>After you set the <code>cacheAsBitmap</code> property to
	     * <code>true</code>, the rendering does not change, however the display
	     * object performs pixel snapping automatically. The animation speed can be
	     * significantly faster depending on the complexity of the vector content.
	     * </p>
	     *
	     * <p>The <code>cacheAsBitmap</code> property is automatically set to
	     * <code>true</code> whenever you apply a filter to a display object(when
	     * its <code>filter</code> array is not empty), and if a display object has a
	     * filter applied to it, <code>cacheAsBitmap</code> is reported as
	     * <code>true</code> for that display object, even if you set the property to
	     * <code>false</code>. If you clear all filters for a display object, the
	     * <code>cacheAsBitmap</code> setting changes to what it was last set to.</p>
	     *
	     * <p>A display object does not use a bitmap even if the
	     * <code>cacheAsBitmap</code> property is set to <code>true</code> and
	     * instead renders from vector data in the following cases:</p>
	     *
	     * <ul>
	     *   <li>The bitmap is too large. In AIR 1.5 and Flash Player 10, the maximum
	     * size for a bitmap image is 8,191 pixels in width or height, and the total
	     * number of pixels cannot exceed 16,777,215 pixels.(So, if a bitmap image
	     * is 8,191 pixels wide, it can only be 2,048 pixels high.) In Flash Player 9
	     * and earlier, the limitation is is 2880 pixels in height and 2,880 pixels
	     * in width.</li>
	     *   <li>The bitmap fails to allocate(out of memory error). </li>
	     * </ul>
	     *
	     * <p>The <code>cacheAsBitmap</code> property is best used with movie clips
	     * that have mostly static content and that do not scale and rotate
	     * frequently. With such movie clips, <code>cacheAsBitmap</code> can lead to
	     * performance increases when the movie clip is translated(when its <i>x</i>
	     * and <i>y</i> position is changed).</p>
	     */
	    cacheAsBitmap: boolean;
	    /**
	     *
	     */
	    castsShadows: boolean;
	    /**
	     * Indicates the depth of the display object, in pixels. The depth is
	     * calculated based on the bounds of the content of the display object. When
	     * you set the <code>depth</code> property, the <code>scaleZ</code> property
	     * is adjusted accordingly, as shown in the following code:
	     *
	     * <p>Except for TextField and Video objects, a display object with no
	     * content (such as an empty sprite) has a depth of 0, even if you try to
	     * set <code>depth</code> to a different value.</p>
	     */
	    depth: number;
	    /**
	     * Defines the rotation of the 3d object as a <code>Vector3D</code> object containing euler angles for rotation around x, y and z axis.
	     */
	    eulers: Vector3D;
	    /**
	     * An object that can contain any extra data.
	     */
	    extra: Object;
	    /**
	     * An indexed array that contains each filter object currently associated
	     * with the display object. The flash.filters package contains several
	     * classes that define specific filters you can use.
	     *
	     * <p>Filters can be applied in Flash Professional at design time, or at run
	     * time by using ActionScript code. To apply a filter by using ActionScript,
	     * you must make a temporary copy of the entire <code>filters</code> array,
	     * modify the temporary array, then assign the value of the temporary array
	     * back to the <code>filters</code> array. You cannot directly add a new
	     * filter object to the <code>filters</code> array.</p>
	     *
	     * <p>To add a filter by using ActionScript, perform the following steps
	     * (assume that the target display object is named
	     * <code>myDisplayObject</code>):</p>
	     *
	     * <ol>
	     *   <li>Create a new filter object by using the constructor method of your
	     * chosen filter class.</li>
	     *   <li>Assign the value of the <code>myDisplayObject.filters</code> array
	     * to a temporary array, such as one named <code>myFilters</code>.</li>
	     *   <li>Add the new filter object to the <code>myFilters</code> temporary
	     * array.</li>
	     *   <li>Assign the value of the temporary array to the
	     * <code>myDisplayObject.filters</code> array.</li>
	     * </ol>
	     *
	     * <p>If the <code>filters</code> array is undefined, you do not need to use
	     * a temporary array. Instead, you can directly assign an array literal that
	     * contains one or more filter objects that you create. The first example in
	     * the Examples section adds a drop shadow filter by using code that handles
	     * both defined and undefined <code>filters</code> arrays.</p>
	     *
	     * <p>To modify an existing filter object, you must use the technique of
	     * modifying a copy of the <code>filters</code> array:</p>
	     *
	     * <ol>
	     *   <li>Assign the value of the <code>filters</code> array to a temporary
	     * array, such as one named <code>myFilters</code>.</li>
	     *   <li>Modify the property by using the temporary array,
	     * <code>myFilters</code>. For example, to set the quality property of the
	     * first filter in the array, you could use the following code:
	     * <code>myFilters[0].quality = 1;</code></li>
	     *   <li>Assign the value of the temporary array to the <code>filters</code>
	     * array.</li>
	     * </ol>
	     *
	     * <p>At load time, if a display object has an associated filter, it is
	     * marked to cache itself as a transparent bitmap. From this point forward,
	     * as long as the display object has a valid filter list, the player caches
	     * the display object as a bitmap. This source bitmap is used as a source
	     * image for the filter effects. Each display object usually has two bitmaps:
	     * one with the original unfiltered source display object and another for the
	     * final image after filtering. The final image is used when rendering. As
	     * long as the display object does not change, the final image does not need
	     * updating.</p>
	     *
	     * <p>The flash.filters package includes classes for filters. For example, to
	     * create a DropShadow filter, you would write:</p>
	     *
	     * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	     *                       and the shader output type is not compatible with
	     *                       this operation(the shader must specify a
	     *                       <code>pixel4</code> output).
	     * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	     *                       and the shader doesn't specify any image input or
	     *                       the first input is not an <code>image4</code> input.
	     * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	     *                       and the shader specifies an image input that isn't
	     *                       provided.
	     * @throws ArgumentError When <code>filters</code> includes a ShaderFilter, a
	     *                       ByteArray or Vector.<Number> instance as a shader
	     *                       input, and the <code>width</code> and
	     *                       <code>height</code> properties aren't specified for
	     *                       the ShaderInput object, or the specified values
	     *                       don't match the amount of data in the input data.
	     *                       See the <code>ShaderInput.input</code> property for
	     *                       more information.
	     */
	    /**
	     * Indicates the height of the display object, in pixels. The height is
	     * calculated based on the bounds of the content of the display object. When
	     * you set the <code>height</code> property, the <code>scaleY</code> property
	     * is adjusted accordingly, as shown in the following code:
	     *
	     * <p>Except for TextField and Video objects, a display object with no
	     * content (such as an empty sprite) has a height of 0, even if you try to
	     * set <code>height</code> to a different value.</p>
	     */
	    height: number;
	    /**
	     * Indicates the instance container index of the DisplayObject. The object can be
	     * identified in the child list of its parent display object container by
	     * calling the <code>getChildByIndex()</code> method of the display object
	     * container.
	     *
	     * <p>If the DisplayObject has no parent container, index defaults to 0.</p>
	     */
	    index: number;
	    /**
	     *
	     */
	    inverseSceneTransform: Matrix3D;
	    /**
	     *
	     */
	    ignoreTransform: boolean;
	    /**
	     *
	     */
	    isEntity: boolean;
	    /**
	     * Returns a LoaderInfo object containing information about loading the file
	     * to which this display object belongs. The <code>loaderInfo</code> property
	     * is defined only for the root display object of a SWF file or for a loaded
	     * Bitmap(not for a Bitmap that is drawn with ActionScript). To find the
	     * <code>loaderInfo</code> object associated with the SWF file that contains
	     * a display object named <code>myDisplayObject</code>, use
	     * <code>myDisplayObject.root.loaderInfo</code>.
	     *
	     * <p>A large SWF file can monitor its download by calling
	     * <code>this.root.loaderInfo.addEventListener(Event.COMPLETE,
	     * func)</code>.</p>
	     */
	    loaderInfo: LoaderInfo;
	    /**
	     * The calling display object is masked by the specified <code>mask</code>
	     * object. To ensure that masking works when the Stage is scaled, the
	     * <code>mask</code> display object must be in an active part of the display
	     * list. The <code>mask</code> object itself is not drawn. Set
	     * <code>mask</code> to <code>null</code> to remove the mask.
	     *
	     * <p>To be able to scale a mask object, it must be on the display list. To
	     * be able to drag a mask Sprite object(by calling its
	     * <code>startDrag()</code> method), it must be on the display list. To call
	     * the <code>startDrag()</code> method for a mask sprite based on a
	     * <code>mouseDown</code> event being dispatched by the sprite, set the
	     * sprite's <code>buttonMode</code> property to <code>true</code>.</p>
	     *
	     * <p>When display objects are cached by setting the
	     * <code>cacheAsBitmap</code> property to <code>true</code> an the
	     * <code>cacheAsBitmapMatrix</code> property to a Matrix object, both the
	     * mask and the display object being masked must be part of the same cached
	     * bitmap. Thus, if the display object is cached, then the mask must be a
	     * child of the display object. If an ancestor of the display object on the
	     * display list is cached, then the mask must be a child of that ancestor or
	     * one of its descendents. If more than one ancestor of the masked object is
	     * cached, then the mask must be a descendent of the cached container closest
	     * to the masked object in the display list.</p>
	     *
	     * <p><b>Note:</b> A single <code>mask</code> object cannot be used to mask
	     * more than one calling display object. When the <code>mask</code> is
	     * assigned to a second display object, it is removed as the mask of the
	     * first object, and that object's <code>mask</code> property becomes
	     * <code>null</code>.</p>
	     */
	    mask: DisplayObject;
	    /**
	     * Specifies whether this object receives mouse, or other user input,
	     * messages. The default value is <code>true</code>, which means that by
	     * default any InteractiveObject instance that is on the display list
	     * receives mouse events or other user input events. If
	     * <code>mouseEnabled</code> is set to <code>false</code>, the instance does
	     * not receive any mouse events(or other user input events like keyboard
	     * events). Any children of this instance on the display list are not
	     * affected. To change the <code>mouseEnabled</code> behavior for all
	     * children of an object on the display list, use
	     * <code>flash.display.DisplayObjectContainer.mouseChildren</code>.
	     *
	     * <p> No event is dispatched by setting this property. You must use the
	     * <code>addEventListener()</code> method to create interactive
	     * functionality.</p>
	     */
	    mouseEnabled: boolean;
	    /**
	     * Indicates the x coordinate of the mouse or user input device position, in
	     * pixels.
	     *
	     * <p><b>Note</b>: For a DisplayObject that has been rotated, the returned x
	     * coordinate will reflect the non-rotated object.</p>
	     */
	    mouseX: number;
	    /**
	     * Indicates the y coordinate of the mouse or user input device position, in
	     * pixels.
	     *
	     * <p><b>Note</b>: For a DisplayObject that has been rotated, the returned y
	     * coordinate will reflect the non-rotated object.</p>
	     */
	    mouseY: number;
	    /**
	     * Indicates the instance name of the DisplayObject. The object can be
	     * identified in the child list of its parent display object container by
	     * calling the <code>getChildByName()</code> method of the display object
	     * container.
	     *
	     * @throws IllegalOperationError If you are attempting to set this property
	     *                               on an object that was placed on the timeline
	     *                               in the Flash authoring tool.
	     */
	    name: string;
	    /**
	     *
	     */
	    orientationMode: string;
	    /**
	     * Indicates the DisplayObjectContainer object that contains this display
	     * object. Use the <code>parent</code> property to specify a relative path to
	     * display objects that are above the current display object in the display
	     * list hierarchy.
	     *
	     * <p>You can use <code>parent</code> to move up multiple levels in the
	     * display list as in the following:</p>
	     *
	     * @throws SecurityError The parent display object belongs to a security
	     *                       sandbox to which you do not have access. You can
	     *                       avoid this situation by having the parent movie call
	     *                       the <code>Security.allowDomain()</code> method.
	     */
	    parent: DisplayObjectContainer;
	    /**
	     *
	     */
	    partition: Partition;
	    /**
	     *
	     */
	    partitionNode: EntityNode;
	    /**
	     *
	     */
	    pickingCollider: IPickingCollider;
	    /**
	     * Defines the local point around which the object rotates.
	     */
	    pivot: Vector3D;
	    /**
	     * For a display object in a loaded SWF file, the <code>root</code> property
	     * is the top-most display object in the portion of the display list's tree
	     * structure represented by that SWF file. For a Bitmap object representing a
	     * loaded image file, the <code>root</code> property is the Bitmap object
	     * itself. For the instance of the main class of the first SWF file loaded,
	     * the <code>root</code> property is the display object itself. The
	     * <code>root</code> property of the Stage object is the Stage object itself.
	     * The <code>root</code> property is set to <code>null</code> for any display
	     * object that has not been added to the display list, unless it has been
	     * added to a display object container that is off the display list but that
	     * is a child of the top-most display object in a loaded SWF file.
	     *
	     * <p>For example, if you create a new Sprite object by calling the
	     * <code>Sprite()</code> constructor method, its <code>root</code> property
	     * is <code>null</code> until you add it to the display list(or to a display
	     * object container that is off the display list but that is a child of the
	     * top-most display object in a SWF file).</p>
	     *
	     * <p>For a loaded SWF file, even though the Loader object used to load the
	     * file may not be on the display list, the top-most display object in the
	     * SWF file has its <code>root</code> property set to itself. The Loader
	     * object does not have its <code>root</code> property set until it is added
	     * as a child of a display object for which the <code>root</code> property is
	     * set.</p>
	     */
	    root: DisplayObjectContainer;
	    /**
	     * Indicates the rotation of the DisplayObject instance, in degrees, from its
	     * original orientation. Values from 0 to 180 represent clockwise rotation;
	     * values from 0 to -180 represent counterclockwise rotation. Values outside
	     * this range are added to or subtracted from 360 to obtain a value within
	     * the range. For example, the statement <code>my_video.rotation = 450</code>
	     * is the same as <code> my_video.rotation = 90</code>.
	     */
	    rotation: number;
	    /**
	     * Indicates the x-axis rotation of the DisplayObject instance, in degrees,
	     * from its original orientation relative to the 3D parent container. Values
	     * from 0 to 180 represent clockwise rotation; values from 0 to -180
	     * represent counterclockwise rotation. Values outside this range are added
	     * to or subtracted from 360 to obtain a value within the range.
	     */
	    rotationX: number;
	    /**
	     * Indicates the y-axis rotation of the DisplayObject instance, in degrees,
	     * from its original orientation relative to the 3D parent container. Values
	     * from 0 to 180 represent clockwise rotation; values from 0 to -180
	     * represent counterclockwise rotation. Values outside this range are added
	     * to or subtracted from 360 to obtain a value within the range.
	     */
	    rotationY: number;
	    /**
	     * Indicates the z-axis rotation of the DisplayObject instance, in degrees,
	     * from its original orientation relative to the 3D parent container. Values
	     * from 0 to 180 represent clockwise rotation; values from 0 to -180
	     * represent counterclockwise rotation. Values outside this range are added
	     * to or subtracted from 360 to obtain a value within the range.
	     */
	    rotationZ: number;
	    /**
	     * The current scaling grid that is in effect. If set to <code>null</code>,
	     * the entire display object is scaled normally when any scale transformation
	     * is applied.
	     *
	     * <p>When you define the <code>scale9Grid</code> property, the display
	     * object is divided into a grid with nine regions based on the
	     * <code>scale9Grid</code> rectangle, which defines the center region of the
	     * grid. The eight other regions of the grid are the following areas: </p>
	     *
	     * <ul>
	     *   <li>The upper-left corner outside of the rectangle</li>
	     *   <li>The area above the rectangle </li>
	     *   <li>The upper-right corner outside of the rectangle</li>
	     *   <li>The area to the left of the rectangle</li>
	     *   <li>The area to the right of the rectangle</li>
	     *   <li>The lower-left corner outside of the rectangle</li>
	     *   <li>The area below the rectangle</li>
	     *   <li>The lower-right corner outside of the rectangle</li>
	     * </ul>
	     *
	     * <p>You can think of the eight regions outside of the center(defined by
	     * the rectangle) as being like a picture frame that has special rules
	     * applied to it when scaled.</p>
	     *
	     * <p>When the <code>scale9Grid</code> property is set and a display object
	     * is scaled, all text and gradients are scaled normally; however, for other
	     * types of objects the following rules apply:</p>
	     *
	     * <ul>
	     *   <li>Content in the center region is scaled normally. </li>
	     *   <li>Content in the corners is not scaled. </li>
	     *   <li>Content in the top and bottom regions is scaled horizontally only.
	     * Content in the left and right regions is scaled vertically only.</li>
	     *   <li>All fills(including bitmaps, video, and gradients) are stretched to
	     * fit their shapes.</li>
	     * </ul>
	     *
	     * <p>If a display object is rotated, all subsequent scaling is normal(and
	     * the <code>scale9Grid</code> property is ignored).</p>
	     *
	     * <p>For example, consider the following display object and a rectangle that
	     * is applied as the display object's <code>scale9Grid</code>:</p>
	     *
	     * <p>A common use for setting <code>scale9Grid</code> is to set up a display
	     * object to be used as a component, in which edge regions retain the same
	     * width when the component is scaled.</p>
	     *
	     * @throws ArgumentError If you pass an invalid argument to the method.
	     */
	    scale9Grid: Rectangle;
	    /**
	     * Indicates the horizontal scale(percentage) of the object as applied from
	     * the registration point. The default registration point is(0,0). 1.0
	     * equals 100% scale.
	     *
	     * <p>Scaling the local coordinate system changes the <code>x</code> and
	     * <code>y</code> property values, which are defined in whole pixels. </p>
	     */
	    scaleX: number;
	    /**
	     * Indicates the vertical scale(percentage) of an object as applied from the
	     * registration point of the object. The default registration point is(0,0).
	     * 1.0 is 100% scale.
	     *
	     * <p>Scaling the local coordinate system changes the <code>x</code> and
	     * <code>y</code> property values, which are defined in whole pixels. </p>
	     */
	    scaleY: number;
	    /**
	     * Indicates the depth scale(percentage) of an object as applied from the
	     * registration point of the object. The default registration point is(0,0).
	     * 1.0 is 100% scale.
	     *
	     * <p>Scaling the local coordinate system changes the <code>x</code>,
	     * <code>y</code> and <code>z</code> property values, which are defined in
	     * whole pixels. </p>
	     */
	    scaleZ: number;
	    /**
	     *
	     */
	    scene: Scene;
	    /**
	     *
	     */
	    scenePosition: Vector3D;
	    sceneTransform: Matrix3D;
	    /**
	     * The scroll rectangle bounds of the display object. The display object is
	     * cropped to the size defined by the rectangle, and it scrolls within the
	     * rectangle when you change the <code>x</code> and <code>y</code> properties
	     * of the <code>scrollRect</code> object.
	     *
	     * <p>The properties of the <code>scrollRect</code> Rectangle object use the
	     * display object's coordinate space and are scaled just like the overall
	     * display object. The corner bounds of the cropped window on the scrolling
	     * display object are the origin of the display object(0,0) and the point
	     * defined by the width and height of the rectangle. They are not centered
	     * around the origin, but use the origin to define the upper-left corner of
	     * the area. A scrolled display object always scrolls in whole pixel
	     * increments. </p>
	     *
	     * <p>You can scroll an object left and right by setting the <code>x</code>
	     * property of the <code>scrollRect</code> Rectangle object. You can scroll
	     * an object up and down by setting the <code>y</code> property of the
	     * <code>scrollRect</code> Rectangle object. If the display object is rotated
	     * 90° and you scroll it left and right, the display object actually scrolls
	     * up and down.</p>
	     */
	    scrollRect: Rectangle;
	    /**
	     *
	     */
	    shaderPickingDetails: boolean;
	    /**
	     *
	     */
	    boundsVisible: boolean;
	    /**
	     * An object with properties pertaining to a display object's matrix, color
	     * transform, and pixel bounds. The specific properties  -  matrix,
	     * colorTransform, and three read-only properties
	     * (<code>concatenatedMatrix</code>, <code>concatenatedColorTransform</code>,
	     * and <code>pixelBounds</code>)  -  are described in the entry for the
	     * Transform class.
	     *
	     * <p>Each of the transform object's properties is itself an object. This
	     * concept is important because the only way to set new values for the matrix
	     * or colorTransform objects is to create a new object and copy that object
	     * into the transform.matrix or transform.colorTransform property.</p>
	     *
	     * <p>For example, to increase the <code>tx</code> value of a display
	     * object's matrix, you must make a copy of the entire matrix object, then
	     * copy the new object into the matrix property of the transform object:</p>
	     * <pre xml:space="preserve"><code> public myMatrix:Matrix =
	     * myDisplayObject.transform.matrix; myMatrix.tx += 10;
	     * myDisplayObject.transform.matrix = myMatrix; </code></pre>
	     *
	     * <p>You cannot directly set the <code>tx</code> property. The following
	     * code has no effect on <code>myDisplayObject</code>: </p>
	     * <pre xml:space="preserve"><code> myDisplayObject.transform.matrix.tx +=
	     * 10; </code></pre>
	     *
	     * <p>You can also copy an entire transform object and assign it to another
	     * display object's transform property. For example, the following code
	     * copies the entire transform object from <code>myOldDisplayObj</code> to
	     * <code>myNewDisplayObj</code>:</p>
	     * <code>myNewDisplayObj.transform = myOldDisplayObj.transform;</code>
	     *
	     * <p>The resulting display object, <code>myNewDisplayObj</code>, now has the
	     * same values for its matrix, color transform, and pixel bounds as the old
	     * display object, <code>myOldDisplayObj</code>.</p>
	     *
	     * <p>Note that AIR for TV devices use hardware acceleration, if it is
	     * available, for color transforms.</p>
	     */
	    transform: Transform;
	    /**
	     * Whether or not the display object is visible. Display objects that are not
	     * visible are disabled. For example, if <code>visible=false</code> for an
	     * InteractiveObject instance, it cannot be clicked.
	     */
	    visible: boolean;
	    /**
	     * Indicates the width of the display object, in pixels. The width is
	     * calculated based on the bounds of the content of the display object. When
	     * you set the <code>width</code> property, the <code>scaleX</code> property
	     * is adjusted accordingly, as shown in the following code:
	     *
	     * <p>Except for TextField and Video objects, a display object with no
	     * content(such as an empty sprite) has a width of 0, even if you try to set
	     * <code>width</code> to a different value.</p>
	     */
	    width: number;
	    /**
	     *
	     */
	    worldBounds: BoundingVolumeBase;
	    /**
	     * Indicates the <i>x</i> coordinate of the DisplayObject instance relative
	     * to the local coordinates of the parent DisplayObjectContainer. If the
	     * object is inside a DisplayObjectContainer that has transformations, it is
	     * in the local coordinate system of the enclosing DisplayObjectContainer.
	     * Thus, for a DisplayObjectContainer rotated 90° counterclockwise, the
	     * DisplayObjectContainer's children inherit a coordinate system that is
	     * rotated 90° counterclockwise. The object's coordinates refer to the
	     * registration point position.
	     */
	    x: number;
	    /**
	     * Indicates the <i>y</i> coordinate of the DisplayObject instance relative
	     * to the local coordinates of the parent DisplayObjectContainer. If the
	     * object is inside a DisplayObjectContainer that has transformations, it is
	     * in the local coordinate system of the enclosing DisplayObjectContainer.
	     * Thus, for a DisplayObjectContainer rotated 90° counterclockwise, the
	     * DisplayObjectContainer's children inherit a coordinate system that is
	     * rotated 90° counterclockwise. The object's coordinates refer to the
	     * registration point position.
	     */
	    y: number;
	    /**
	     * Indicates the z coordinate position along the z-axis of the DisplayObject
	     * instance relative to the 3D parent container. The z property is used for
	     * 3D coordinates, not screen or pixel coordinates.
	     *
	     * <p>When you set a <code>z</code> property for a display object to
	     * something other than the default value of <code>0</code>, a corresponding
	     * Matrix3D object is automatically created. for adjusting a display object's
	     * position and orientation in three dimensions. When working with the
	     * z-axis, the existing behavior of x and y properties changes from screen or
	     * pixel coordinates to positions relative to the 3D parent container.</p>
	     *
	     * <p>For example, a child of the <code>_root</code> at position x = 100, y =
	     * 100, z = 200 is not drawn at pixel location(100,100). The child is drawn
	     * wherever the 3D projection calculation puts it. The calculation is:</p>
	     *
	     * <p><code>(x~~cameraFocalLength/cameraRelativeZPosition,
	     * y~~cameraFocalLength/cameraRelativeZPosition)</code></p>
	     */
	    z: number;
	    /**
	     *
	     */
	    zOffset: number;
	    /**
	     * Creates a new <code>DisplayObject</code> instance.
	     */
	    constructor();
	    /**
	     *
	     */
	    addEventListener(type: string, listener: Function): void;
	    /**
	     *
	     */
	    clone(): DisplayObject;
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    disposeAsset(): void;
	    /**
	     * Returns a rectangle that defines the area of the display object relative
	     * to the coordinate system of the <code>targetCoordinateSpace</code> object.
	     * Consider the following code, which shows how the rectangle returned can
	     * vary depending on the <code>targetCoordinateSpace</code> parameter that
	     * you pass to the method:
	     *
	     * <p><b>Note:</b> Use the <code>localToGlobal()</code> and
	     * <code>globalToLocal()</code> methods to convert the display object's local
	     * coordinates to display coordinates, or display coordinates to local
	     * coordinates, respectively.</p>
	     *
	     * <p>The <code>getBounds()</code> method is similar to the
	     * <code>getRect()</code> method; however, the Rectangle returned by the
	     * <code>getBounds()</code> method includes any strokes on shapes, whereas
	     * the Rectangle returned by the <code>getRect()</code> method does not. For
	     * an example, see the description of the <code>getRect()</code> method.</p>
	     *
	     * @param targetCoordinateSpace The display object that defines the
	     *                              coordinate system to use.
	     * @return The rectangle that defines the area of the display object relative
	     *         to the <code>targetCoordinateSpace</code> object's coordinate
	     *         system.
	     */
	    getBounds(targetCoordinateSpace: DisplayObject): Rectangle;
	    /**
	     * Returns a rectangle that defines the boundary of the display object, based
	     * on the coordinate system defined by the <code>targetCoordinateSpace</code>
	     * parameter, excluding any strokes on shapes. The values that the
	     * <code>getRect()</code> method returns are the same or smaller than those
	     * returned by the <code>getBounds()</code> method.
	     *
	     * <p><b>Note:</b> Use <code>localToGlobal()</code> and
	     * <code>globalToLocal()</code> methods to convert the display object's local
	     * coordinates to Stage coordinates, or Stage coordinates to local
	     * coordinates, respectively.</p>
	     *
	     * @param targetCoordinateSpace The display object that defines the
	     *                              coordinate system to use.
	     * @return The rectangle that defines the area of the display object relative
	     *         to the <code>targetCoordinateSpace</code> object's coordinate
	     *         system.
	     */
	    getRect(targetCoordinateSpace: DisplayObject): Rectangle;
	    /**
	     * Converts the <code>point</code> object from the Stage(global) coordinates
	     * to the display object's(local) coordinates.
	     *
	     * <p>To use this method, first create an instance of the Point class. The
	     * <i>x</i> and <i>y</i> values that you assign represent global coordinates
	     * because they relate to the origin(0,0) of the main display area. Then
	     * pass the Point instance as the parameter to the
	     * <code>globalToLocal()</code> method. The method returns a new Point object
	     * with <i>x</i> and <i>y</i> values that relate to the origin of the display
	     * object instead of the origin of the Stage.</p>
	     *
	     * @param point An object created with the Point class. The Point object
	     *              specifies the <i>x</i> and <i>y</i> coordinates as
	     *              properties.
	     * @return A Point object with coordinates relative to the display object.
	     */
	    globalToLocal(point: Point): Point;
	    /**
	     * Converts a two-dimensional point from the Stage(global) coordinates to a
	     * three-dimensional display object's(local) coordinates.
	     *
	     * <p>To use this method, first create an instance of the Point class. The x
	     * and y values that you assign to the Point object represent global
	     * coordinates because they are relative to the origin(0,0) of the main
	     * display area. Then pass the Point object to the
	     * <code>globalToLocal3D()</code> method as the <code>point</code> parameter.
	     * The method returns three-dimensional coordinates as a Vector3D object
	     * containing <code>x</code>, <code>y</code>, and <code>z</code> values that
	     * are relative to the origin of the three-dimensional display object.</p>
	     *
	     * @param point A two dimensional Point object representing global x and y
	     *              coordinates.
	     * @return A Vector3D object with coordinates relative to the
	     *         three-dimensional display object.
	     */
	    globalToLocal3D(point: Point): Vector3D;
	    /**
	     * Evaluates the bounding box of the display object to see if it overlaps or
	     * intersects with the bounding box of the <code>obj</code> display object.
	     *
	     * @param obj The display object to test against.
	     * @return <code>true</code> if the bounding boxes of the display objects
	     *         intersect; <code>false</code> if not.
	     */
	    hitTestObject(obj: DisplayObject): boolean;
	    /**
	     * Evaluates the display object to see if it overlaps or intersects with the
	     * point specified by the <code>x</code> and <code>y</code> parameters. The
	     * <code>x</code> and <code>y</code> parameters specify a point in the
	     * coordinate space of the Stage, not the display object container that
	     * contains the display object(unless that display object container is the
	     * Stage).
	     *
	     * @param x         The <i>x</i> coordinate to test against this object.
	     * @param y         The <i>y</i> coordinate to test against this object.
	     * @param shapeFlag Whether to check against the actual pixels of the object
	     *                 (<code>true</code>) or the bounding box
	     *                 (<code>false</code>).
	     * @return <code>true</code> if the display object overlaps or intersects
	     *         with the specified point; <code>false</code> otherwise.
	     */
	    hitTestPoint(x: number, y: number, shapeFlag?: boolean): boolean;
	    /**
	     * @inheritDoc
	     */
	    isIntersectingRay(rayPosition: Vector3D, rayDirection: Vector3D): boolean;
	    /**
	     * Converts a three-dimensional point of the three-dimensional display
	     * object's(local) coordinates to a two-dimensional point in the Stage
	     * (global) coordinates.
	     *
	     * <p>For example, you can only use two-dimensional coordinates(x,y) to draw
	     * with the <code>display.Graphics</code> methods. To draw a
	     * three-dimensional object, you need to map the three-dimensional
	     * coordinates of a display object to two-dimensional coordinates. First,
	     * create an instance of the Vector3D class that holds the x-, y-, and z-
	     * coordinates of the three-dimensional display object. Then pass the
	     * Vector3D object to the <code>local3DToGlobal()</code> method as the
	     * <code>point3d</code> parameter. The method returns a two-dimensional Point
	     * object that can be used with the Graphics API to draw the
	     * three-dimensional object.</p>
	     *
	     * @param point3d A Vector3D object containing either a three-dimensional
	     *                point or the coordinates of the three-dimensional display
	     *                object.
	     * @return A two-dimensional point representing a three-dimensional point in
	     *         two-dimensional space.
	     */
	    local3DToGlobal(point3d: Vector3D): Point;
	    /**
	     * Rotates the 3d object around to face a point defined relative to the local coordinates of the parent <code>ObjectContainer3D</code>.
	     *
	     * @param    target        The vector defining the point to be looked at
	     * @param    upAxis        An optional vector used to define the desired up orientation of the 3d object after rotation has occurred
	     */
	    lookAt(target: Vector3D, upAxis?: Vector3D): void;
	    /**
	     * Converts the <code>point</code> object from the display object's(local)
	     * coordinates to the Stage(global) coordinates.
	     *
	     * <p>This method allows you to convert any given <i>x</i> and <i>y</i>
	     * coordinates from values that are relative to the origin(0,0) of a
	     * specific display object(local coordinates) to values that are relative to
	     * the origin of the Stage(global coordinates).</p>
	     *
	     * <p>To use this method, first create an instance of the Point class. The
	     * <i>x</i> and <i>y</i> values that you assign represent local coordinates
	     * because they relate to the origin of the display object.</p>
	     *
	     * <p>You then pass the Point instance that you created as the parameter to
	     * the <code>localToGlobal()</code> method. The method returns a new Point
	     * object with <i>x</i> and <i>y</i> values that relate to the origin of the
	     * Stage instead of the origin of the display object.</p>
	     *
	     * @param point The name or identifier of a point created with the Point
	     *              class, specifying the <i>x</i> and <i>y</i> coordinates as
	     *              properties.
	     * @return A Point object with coordinates relative to the Stage.
	     */
	    localToGlobal(point: Point): Point;
	    /**
	     * Moves the 3d object directly to a point in space
	     *
	     * @param    dx        The amount of movement along the local x axis.
	     * @param    dy        The amount of movement along the local y axis.
	     * @param    dz        The amount of movement along the local z axis.
	     */
	    moveTo(dx: number, dy: number, dz: number): void;
	    /**
	     * Moves the local point around which the object rotates.
	     *
	     * @param    dx        The amount of movement along the local x axis.
	     * @param    dy        The amount of movement along the local y axis.
	     * @param    dz        The amount of movement along the local z axis.
	     */
	    movePivot(dx: number, dy: number, dz: number): void;
	    /**
	     * Rotates the 3d object around it's local x-axis
	     *
	     * @param    angle        The amount of rotation in degrees
	     */
	    pitch(angle: number): void;
	    /**
	     *
	     */
	    getRenderSceneTransform(camera: Camera): Matrix3D;
	    /**
	     * Rotates the 3d object around it's local z-axis
	     *
	     * @param    angle        The amount of rotation in degrees
	     */
	    roll(angle: number): void;
	    /**
	     * Rotates the 3d object around an axis by a defined angle
	     *
	     * @param    axis        The vector defining the axis of rotation
	     * @param    angle        The amount of rotation in degrees
	     */
	    rotate(axis: Vector3D, angle: number): void;
	    /**
	     * Rotates the 3d object directly to a euler angle
	     *
	     * @param    ax        The angle in degrees of the rotation around the x axis.
	     * @param    ay        The angle in degrees of the rotation around the y axis.
	     * @param    az        The angle in degrees of the rotation around the z axis.
	     */
	    rotateTo(ax: number, ay: number, az: number): void;
	    /**
	     *
	     */
	    removeEventListener(type: string, listener: Function): void;
	    /**
	     * Moves the 3d object along a vector by a defined length
	     *
	     * @param    axis        The vector defining the axis of movement
	     * @param    distance    The length of the movement
	     */
	    translate(axis: Vector3D, distance: number): void;
	    /**
	     * Moves the 3d object along a vector by a defined length
	     *
	     * @param    axis        The vector defining the axis of movement
	     * @param    distance    The length of the movement
	     */
	    translateLocal(axis: Vector3D, distance: number): void;
	    /**
	     * Rotates the 3d object around it's local y-axis
	     *
	     * @param    angle        The amount of rotation in degrees
	     */
	    yaw(angle: number): void;
	    /**
	     * @internal
	     */
	    _iController: ControllerBase;
	    /**
	     * @internal
	     */
	    _iAssignedPartition: Partition;
	    /**
	     * The transformation of the 3d object, relative to the local coordinates of the parent <code>ObjectContainer3D</code>.
	     *
	     * @internal
	     */
	    _iMatrix3D: Matrix3D;
	    /**
	     * @internal
	     */
	    _iPickingCollisionVO: PickingCollisionVO;
	    /**
	     * @internal
	     */
	    iSetParent(value: DisplayObjectContainer): void;
	    /**
	     * @protected
	     */
	    pCreateDefaultBoundingVolume(): BoundingVolumeBase;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    /**
	     * @protected
	     */
	    pInvalidateBounds(): void;
	    /**
	     * @protected
	     */
	    pInvalidateSceneTransform(): void;
	    /**
	     * @protected
	     */
	    pUpdateBounds(): void;
	    /**
	     * @protected
	     */
	    _pUpdateImplicitMouseEnabled(value: boolean): void;
	    /**
	     * @protected
	     */
	    _pUpdateImplicitPartition(value: Partition): void;
	    /**
	     * @protected
	     */
	    _pUpdateImplicitVisibility(value: boolean): void;
	    /**
	     * @protected
	     */
	    _pUpdateMatrix3D(): void;
	    /**
	     * @protected
	     */
	    pUpdateSceneTransform(): void;
	    _iAddRenderable(renderable: IRenderable): IRenderable;
	    _iRemoveRenderable(renderable: IRenderable): IRenderable;
	    /**
	     * //TODO
	     *
	     * @param shortestCollisionDistance
	     * @param findClosest
	     * @returns {boolean}
	     *
	     * @internal
	     */
	    _iTestCollision(shortestCollisionDistance: number, findClosest: boolean): boolean;
	    /**
	     *
	     */
	    _iInternalUpdate(): void;
	    /**
	     * @internal
	     */
	    _iIsVisible(): boolean;
	    /**
	     * @internal
	     */
	    _iIsMouseEnabled(): boolean;
	    /**
	     * @internal
	     */
	    _iSetScene(value: Scene): void;
	    /**
	     * @protected
	     */
	    _pUpdateScene(value: Scene): void;
	    /**
	     * @private
	     */
	    private notifyPositionChanged();
	    /**
	     * @private
	     */
	    private notifyRotationChanged();
	    /**
	     * @private
	     */
	    private notifyScaleChanged();
	    /**
	     * @private
	     */
	    private notifySceneChange();
	    /**
	     * @private
	     */
	    private notifySceneTransformChange();
	    /**
	     * Invalidates the 3D transformation matrix, causing it to be updated upon the next request
	     *
	     * @private
	     */
	    private invalidateMatrix3D();
	    /**
	     * @private
	     */
	    private invalidatePartition();
	    /**
	     * @private
	     */
	    private invalidatePivot();
	    /**
	     * @private
	     */
	    private invalidatePosition();
	    /**
	     * @private
	     */
	    private invalidateRotation();
	    /**
	     * @private
	     */
	    private invalidateScale();
	}
	export = DisplayObject;
	
}
declare module "awayjs-display/lib/base/Transform" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Matrix = require("awayjs-core/lib/geom/Matrix");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import PerspectiveProjection = require("awayjs-core/lib/projections/PerspectiveProjection");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	/**
	 * The Transform class provides access to color adjustment properties and two-
	 * or three-dimensional transformation objects that can be applied to a
	 * display object. During the transformation, the color or the orientation and
	 * position of a display object is adjusted(offset) from the current values
	 * or coordinates to new values or coordinates. The Transform class also
	 * collects data about color and two-dimensional matrix transformations that
	 * are applied to a display object and all of its parent objects. You can
	 * access these combined transformations through the
	 * <code>concatenatedColorTransform</code> and <code>concatenatedMatrix</code>
	 * properties.
	 *
	 * <p>To apply color transformations: create a ColorTransform object, set the
	 * color adjustments using the object's methods and properties, and then
	 * assign the <code>colorTransformation</code> property of the
	 * <code>transform</code> property of the display object to the new
	 * ColorTransformation object.</p>
	 *
	 * <p>To apply two-dimensional transformations: create a Matrix object, set
	 * the matrix's two-dimensional transformation, and then assign the
	 * <code>transform.matrix</code> property of the display object to the new
	 * Matrix object.</p>
	 *
	 * <p>To apply three-dimensional transformations: start with a
	 * three-dimensional display object. A three-dimensional display object has a
	 * <code>z</code> property value other than zero. You do not need to create
	 * the Matrix3D object. For all three-dimensional objects, a Matrix3D object
	 * is created automatically when you assign a <code>z</code> value to a
	 * display object. You can access the display object's Matrix3D object through
	 * the display object's <code>transform</code> property. Using the methods of
	 * the Matrix3D class, you can add to or modify the existing transformation
	 * settings. Also, you can create a custom Matrix3D object, set the custom
	 * Matrix3D object's transformation elements, and then assign the new Matrix3D
	 * object to the display object using the <code>transform.matrix</code>
	 * property.</p>
	 *
	 * <p>To modify a perspective projection of the stage or root object: use the
	 * <code>transform.matrix</code> property of the root display object to gain
	 * access to the PerspectiveProjection object. Or, apply different perspective
	 * projection properties to a display object by setting the perspective
	 * projection properties of the display object's parent. The child display
	 * object inherits the new properties. Specifically, create a
	 * PerspectiveProjection object and set its properties, then assign the
	 * PerspectiveProjection object to the <code>perspectiveProjection</code>
	 * property of the parent display object's <code>transform</code> property.
	 * The specified projection transformation then applies to all the display
	 * object's three-dimensional children.</p>
	 *
	 * <p>Since both PerspectiveProjection and Matrix3D objects perform
	 * perspective transformations, do not assign both to a display object at the
	 * same time. Use the PerspectiveProjection object for focal length and
	 * projection center changes. For more control over the perspective
	 * transformation, create a perspective projection Matrix3D object.</p>
	 */
	class Transform {
	    private _displayObject;
	    private _concatenatedColorTransform;
	    private _concatenatedMatrix;
	    private _pixelBounds;
	    _position: Vector3D;
	    /**
	     *
	     */
	    backVector: Vector3D;
	    /**
	     * A ColorTransform object containing values that universally adjust the
	     * colors in the display object.
	     *
	     * @throws TypeError The colorTransform is null when being set
	     */
	    colorTransform: ColorTransform;
	    /**
	     * A ColorTransform object representing the combined color transformations
	     * applied to the display object and all of its parent objects, back to the
	     * root level. If different color transformations have been applied at
	     * different levels, all of those transformations are concatenated into one
	     * ColorTransform object for this property.
	     */
	    concatenatedColorTransform: ColorTransform;
	    /**
	     * A Matrix object representing the combined transformation matrixes of the
	     * display object and all of its parent objects, back to the root level. If
	     * different transformation matrixes have been applied at different levels,
	     * all of those matrixes are concatenated into one matrix for this property.
	     * Also, for resizeable SWF content running in the browser, this property
	     * factors in the difference between stage coordinates and window coordinates
	     * due to window resizing. Thus, the property converts local coordinates to
	     * window coordinates, which may not be the same coordinate space as that of
	     * the Stage.
	     */
	    concatenatedMatrix: Matrix;
	    /**
	     *
	     */
	    downVector: Vector3D;
	    /**
	     *
	     */
	    forwardVector: Vector3D;
	    /**
	     *
	     */
	    leftVector: Vector3D;
	    /**
	     * A Matrix object containing values that alter the scaling, rotation, and
	     * translation of the display object.
	     *
	     * <p>If the <code>matrix</code> property is set to a value(not
	     * <code>null</code>), the <code>matrix3D</code> property is
	     * <code>null</code>. And if the <code>matrix3D</code> property is set to a
	     * value(not <code>null</code>), the <code>matrix</code> property is
	     * <code>null</code>.</p>
	     *
	     * @throws TypeError The matrix is null when being set
	     */
	    matrix: Matrix;
	    /**
	     * Provides access to the Matrix3D object of a three-dimensional display
	     * object. The Matrix3D object represents a transformation matrix that
	     * determines the display object's position and orientation. A Matrix3D
	     * object can also perform perspective projection.
	     *
	     * <p>If the <code>matrix</code> property is set to a value(not
	     * <code>null</code>), the <code>matrix3D</code> property is
	     * <code>null</code>. And if the <code>matrix3D</code> property is set to a
	     * value(not <code>null</code>), the <code>matrix</code> property is
	     * <code>null</code>.</p>
	     */
	    matrix3D: Matrix3D;
	    /**
	     * Provides access to the PerspectiveProjection object of a three-dimensional
	     * display object. The PerspectiveProjection object can be used to modify the
	     * perspective transformation of the stage or to assign a perspective
	     * transformation to all the three-dimensional children of a display object.
	     *
	     * <p>Based on the field of view and aspect ratio(dimensions) of the stage,
	     * a default PerspectiveProjection object is assigned to the root object.</p>
	     */
	    perspectiveProjection: PerspectiveProjection;
	    /**
	     * A Rectangle object that defines the bounding rectangle of the display
	     * object on the stage.
	     */
	    pixelBounds: Rectangle;
	    /**
	     * Defines the position of the 3d object, relative to the local coordinates of the parent <code>ObjectContainer3D</code>.
	     */
	    position: Vector3D;
	    /**
	     *
	     */
	    rightVector: Vector3D;
	    /**
	     * Defines the rotation of the 3d object, relative to the local coordinates of the parent <code>ObjectContainer3D</code>.
	     */
	    rotation: Vector3D;
	    /**
	     * Defines the scale of the 3d object, relative to the local coordinates of the parent <code>ObjectContainer3D</code>.
	     */
	    scale: Vector3D;
	    /**
	     *
	     */
	    upVector: Vector3D;
	    constructor(displayObject: DisplayObject);
	    /**
	     * Returns a Matrix3D object, which can transform the space of a specified
	     * display object in relation to the current display object's space. You can
	     * use the <code>getRelativeMatrix3D()</code> method to move one
	     * three-dimensional display object relative to another three-dimensional
	     * display object.
	     *
	     * @param relativeTo The display object relative to which the transformation
	     *                   occurs. To get a Matrix3D object relative to the stage,
	     *                   set the parameter to the <code>root</code> or
	     *                   <code>stage</code> object. To get the world-relative
	     *                   matrix of the display object, set the parameter to a
	     *                   display object that has a perspective transformation
	     *                   applied to it.
	     * @return A Matrix3D object that can be used to transform the space from the
	     *         <code>relativeTo</code> display object to the current display
	     *         object space.
	     */
	    getRelativeMatrix3D(relativeTo: DisplayObject): Matrix3D;
	    /**
	     * Moves the 3d object forwards along it's local z axis
	     *
	     * @param    distance    The length of the movement
	     */
	    moveForward(distance: number): void;
	    /**
	     * Moves the 3d object backwards along it's local z axis
	     *
	     * @param    distance    The length of the movement
	     */
	    moveBackward(distance: number): void;
	    /**
	     * Moves the 3d object backwards along it's local x axis
	     *
	     * @param    distance    The length of the movement
	     */
	    moveLeft(distance: number): void;
	    /**
	     * Moves the 3d object forwards along it's local x axis
	     *
	     * @param    distance    The length of the movement
	     */
	    moveRight(distance: number): void;
	    /**
	     * Moves the 3d object forwards along it's local y axis
	     *
	     * @param    distance    The length of the movement
	     */
	    moveUp(distance: number): void;
	    /**
	     * Moves the 3d object backwards along it's local y axis
	     *
	     * @param    distance    The length of the movement
	     */
	    moveDown(distance: number): void;
	}
	export = Transform;
	
}
declare module "awayjs-display/lib/entities/IEntity" {
	import BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import Transform = require("awayjs-display/lib/base/Transform");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import ControllerBase = require("awayjs-display/lib/controllers/ControllerBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Partition = require("awayjs-display/lib/partition/Partition");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IPickingCollider = require("awayjs-display/lib/pick/IPickingCollider");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	interface IEntity extends IAsset {
	    x: number;
	    y: number;
	    z: number;
	    rotationX: number;
	    rotationY: number;
	    rotationZ: number;
	    scaleX: number;
	    scaleY: number;
	    scaleZ: number;
	    /**
	     *
	     */
	    bounds: BoundingVolumeBase;
	    /**
	     *
	     */
	    castsShadows: boolean;
	    /**
	     *
	     */
	    inverseSceneTransform: Matrix3D;
	    /**
	     *
	     */
	    partitionNode: EntityNode;
	    /**
	     *
	     */
	    pickingCollider: IPickingCollider;
	    /**
	     *
	     */
	    transform: Transform;
	    /**
	     *
	     */
	    scene: Scene;
	    /**
	     *
	     */
	    scenePosition: Vector3D;
	    /**
	     *
	     */
	    sceneTransform: Matrix3D;
	    /**
	     *
	     */
	    worldBounds: BoundingVolumeBase;
	    /**
	     *
	     */
	    zOffset: number;
	    /**
	     *
	     */
	    isIntersectingRay(rayPosition: Vector3D, rayDirection: Vector3D): boolean;
	    /**
	     *
	     *
	     * @param target
	     * @param upAxis
	     */
	    lookAt(target: Vector3D, upAxis?: Vector3D): any;
	    /**
	     * @internal
	     */
	    _iPickingCollisionVO: PickingCollisionVO;
	    /**
	     * @internal
	     */
	    _iController: ControllerBase;
	    /**
	     * @internal
	     */
	    _iAssignedPartition: Partition;
	    /**
	     * //TODO
	     *
	     * @param shortestCollisionDistance
	     * @param findClosest
	     * @returns {boolean}
	     *
	     * @internal
	     */
	    _iTestCollision(shortestCollisionDistance: number, findClosest: boolean): boolean;
	    /**
	     * @internal
	     */
	    _iIsMouseEnabled(): boolean;
	    /**
	     * @internal
	     */
	    _iIsVisible(): boolean;
	    _iInternalUpdate(): any;
	    /**
	     * The transformation matrix that transforms from model to world space, adapted with any special operations needed to render.
	     * For example, assuring certain alignedness which is not inherent in the scene transform. By default, this would
	     * return the scene transform.
	     */
	    getRenderSceneTransform(camera: Camera): Matrix3D;
	    /**
	     *
	     * @param renderer
	     * @private
	     */
	    _iCollectRenderables(renderer: IRenderer): any;
	}
	export = IEntity;
	
}
declare module "awayjs-display/lib/pool/IRenderable" {
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * IRenderable is an interface for classes that are used in the rendering pipeline to render the
	 * contents of a partition
	 *
	 * @class away.render.IRenderable
	 */
	interface IRenderable {
	    /**
	     *
	     */
	    next: IRenderable;
	    /**
	     *
	     */
	    materialId: number;
	    /**
	     *
	     */
	    materialOwner: IMaterialOwner;
	    /**
	     *
	     */
	    sourceEntity: IEntity;
	    /**
	     *
	     */
	    renderOrderId: number;
	    /**
	     *
	     */
	    zIndex: number;
	    /**
	     *
	     */
	    dispose(): any;
	    /**
	     *
	     */
	    invalidateGeometry(): any;
	    /**
	     *
	     */
	    invalidateIndexData(): any;
	    /**
	     *
	     */
	    invalidateVertexData(dataType: string): any;
	}
	export = IRenderable;
	
}
declare module "awayjs-display/lib/pool/IMaterialData" {
	/**
	 * IMaterialData is an interface for classes that are used in the rendering pipeline to render the
	 * contents of a texture
	 *
	 * @class away.pool.IMaterialData
	 */
	interface IMaterialData {
	    /**
	     *
	     */
	    dispose(): any;
	    /**
	     *
	     */
	    invalidateMaterial(): any;
	    /**
	     *
	     */
	    invalidateAnimation(): any;
	}
	export = IMaterialData;
	
}
declare module "awayjs-display/lib/materials/lightpickers/LightPickerBase" {
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
	import LightProbe = require("awayjs-display/lib/entities/LightProbe");
	import PointLight = require("awayjs-display/lib/entities/PointLight");
	/**
	 * LightPickerBase provides an abstract base clase for light picker classes. These classes are responsible for
	 * feeding materials with relevant lights. Usually, StaticLightPicker can be used, but LightPickerBase can be
	 * extended to provide more application-specific dynamic selection of lights.
	 *
	 * @see StaticLightPicker
	 */
	class LightPickerBase extends NamedAssetBase implements IAsset {
	    _pNumPointLights: number;
	    _pNumDirectionalLights: number;
	    _pNumCastingPointLights: number;
	    _pNumCastingDirectionalLights: number;
	    _pNumLightProbes: number;
	    _pAllPickedLights: LightBase[];
	    _pPointLights: PointLight[];
	    _pCastingPointLights: PointLight[];
	    _pDirectionalLights: DirectionalLight[];
	    _pCastingDirectionalLights: DirectionalLight[];
	    _pLightProbes: LightProbe[];
	    _pLightProbeWeights: number[];
	    /**
	     * Creates a new LightPickerBase object.
	     */
	    constructor();
	    /**
	     * Disposes resources used by the light picker.
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    /**
	     * The maximum amount of directional lights that will be provided.
	     */
	    numDirectionalLights: number;
	    /**
	     * The maximum amount of point lights that will be provided.
	     */
	    numPointLights: number;
	    /**
	     * The maximum amount of directional lights that cast shadows.
	     */
	    numCastingDirectionalLights: number;
	    /**
	     * The amount of point lights that cast shadows.
	     */
	    numCastingPointLights: number;
	    /**
	     * The maximum amount of light probes that will be provided.
	     */
	    numLightProbes: number;
	    /**
	     * The collected point lights to be used for shading.
	     */
	    pointLights: PointLight[];
	    /**
	     * The collected directional lights to be used for shading.
	     */
	    directionalLights: DirectionalLight[];
	    /**
	     * The collected point lights that cast shadows to be used for shading.
	     */
	    castingPointLights: PointLight[];
	    /**
	     * The collected directional lights that cast shadows to be used for shading.
	     */
	    castingDirectionalLights: DirectionalLight[];
	    /**
	     * The collected light probes to be used for shading.
	     */
	    lightProbes: LightProbe[];
	    /**
	     * The weights for each light probe, defining their influence on the object.
	     */
	    lightProbeWeights: number[];
	    /**
	     * A collection of all the collected lights.
	     */
	    allPickedLights: LightBase[];
	    /**
	     * Updates set of lights for a given renderable and EntityCollector. Always call super.collectLights() after custom overridden code.
	     */
	    collectLights(renderable: IRenderable): void;
	    /**
	     * Updates the weights for the light probes, based on the renderable's position relative to them.
	     * @param renderable The renderble for which to calculate the light probes' influence.
	     */
	    private updateProbeWeights(renderable);
	}
	export = LightPickerBase;
	
}
declare module "awayjs-display/lib/materials/passes/IMaterialPass" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import IStage = require("awayjs-display/lib/base/IStage");
	import IMaterialPassData = require("awayjs-display/lib/pool/IMaterialPassData");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import LightPickerBase = require("awayjs-display/lib/materials/lightpickers/LightPickerBase");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	/**
	 * MaterialPassBase provides an abstract base class for material shader passes. A material pass constitutes at least
	 * a render call per required renderable.
	 */
	interface IMaterialPass extends IAsset {
	    /**
	     * Renders an object to the current render target.
	     *
	     * @private
	     */
	    _iRender(pass: IMaterialPassData, renderable: IRenderable, stage: IStage, camera: Camera, viewProjection: Matrix3D): any;
	    /**
	     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before
	     * calling renderPass. Before activating a pass, the previously used pass needs to be deactivated.
	     * @param stage The Stage object which is currently used for rendering.
	     * @param camera The camera from which the scene is viewed.
	     * @private
	     */
	    _iActivate(pass: IMaterialPassData, renderer: IRenderer, camera: Camera): any;
	    /**
	     * Clears the render state for the pass. This needs to be called before activating another pass.
	     * @param stage The Stage used for rendering
	     *
	     * @private
	     */
	    _iDeactivate(pass: IMaterialPassData, renderer: IRenderer): any;
	    /**
	     * The light picker used by the material to provide lights to the material if it supports lighting.
	     *
	     * @see away.materials.LightPickerBase
	     * @see away.materials.StaticLightPicker
	     */
	    lightPicker: LightPickerBase;
	}
	export = IMaterialPass;
	
}
declare module "awayjs-display/lib/pool/IMaterialPassData" {
	import IMaterialPass = require("awayjs-display/lib/materials/passes/IMaterialPass");
	/**
	 * IMaterialPassData is an interface for classes that are used in the rendering pipeline to render the
	 * contents of a material pass
	 *
	 * @class away.pool.IMaterialPassData
	 */
	interface IMaterialPassData {
	    /**
	     *
	     */
	    materialPass: IMaterialPass;
	    /**
	     *
	     */
	    dispose(): any;
	    /**
	     *
	     */
	    invalidate(): any;
	}
	export = IMaterialPassData;
	
}
declare module "awayjs-display/lib/materials/MaterialBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import IAnimationSet = require("awayjs-display/lib/animators/IAnimationSet");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import IStage = require("awayjs-display/lib/base/IStage");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import IMaterialData = require("awayjs-display/lib/pool/IMaterialData");
	import IMaterialPassData = require("awayjs-display/lib/pool/IMaterialPassData");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import LightPickerBase = require("awayjs-display/lib/materials/lightpickers/LightPickerBase");
	import IMaterialPass = require("awayjs-display/lib/materials/passes/IMaterialPass");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	/**
	 * MaterialBase forms an abstract base class for any material.
	 * A material consists of several passes, each of which constitutes at least one render call. Several passes could
	 * be used for special effects (render lighting for many lights in several passes, render an outline in a separate
	 * pass) or to provide additional render-to-texture passes (rendering diffuse light to texture for texture-space
	 * subsurface scattering, or rendering a depth map for specialized self-shadowing).
	 *
	 * Away3D provides default materials trough SinglePassMaterialBase and TriangleMaterial, which use modular
	 * methods to build the shader code. MaterialBase can be extended to build specific and high-performant custom
	 * shaders, or entire new material frameworks.
	 */
	class MaterialBase extends NamedAssetBase implements IAsset {
	    private _sizeChanged;
	    private _materialPassData;
	    private _materialData;
	    _pAlphaThreshold: number;
	    _pAnimateUVs: boolean;
	    private _enableLightFallOff;
	    private _specularLightSources;
	    private _diffuseLightSources;
	    /**
	     * An object to contain any extra data.
	     */
	    extra: Object;
	    /**
	     * A value that can be used by materials that only work with a given type of renderer. The renderer can test the
	     * classification to choose which render path to use. For example, a deferred material could set this value so
	     * that the deferred renderer knows not to take the forward rendering path.
	     *
	     * @private
	     */
	    _iClassification: string;
	    /**
	     * An id for this material used to sort the renderables by shader program, which reduces Program state changes.
	     *
	     * @private
	     */
	    _iMaterialId: number;
	    _iBaseScreenPassIndex: number;
	    private _bothSides;
	    private _animationSet;
	    _pScreenPassesInvalid: boolean;
	    /**
	     * A list of material owners, renderables or custom Entities.
	     */
	    private _owners;
	    private _alphaPremultiplied;
	    _pBlendMode: string;
	    private _numPasses;
	    private _passes;
	    private _mipmap;
	    private _smooth;
	    private _repeat;
	    private _color;
	    _pTexture: Texture2DBase;
	    _pLightPicker: LightPickerBase;
	    _pHeight: number;
	    _pWidth: number;
	    _pRequiresBlending: boolean;
	    private _onPassChangeDelegate;
	    private _onLightChangeDelegate;
	    /**
	     * Creates a new MaterialBase object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    /**
	     *
	     */
	    height: number;
	    /**
	     *
	     */
	    animationSet: IAnimationSet;
	    /**
	     * The light picker used by the material to provide lights to the material if it supports lighting.
	     *
	     * @see LightPickerBase
	     * @see StaticLightPicker
	     */
	    lightPicker: LightPickerBase;
	    /**
	     * Indicates whether or not any used textures should use mipmapping. Defaults to true.
	     */
	    mipmap: boolean;
	    /**
	     * Indicates whether or not any used textures should use smoothing.
	     */
	    smooth: boolean;
	    /**
	     * Indicates whether or not any used textures should be tiled. If set to false, texture samples are clamped to
	     * the texture's borders when the uv coordinates are outside the [0, 1] interval.
	     */
	    repeat: boolean;
	    /**
	     * The diffuse reflectivity color of the surface.
	     */
	    color: number;
	    /**
	     * The texture object to use for the albedo colour.
	     */
	    texture: Texture2DBase;
	    /**
	     * Specifies whether or not the UV coordinates should be animated using a transformation matrix.
	     */
	    animateUVs: boolean;
	    /**
	     * Whether or not to use fallOff and radius properties for lights. This can be used to improve performance and
	     * compatibility for constrained mode.
	     */
	    enableLightFallOff: boolean;
	    /**
	     * Define which light source types to use for diffuse reflections. This allows choosing between regular lights
	     * and/or light probes for diffuse reflections.
	     *
	     * @see away3d.materials.LightSources
	     */
	    diffuseLightSources: number;
	    /**
	     * Define which light source types to use for specular reflections. This allows choosing between regular lights
	     * and/or light probes for specular reflections.
	     *
	     * @see away3d.materials.LightSources
	     */
	    specularLightSources: number;
	    /**
	     * Cleans up resources owned by the material, including passes. Textures are not owned by the material since they
	     * could be used by other materials and will not be disposed.
	     */
	    dispose(): void;
	    /**
	     * Defines whether or not the material should cull triangles facing away from the camera.
	     */
	    bothSides: boolean;
	    /**
	     * The blend mode to use when drawing this renderable. The following blend modes are supported:
	     * <ul>
	     * <li>BlendMode.NORMAL: No blending, unless the material inherently needs it</li>
	     * <li>BlendMode.LAYER: Force blending. This will draw the object the same as NORMAL, but without writing depth writes.</li>
	     * <li>BlendMode.MULTIPLY</li>
	     * <li>BlendMode.ADD</li>
	     * <li>BlendMode.ALPHA</li>
	     * </ul>
	     */
	    blendMode: string;
	    /**
	     * Indicates whether visible textures (or other pixels) used by this material have
	     * already been premultiplied. Toggle this if you are seeing black halos around your
	     * blended alpha edges.
	     */
	    alphaPremultiplied: boolean;
	    /**
	     * The minimum alpha value for which pixels should be drawn. This is used for transparency that is either
	     * invisible or entirely opaque, often used with textures for foliage, etc.
	     * Recommended values are 0 to disable alpha, or 0.5 to create smooth edges. Default value is 0 (disabled).
	     */
	    alphaThreshold: number;
	    /**
	     * Indicates whether or not the material requires alpha blending during rendering.
	     */
	    requiresBlending: boolean;
	    /**
	     *
	     */
	    width: number;
	    /**
	     * Sets the render state for a pass that is independent of the rendered object. This needs to be called before
	     * calling renderPass. Before activating a pass, the previously used pass needs to be deactivated.
	     * @param pass The pass data to activate.
	     * @param stage The Stage object which is currently used for rendering.
	     * @param camera The camera from which the scene is viewed.
	     * @private
	     */
	    _iActivatePass(pass: IMaterialPassData, renderer: IRenderer, camera: Camera): void;
	    /**
	     * Clears the render state for a pass. This needs to be called before activating another pass.
	     * @param pass The pass to deactivate.
	     * @param stage The Stage used for rendering
	     *
	     * @internal
	     */
	    _iDeactivatePass(pass: IMaterialPassData, renderer: IRenderer): void;
	    /**
	     * Renders the current pass. Before calling renderPass, activatePass needs to be called with the same index.
	     * @param pass The pass used to render the renderable.
	     * @param renderable The IRenderable object to draw.
	     * @param stage The Stage object used for rendering.
	     * @param entityCollector The EntityCollector object that contains the visible scene data.
	     * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as
	     * camera.viewProjection as it includes the scaling factors when rendering to textures.
	     *
	     * @internal
	     */
	    _iRenderPass(pass: IMaterialPassData, renderable: IRenderable, stage: IStage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     * Mark an IMaterialOwner as owner of this material.
	     * Assures we're not using the same material across renderables with different animations, since the
	     * Programs depend on animation. This method needs to be called when a material is assigned.
	     *
	     * @param owner The IMaterialOwner that had this material assigned
	     *
	     * @internal
	     */
	    iAddOwner(owner: IMaterialOwner): void;
	    /**
	     * Removes an IMaterialOwner as owner.
	     * @param owner
	     *
	     * @internal
	     */
	    iRemoveOwner(owner: IMaterialOwner): void;
	    /**
	     * A list of the IMaterialOwners that use this material
	     *
	     * @private
	     */
	    iOwners: IMaterialOwner[];
	    /**
	     * The amount of passes used by the material.
	     *
	     * @private
	     */
	    _iNumScreenPasses(): number;
	    /**
	     * A list of the screen passes used in this material
	     *
	     * @private
	     */
	    _iScreenPasses: IMaterialPass[];
	    /**
	     * Marks the shader programs for all passes as invalid, so they will be recompiled before the next use.
	     *
	     * @private
	     */
	    _pInvalidatePasses(): void;
	    /**
	     * Flags that the screen passes have become invalid and need possible re-ordering / adding / deleting
	     */
	    _pInvalidateScreenPasses(): void;
	    /**
	     * Removes a pass from the material.
	     * @param pass The pass to be removed.
	     */
	    _pRemoveScreenPass(pass: IMaterialPass): void;
	    /**
	     * Removes all passes from the material
	     */
	    _pClearScreenPasses(): void;
	    /**
	     * Adds a pass to the material
	     * @param pass
	     */
	    _pAddScreenPass(pass: IMaterialPass): void;
	    _iAddMaterialData(materialData: IMaterialData): IMaterialData;
	    _iRemoveMaterialData(materialData: IMaterialData): IMaterialData;
	    /**
	     * Performs any processing that needs to occur before any of its passes are used.
	     *
	     * @private
	     */
	    _iUpdateMaterial(): void;
	    /**
	     * Listener for when a pass's shader code changes. It recalculates the render order id.
	     */
	    private onPassChange(event);
	    private invalidateAnimation();
	    private invalidateMaterial();
	    /**
	     * Called when the light picker's configuration changed.
	     */
	    private onLightsChange(event);
	    _pNotifySizeChanged(): void;
	    _iAddMaterialPassData(materialPassData: IMaterialPassData): IMaterialPassData;
	    _iRemoveMaterialPassData(materialPassData: IMaterialPassData): IMaterialPassData;
	}
	export = MaterialBase;
	
}
declare module "awayjs-display/lib/base/IMaterialOwner" {
	import UVTransform = require("awayjs-core/lib/geom/UVTransform");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	/**
	 * IMaterialOwner provides an interface for objects that can use materials.
	 *
	 * @interface away.base.IMaterialOwner
	 */
	interface IMaterialOwner extends IAsset {
	    /**
	     * The animation used by the material owner to assemble the vertex code.
	     */
	    animator: IAnimator;
	    /**
	     * The material with which to render the object.
	     */
	    material: MaterialBase;
	    /**
	     *
	     */
	    uvTransform: UVTransform;
	    /**
	     *
	     * @param renderable
	     * @private
	     */
	    _iAddRenderable(renderable: IRenderable): IRenderable;
	    /**
	     *
	     * @param renderable
	     * @private
	     */
	    _iRemoveRenderable(renderable: IRenderable): IRenderable;
	    /**
	     *
	     * @param renderer
	     * @private
	     */
	    _iCollectRenderable(renderer: IRenderer): any;
	}
	export = IMaterialOwner;
	
}
declare module "awayjs-display/lib/base/ISubMesh" {
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * ISubMesh is an interface for object SubMesh that is used to
	 * apply a material to a SubGeometry class
	 *
	 * @class away.base.ISubMesh
	 */
	interface ISubMesh extends IMaterialOwner {
	    subGeometry: SubGeometryBase;
	    parentMesh: Mesh;
	    _iIndex: number;
	    _iInvalidateRenderableGeometry(): any;
	    _iGetExplicitMaterial(): MaterialBase;
	}
	export = ISubMesh;
	
}
declare module "awayjs-display/lib/base/ISubMeshClass" {
	import ISubMesh = require("awayjs-display/lib/base/ISubMesh");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * ISubMeshClass is an interface for the constructable class definition ISubMesh that is used to
	 * apply a material to a SubGeometry class
	 *
	 * @class away.base.ISubMeshClass
	 */
	interface ISubMeshClass {
	    /**
	     *
	     */
	    new (subGeometry: SubGeometryBase, parentMesh: Mesh, material?: MaterialBase): ISubMesh;
	}
	export = ISubMeshClass;
	
}
declare module "awayjs-display/lib/base/SubGeometryBase" {
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import ISubMeshClass = require("awayjs-display/lib/base/ISubMeshClass");
	/**
	 * @class away.base.TriangleSubGeometry
	 */
	class SubGeometryBase extends NamedAssetBase {
	    static VERTEX_DATA: string;
	    _pStrideOffsetDirty: boolean;
	    _pIndices: number[];
	    _pVertices: number[];
	    private _numIndices;
	    private _numTriangles;
	    _pNumVertices: number;
	    _pConcatenateArrays: boolean;
	    private _indicesUpdated;
	    _pStride: Object;
	    _pOffset: Object;
	    _pUpdateStrideOffset(): void;
	    _pSubMeshClass: ISubMeshClass;
	    subMeshClass: ISubMeshClass;
	    /**
	     *
	     */
	    concatenateArrays: boolean;
	    /**
	     * The raw index data that define the faces.
	     */
	    indices: number[];
	    /**
	     *
	     */
	    vertices: number[];
	    /**
	     * The total amount of triangles in the TriangleSubGeometry.
	     */
	    numTriangles: number;
	    numVertices: number;
	    /**
	     *
	     */
	    constructor(concatenatedArrays: boolean);
	    /**
	     *
	     */
	    getStride(dataType: string): any;
	    /**
	     *
	     */
	    getOffset(dataType: string): any;
	    updateVertices(): void;
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     * Updates the face indices of the TriangleSubGeometry.
	     *
	     * @param indices The face indices to upload.
	     */
	    updateIndices(indices: number[]): void;
	    /**
	     * @protected
	     */
	    pInvalidateBounds(): void;
	    /**
	     * The Geometry object that 'owns' this TriangleSubGeometry object.
	     *
	     * @private
	     */
	    parentGeometry: Geometry;
	    /**
	     * Clones the current object
	     * @return An exact duplicate of the current object.
	     */
	    clone(): SubGeometryBase;
	    applyTransformation(transform: Matrix3D): void;
	    /**
	     * Scales the geometry.
	     * @param scale The amount by which to scale.
	     */
	    scale(scale: number): void;
	    scaleUV(scaleU?: number, scaleV?: number): void;
	    getBoundingPositions(): number[];
	    private notifyIndicesUpdate();
	    _pNotifyVerticesUpdate(): void;
	}
	export = SubGeometryBase;
	
}
declare module "awayjs-display/lib/animators/IAnimator" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import IAnimationSet = require("awayjs-display/lib/animators/IAnimationSet");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * Provides an interface for animator classes that control animation output from a data set subtype of <code>AnimationSetBase</code>.
	 *
	 * @see away.animators.IAnimationSet
	 */
	interface IAnimator extends IAsset {
	    /**
	     *
	     */
	    animationSet: IAnimationSet;
	    /**
	     *
	     */
	    clone(): IAnimator;
	    /**
	     *
	     */
	    dispose(): any;
	    /**
	     * Used by the entity object to which the animator is applied, registers the owner for internal use.
	     *
	     * @private
	     */
	    addOwner(mesh: IEntity): any;
	    /**
	     * Used by the mesh object from which the animator is removed, unregisters the owner for internal use.
	     *
	     * @private
	     */
	    removeOwner(mesh: IEntity): any;
	    /**
	     * //TODO
	     *
	     * @param sourceSubGeometry
	     */
	    getRenderableSubGeometry(renderable: IRenderable, sourceSubGeometry: SubGeometryBase): SubGeometryBase;
	}
	export = IAnimator;
	
}
declare module "awayjs-display/lib/base/CapsStyle" {
	/**
	 * The CapsStyle class is an enumeration of constant values that specify the
	 * caps style to use in drawing lines. The constants are provided for use as
	 * values in the <code>caps</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method. You can specify the
	 * following three types of caps:
	 */
	class CapsStyle {
	    /**
	     * Used to specify round caps in the <code>caps</code> parameter of the
	     * <code>flash.display.Graphics.lineStyle()</code> method.
	     */
	    static ROUND: string;
	    /**
	     * Used to specify no caps in the <code>caps</code> parameter of the
	     * <code>flash.display.Graphics.lineStyle()</code> method.
	     */
	    static NONE: string;
	    /**
	     * Used to specify square caps in the <code>caps</code> parameter of the
	     * <code>flash.display.Graphics.lineStyle()</code> method.
	     */
	    static SQUARE: string;
	}
	export = CapsStyle;
	
}
declare module "awayjs-display/lib/base/GradientType" {
	/**
	 * The GradientType class provides values for the <code>type</code> parameter
	 * in the <code>beginGradientFill()</code> and
	 * <code>lineGradientStyle()</code> methods of the flash.display.Graphics
	 * class.
	 */
	class GradientType {
	    /**
	     * Value used to specify a linear gradient fill.
	     */
	    static LINEAR: string;
	    /**
	     * Value used to specify a radial gradient fill.
	     */
	    static RADIAL: string;
	}
	export = GradientType;
	
}
declare module "awayjs-display/lib/base/GraphicsPathWinding" {
	/**
	 * The GraphicsPathWinding class provides values for the
	 * <code>flash.display.GraphicsPath.winding</code> property and the
	 * <code>flash.display.Graphics.drawPath()</code> method to determine the
	 * direction to draw a path. A clockwise path is positively wound, and a
	 * counter-clockwise path is negatively wound:
	 *
	 * <p> When paths intersect or overlap, the winding direction determines the
	 * rules for filling the areas created by the intersection or overlap:</p>
	 */
	class GraphicsPathWinding {
	    static EVEN_ODD: string;
	    static NON_ZERO: string;
	}
	export = GraphicsPathWinding;
	
}
declare module "awayjs-display/lib/base/IGraphicsData" {
	/**
	 * This interface is used to define objects that can be used as parameters in the
	 * <code>away.base.Graphics</code> methods, including fills, strokes, and paths. Use
	 * the implementor classes of this interface to create and manage drawing property
	 * data, and to reuse the same data for different instances. Then, use the methods of
	 * the Graphics class to render the drawing objects.
	 *
	 * @see away.base.Graphics.drawGraphicsData()
	 * @see away.base.Graphics.readGraphicsData()
	 */
	interface IGraphicsData {
	}
	export = IGraphicsData;
	
}
declare module "awayjs-display/lib/base/InterpolationMethod" {
	/**
	 * The InterpolationMethod class provides values for the
	 * <code>interpolationMethod</code> parameter in the
	 * <code>Graphics.beginGradientFill()</code> and
	 * <code>Graphics.lineGradientStyle()</code> methods. This parameter
	 * determines the RGB space to use when rendering the gradient.
	 */
	class InterpolationMethod {
	    /**
	     * Specifies that the RGB interpolation method should be used. This means
	     * that the gradient is rendered with exponential sRGB(standard RGB) space.
	     * The sRGB space is a W3C-endorsed standard that defines a non-linear
	     * conversion between red, green, and blue component values and the actual
	     * intensity of the visible component color.
	     *
	     * <p>For example, consider a simple linear gradient between two colors(with
	     * the <code>spreadMethod</code> parameter set to
	     * <code>SpreadMethod.REFLECT</code>). The different interpolation methods
	     * affect the appearance as follows: </p>
	     */
	    static LINEAR_RGB: string;
	    /**
	     * Specifies that the RGB interpolation method should be used. This means
	     * that the gradient is rendered with exponential sRGB(standard RGB) space.
	     * The sRGB space is a W3C-endorsed standard that defines a non-linear
	     * conversion between red, green, and blue component values and the actual
	     * intensity of the visible component color.
	     *
	     * <p>For example, consider a simple linear gradient between two colors(with
	     * the <code>spreadMethod</code> parameter set to
	     * <code>SpreadMethod.REFLECT</code>). The different interpolation methods
	     * affect the appearance as follows: </p>
	     */
	    static RGB: string;
	}
	export = InterpolationMethod;
	
}
declare module "awayjs-display/lib/base/JointStyle" {
	/**
	 * The JointStyle class is an enumeration of constant values that specify the
	 * joint style to use in drawing lines. These constants are provided for use
	 * as values in the <code>joints</code> parameter of the
	 * <code>flash.display.Graphics.lineStyle()</code> method. The method supports
	 * three types of joints: miter, round, and bevel, as the following example
	 * shows:
	 */
	class JointStyle {
	    /**
	     * Specifies beveled joints in the <code>joints</code> parameter of the
	     * <code>flash.display.Graphics.lineStyle()</code> method.
	     */
	    static BEVEL: string;
	    /**
	     * Specifies mitered joints in the <code>joints</code> parameter of the
	     * <code>flash.display.Graphics.lineStyle()</code> method.
	     */
	    static MITER: string;
	    /**
	     * Specifies round joints in the <code>joints</code> parameter of the
	     * <code>flash.display.Graphics.lineStyle()</code> method.
	     */
	    static ROUND: string;
	}
	export = JointStyle;
	
}
declare module "awayjs-display/lib/base/LineScaleMode" {
	/**
	 * The LineScaleMode class provides values for the <code>scaleMode</code>
	 * parameter in the <code>Graphics.lineStyle()</code> method.
	 */
	class LineScaleMode {
	    /**
	     * With this setting used as the <code>scaleMode</code> parameter of the
	     * <code>lineStyle()</code> method, the thickness of the line scales
	     * <i>only</i> vertically. For example, consider the following circles, drawn
	     * with a one-pixel line, and each with the <code>scaleMode</code> parameter
	     * set to <code>LineScaleMode.VERTICAL</code>. The circle on the left is
	     * scaled only vertically, and the circle on the right is scaled both
	     * vertically and horizontally.
	     */
	    static HORIZONTAL: string;
	    /**
	     * With this setting used as the <code>scaleMode</code> parameter of the
	     * <code>lineStyle()</code> method, the thickness of the line never scales.
	     */
	    static NONE: string;
	    /**
	     * With this setting used as the <code>scaleMode</code> parameter of the
	     * <code>lineStyle()</code> method, the thickness of the line always scales
	     * when the object is scaled(the default).
	     */
	    static NORMAL: string;
	    /**
	     * With this setting used as the <code>scaleMode</code> parameter of the
	     * <code>lineStyle()</code> method, the thickness of the line scales
	     * <i>only</i> horizontally. For example, consider the following circles,
	     * drawn with a one-pixel line, and each with the <code>scaleMode</code>
	     * parameter set to <code>LineScaleMode.HORIZONTAL</code>. The circle on the
	     * left is scaled only horizontally, and the circle on the right is scaled
	     * both vertically and horizontally.
	     */
	    static VERTICAL: string;
	}
	export = LineScaleMode;
	
}
declare module "awayjs-display/lib/base/TriangleCulling" {
	/**
	 * Defines codes for culling algorithms that determine which triangles not to
	 * render when drawing triangle paths.
	 *
	 * <p> The terms <code>POSITIVE</code> and <code>NEGATIVE</code> refer to the
	 * sign of a triangle's normal along the z-axis. The normal is a 3D vector
	 * that is perpendicular to the surface of the triangle. </p>
	 *
	 * <p> A triangle whose vertices 0, 1, and 2 are arranged in a clockwise order
	 * has a positive normal value. That is, its normal points in a positive
	 * z-axis direction, away from the current view point. When the
	 * <code>TriangleCulling.POSITIVE</code> algorithm is used, triangles with
	 * positive normals are not rendered. Another term for this is backface
	 * culling. </p>
	 *
	 * <p> A triangle whose vertices are arranged in a counter-clockwise order has
	 * a negative normal value. That is, its normal points in a negative z-axis
	 * direction, toward the current view point. When the
	 * <code>TriangleCulling.NEGATIVE</code> algorithm is used, triangles with
	 * negative normals will not be rendered. </p>
	 */
	class TriangleCulling {
	    /**
	     * Specifies culling of all triangles facing toward the current view point.
	     */
	    static NEGATIVE: string;
	    /**
	     * Specifies no culling. All triangles in the path are rendered.
	     */
	    static NONE: string;
	    /**
	     * Specifies culling of all triangles facing away from the current view
	     * point. This is also known as backface culling.
	     */
	    static POSITIVE: string;
	}
	export = TriangleCulling;
	
}
declare module "awayjs-display/lib/base/SpreadMethod" {
	/**
	 * The SpreadMethod class provides values for the <code>spreadMethod</code>
	 * parameter in the <code>beginGradientFill()</code> and
	 * <code>lineGradientStyle()</code> methods of the Graphics class.
	 *
	 * <p>The following example shows the same gradient fill using various spread
	 * methods:</p>
	 */
	class SpreadMethod {
	    /**
	     * Specifies that the gradient use the <i>pad</i> spread method.
	     */
	    static PAD: string;
	    /**
	     * Specifies that the gradient use the <i>reflect</i> spread method.
	     */
	    static REFLECT: string;
	    /**
	     * Specifies that the gradient use the <i>repeat</i> spread method.
	     */
	    static REPEAT: string;
	}
	export = SpreadMethod;
	
}
declare module "awayjs-display/lib/base/Graphics" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import Matrix = require("awayjs-core/lib/geom/Matrix");
	import CapsStyle = require("awayjs-display/lib/base/CapsStyle");
	import GradientType = require("awayjs-display/lib/base/GradientType");
	import GraphicsPathWinding = require("awayjs-display/lib/base/GraphicsPathWinding");
	import IGraphicsData = require("awayjs-display/lib/base/IGraphicsData");
	import InterpolationMethod = require("awayjs-display/lib/base/InterpolationMethod");
	import JointStyle = require("awayjs-display/lib/base/JointStyle");
	import LineScaleMode = require("awayjs-display/lib/base/LineScaleMode");
	import TriangleCulling = require("awayjs-display/lib/base/TriangleCulling");
	import SpreadMethod = require("awayjs-display/lib/base/SpreadMethod");
	/**
	 * The Graphics class contains a set of methods that you can use to create a
	 * vector shape. Display objects that support drawing include Sprite and Shape
	 * objects. Each of these classes includes a <code>graphics</code> property
	 * that is a Graphics object. The following are among those helper functions
	 * provided for ease of use: <code>drawRect()</code>,
	 * <code>drawRoundRect()</code>, <code>drawCircle()</code>, and
	 * <code>drawEllipse()</code>.
	 *
	 * <p>You cannot create a Graphics object directly from ActionScript code. If
	 * you call <code>new Graphics()</code>, an exception is thrown.</p>
	 *
	 * <p>The Graphics class is final; it cannot be subclassed.</p>
	 */
	class Graphics {
	    /**
	     * Fills a drawing area with a bitmap image. The bitmap can be repeated or
	     * tiled to fill the area. The fill remains in effect until you call the
	     * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	     * method. Calling the <code>clear()</code> method clears the fill.
	     *
	     * <p>The application renders the fill whenever three or more points are
	     * drawn, or when the <code>endFill()</code> method is called. </p>
	     *
	     * @param bitmap A transparent or opaque bitmap image that contains the bits
	     *               to be displayed.
	     * @param matrix A matrix object(of the flash.geom.Matrix class), which you
	     *               can use to define transformations on the bitmap. For
	     *               example, you can use the following matrix to rotate a bitmap
	     *               by 45 degrees(pi/4 radians):
	     * @param repeat If <code>true</code>, the bitmap image repeats in a tiled
	     *               pattern. If <code>false</code>, the bitmap image does not
	     *               repeat, and the edges of the bitmap are used for any fill
	     *               area that extends beyond the bitmap.
	     *
	     *               <p>For example, consider the following bitmap(a 20 x
	     *               20-pixel checkerboard pattern):</p>
	     *
	     *               <p>When <code>repeat</code> is set to <code>true</code>(as
	     *               in the following example), the bitmap fill repeats the
	     *               bitmap:</p>
	     *
	     *               <p>When <code>repeat</code> is set to <code>false</code>,
	     *               the bitmap fill uses the edge pixels for the fill area
	     *               outside the bitmap:</p>
	     * @param smooth If <code>false</code>, upscaled bitmap images are rendered
	     *               by using a nearest-neighbor algorithm and look pixelated. If
	     *               <code>true</code>, upscaled bitmap images are rendered by
	     *               using a bilinear algorithm. Rendering by using the nearest
	     *               neighbor algorithm is faster.
	     */
	    beginBitmapFill(bitmap: BitmapData, matrix?: Matrix, repeat?: boolean, smooth?: boolean): void;
	    /**
	     * Specifies a simple one-color fill that subsequent calls to other Graphics
	     * methods(such as <code>lineTo()</code> or <code>drawCircle()</code>) use
	     * when drawing. The fill remains in effect until you call the
	     * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	     * method. Calling the <code>clear()</code> method clears the fill.
	     *
	     * <p>The application renders the fill whenever three or more points are
	     * drawn, or when the <code>endFill()</code> method is called.</p>
	     *
	     * @param color The color of the fill(0xRRGGBB).
	     * @param alpha The alpha value of the fill(0.0 to 1.0).
	     */
	    beginFill(color: number, alpha?: number): void;
	    /**
	     * Specifies a gradient fill used by subsequent calls to other Graphics
	     * methods(such as <code>lineTo()</code> or <code>drawCircle()</code>) for
	     * the object. The fill remains in effect until you call the
	     * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	     * method. Calling the <code>clear()</code> method clears the fill.
	     *
	     * <p>The application renders the fill whenever three or more points are
	     * drawn, or when the <code>endFill()</code> method is called. </p>
	     *
	     * @param type                A value from the GradientType class that
	     *                            specifies which gradient type to use:
	     *                            <code>GradientType.LINEAR</code> or
	     *                            <code>GradientType.RADIAL</code>.
	     * @param colors              An array of RGB hexadecimal color values used
	     *                            in the gradient; for example, red is 0xFF0000,
	     *                            blue is 0x0000FF, and so on. You can specify
	     *                            up to 15 colors. For each color, specify a
	     *                            corresponding value in the alphas and ratios
	     *                            parameters.
	     * @param alphas              An array of alpha values for the corresponding
	     *                            colors in the colors array; valid values are 0
	     *                            to 1. If the value is less than 0, the default
	     *                            is 0. If the value is greater than 1, the
	     *                            default is 1.
	     * @param ratios              An array of color distribution ratios; valid
	     *                            values are 0-255. This value defines the
	     *                            percentage of the width where the color is
	     *                            sampled at 100%. The value 0 represents the
	     *                            left position in the gradient box, and 255
	     *                            represents the right position in the gradient
	     *                            box.
	     * @param matrix              A transformation matrix as defined by the
	     *                            flash.geom.Matrix class. The flash.geom.Matrix
	     *                            class includes a
	     *                            <code>createGradientBox()</code> method, which
	     *                            lets you conveniently set up the matrix for use
	     *                            with the <code>beginGradientFill()</code>
	     *                            method.
	     * @param spreadMethod        A value from the SpreadMethod class that
	     *                            specifies which spread method to use, either:
	     *                            <code>SpreadMethod.PAD</code>,
	     *                            <code>SpreadMethod.REFLECT</code>, or
	     *                            <code>SpreadMethod.REPEAT</code>.
	     *
	     *                            <p>For example, consider a simple linear
	     *                            gradient between two colors:</p>
	     *
	     *                            <p>This example uses
	     *                            <code>SpreadMethod.PAD</code> for the spread
	     *                            method, and the gradient fill looks like the
	     *                            following:</p>
	     *
	     *                            <p>If you use <code>SpreadMethod.REFLECT</code>
	     *                            for the spread method, the gradient fill looks
	     *                            like the following:</p>
	     *
	     *                            <p>If you use <code>SpreadMethod.REPEAT</code>
	     *                            for the spread method, the gradient fill looks
	     *                            like the following:</p>
	     * @param interpolationMethod A value from the InterpolationMethod class that
	     *                            specifies which value to use:
	     *                            <code>InterpolationMethod.LINEAR_RGB</code> or
	     *                            <code>InterpolationMethod.RGB</code>
	     *
	     *                            <p>For example, consider a simple linear
	     *                            gradient between two colors(with the
	     *                            <code>spreadMethod</code> parameter set to
	     *                            <code>SpreadMethod.REFLECT</code>). The
	     *                            different interpolation methods affect the
	     *                            appearance as follows: </p>
	     * @param focalPointRatio     A number that controls the location of the
	     *                            focal point of the gradient. 0 means that the
	     *                            focal point is in the center. 1 means that the
	     *                            focal point is at one border of the gradient
	     *                            circle. -1 means that the focal point is at the
	     *                            other border of the gradient circle. A value
	     *                            less than -1 or greater than 1 is rounded to -1
	     *                            or 1. For example, the following example shows
	     *                            a <code>focalPointRatio</code> set to 0.75:
	     * @throws ArgumentError If the <code>type</code> parameter is not valid.
	     */
	    beginGradientFill(type: GradientType, colors: number[], alphas: number[], ratios: number[], matrix?: Matrix, spreadMethod?: string, interpolationMethod?: string, focalPointRatio?: number): void;
	    /**
	     * Specifies a shader fill used by subsequent calls to other Graphics methods
	     * (such as <code>lineTo()</code> or <code>drawCircle()</code>) for the
	     * object. The fill remains in effect until you call the
	     * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	     * method. Calling the <code>clear()</code> method clears the fill.
	     *
	     * <p>The application renders the fill whenever three or more points are
	     * drawn, or when the <code>endFill()</code> method is called.</p>
	     *
	     * <p>Shader fills are not supported under GPU rendering; filled areas will
	     * be colored cyan.</p>
	     *
	     * @param shader The shader to use for the fill. This Shader instance is not
	     *               required to specify an image input. However, if an image
	     *               input is specified in the shader, the input must be provided
	     *               manually. To specify the input, set the <code>input</code>
	     *               property of the corresponding ShaderInput property of the
	     *               <code>Shader.data</code> property.
	     *
	     *               <p>When you pass a Shader instance as an argument the shader
	     *               is copied internally. The drawing fill operation uses that
	     *               internal copy, not a reference to the original shader. Any
	     *               changes made to the shader, such as changing a parameter
	     *               value, input, or bytecode, are not applied to the copied
	     *               shader that's used for the fill.</p>
	     * @param matrix A matrix object(of the flash.geom.Matrix class), which you
	     *               can use to define transformations on the shader. For
	     *               example, you can use the following matrix to rotate a shader
	     *               by 45 degrees(pi/4 radians):
	     *
	     *               <p>The coordinates received in the shader are based on the
	     *               matrix that is specified for the <code>matrix</code>
	     *               parameter. For a default(<code>null</code>) matrix, the
	     *               coordinates in the shader are local pixel coordinates which
	     *               can be used to sample an input.</p>
	     * @throws ArgumentError When the shader output type is not compatible with
	     *                       this operation(the shader must specify a
	     *                       <code>pixel3</code> or <code>pixel4</code> output).
	     * @throws ArgumentError When the shader specifies an image input that isn't
	     *                       provided.
	     * @throws ArgumentError When a ByteArray or Vector.<Number> instance is used
	     *                       as an input and the <code>width</code> and
	     *                       <code>height</code> properties aren't specified for
	     *                       the ShaderInput, or the specified values don't match
	     *                       the amount of data in the input object. See the
	     *                       <code>ShaderInput.input</code> property for more
	     *                       information.
	     */
	    /**
	     * Clears the graphics that were drawn to this Graphics object, and resets
	     * fill and line style settings.
	     *
	     */
	    clear(): void;
	    /**
	     * Copies all of drawing commands from the source Graphics object into the
	     * calling Graphics object.
	     *
	     * @param sourceGraphics The Graphics object from which to copy the drawing
	     *                       commands.
	     */
	    copyFrom(sourceGraphics: Graphics): void;
	    /**
	     * Draws a cubic Bezier curve from the current drawing position to the
	     * specified anchor point. Cubic Bezier curves consist of two anchor points
	     * and two control points. The curve interpolates the two anchor points and
	     * curves toward the two control points.
	     *
	     * The four points you use to draw a cubic Bezier curve with the
	     * <code>cubicCurveTo()</code> method are as follows:
	     *
	     * <ul>
	     *   <li>The current drawing position is the first anchor point. </li>
	     *   <li>The anchorX and anchorY parameters specify the second anchor point.
	     *   </li>
	     *   <li>The <code>controlX1</code> and <code>controlY1</code> parameters
	     *   specify the first control point.</li>
	     *   <li>The <code>controlX2</code> and <code>controlY2</code> parameters
	     *   specify the second control point.</li>
	     * </ul>
	     *
	     * If you call the <code>cubicCurveTo()</code> method before calling the
	     * <code>moveTo()</code> method, your curve starts at position (0, 0).
	     *
	     * If the <code>cubicCurveTo()</code> method succeeds, the Flash runtime sets
	     * the current drawing position to (<code>anchorX</code>,
	     * <code>anchorY</code>). If the <code>cubicCurveTo()</code> method fails,
	     * the current drawing position remains unchanged.
	     *
	     * If your movie clip contains content created with the Flash drawing tools,
	     * the results of calls to the <code>cubicCurveTo()</code> method are drawn
	     * underneath that content.
	     *
	     * @param controlX1 Specifies the horizontal position of the first control
	     *                  point relative to the registration point of the parent
	     *                  display object.
	     * @param controlY1 Specifies the vertical position of the first control
	     *                  point relative to the registration point of the parent
	     *                  display object.
	     * @param controlX2 Specifies the horizontal position of the second control
	     *                  point relative to the registration point of the parent
	     *                  display object.
	     * @param controlY2 Specifies the vertical position of the second control
	     *                  point relative to the registration point of the parent
	     *                  display object.
	     * @param anchorX   Specifies the horizontal position of the anchor point
	     *                  relative to the registration point of the parent display
	     *                  object.
	     * @param anchorY   Specifies the vertical position of the anchor point
	     *                  relative to the registration point of the parent display
	     *                  object.
	     */
	    cubicCurveTo(controlX1: number, controlY1: number, controlX2: number, controlY2: number, anchorX: number, anchorY: number): void;
	    /**
	     * Draws a curve using the current line style from the current drawing
	     * position to(anchorX, anchorY) and using the control point that
	     * (<code>controlX</code>, <code>controlY</code>) specifies. The current
	     * drawing position is then set to(<code>anchorX</code>,
	     * <code>anchorY</code>). If the movie clip in which you are drawing contains
	     * content created with the Flash drawing tools, calls to the
	     * <code>curveTo()</code> method are drawn underneath this content. If you
	     * call the <code>curveTo()</code> method before any calls to the
	     * <code>moveTo()</code> method, the default of the current drawing position
	     * is(0, 0). If any of the parameters are missing, this method fails and the
	     * current drawing position is not changed.
	     *
	     * <p>The curve drawn is a quadratic Bezier curve. Quadratic Bezier curves
	     * consist of two anchor points and one control point. The curve interpolates
	     * the two anchor points and curves toward the control point. </p>
	     *
	     * @param controlX A number that specifies the horizontal position of the
	     *                 control point relative to the registration point of the
	     *                 parent display object.
	     * @param controlY A number that specifies the vertical position of the
	     *                 control point relative to the registration point of the
	     *                 parent display object.
	     * @param anchorX  A number that specifies the horizontal position of the
	     *                 next anchor point relative to the registration point of
	     *                 the parent display object.
	     * @param anchorY  A number that specifies the vertical position of the next
	     *                 anchor point relative to the registration point of the
	     *                 parent display object.
	     */
	    curveTo(controlX: number, controlY: number, anchorX: number, anchorY: number): void;
	    /**
	     * Draws a circle. Set the line style, fill, or both before you call the
	     * <code>drawCircle()</code> method, by calling the <code>linestyle()</code>,
	     * <code>lineGradientStyle()</code>, <code>beginFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	     * method.
	     *
	     * @param x      The <i>x</i> location of the center of the circle relative
	     *               to the registration point of the parent display object(in
	     *               pixels).
	     * @param y      The <i>y</i> location of the center of the circle relative
	     *               to the registration point of the parent display object(in
	     *               pixels).
	     * @param radius The radius of the circle(in pixels).
	     */
	    drawCircle(x: number, y: number, radius: number): void;
	    /**
	     * Draws an ellipse. Set the line style, fill, or both before you call the
	     * <code>drawEllipse()</code> method, by calling the
	     * <code>linestyle()</code>, <code>lineGradientStyle()</code>,
	     * <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	     * <code>beginBitmapFill()</code> method.
	     *
	     * @param x      The <i>x</i> location of the top-left of the bounding-box of
	     *               the ellipse relative to the registration point of the parent
	     *               display object(in pixels).
	     * @param y      The <i>y</i> location of the top left of the bounding-box of
	     *               the ellipse relative to the registration point of the parent
	     *               display object(in pixels).
	     * @param width  The width of the ellipse(in pixels).
	     * @param height The height of the ellipse(in pixels).
	     */
	    drawEllipse(x: number, y: number, width: number, height: number): void;
	    /**
	     * Submits a series of IGraphicsData instances for drawing. This method
	     * accepts a Vector containing objects including paths, fills, and strokes
	     * that implement the IGraphicsData interface. A Vector of IGraphicsData
	     * instances can refer to a part of a shape, or a complex fully defined set
	     * of data for rendering a complete shape.
	     *
	     * <p> Graphics paths can contain other graphics paths. If the
	     * <code>graphicsData</code> Vector includes a path, that path and all its
	     * sub-paths are rendered during this operation. </p>
	     *
	     */
	    drawGraphicsData(graphicsData: IGraphicsData[]): void;
	    /**
	     * Submits a series of commands for drawing. The <code>drawPath()</code>
	     * method uses vector arrays to consolidate individual <code>moveTo()</code>,
	     * <code>lineTo()</code>, and <code>curveTo()</code> drawing commands into a
	     * single call. The <code>drawPath()</code> method parameters combine drawing
	     * commands with x- and y-coordinate value pairs and a drawing direction. The
	     * drawing commands are values from the GraphicsPathCommand class. The x- and
	     * y-coordinate value pairs are Numbers in an array where each pair defines a
	     * coordinate location. The drawing direction is a value from the
	     * GraphicsPathWinding class.
	     *
	     * <p> Generally, drawings render faster with <code>drawPath()</code> than
	     * with a series of individual <code>lineTo()</code> and
	     * <code>curveTo()</code> methods. </p>
	     *
	     * <p> The <code>drawPath()</code> method uses a uses a floating computation
	     * so rotation and scaling of shapes is more accurate and gives better
	     * results. However, curves submitted using the <code>drawPath()</code>
	     * method can have small sub-pixel alignment errors when used in conjunction
	     * with the <code>lineTo()</code> and <code>curveTo()</code> methods. </p>
	     *
	     * <p> The <code>drawPath()</code> method also uses slightly different rules
	     * for filling and drawing lines. They are: </p>
	     *
	     * <ul>
	     *   <li>When a fill is applied to rendering a path:
	     * <ul>
	     *   <li>A sub-path of less than 3 points is not rendered.(But note that the
	     * stroke rendering will still occur, consistent with the rules for strokes
	     * below.)</li>
	     *   <li>A sub-path that isn't closed(the end point is not equal to the
	     * begin point) is implicitly closed.</li>
	     * </ul>
	     * </li>
	     *   <li>When a stroke is applied to rendering a path:
	     * <ul>
	     *   <li>The sub-paths can be composed of any number of points.</li>
	     *   <li>The sub-path is never implicitly closed.</li>
	     * </ul>
	     * </li>
	     * </ul>
	     *
	     * @param winding Specifies the winding rule using a value defined in the
	     *                GraphicsPathWinding class.
	     */
	    drawPath(commands: number[], data: number[], winding: GraphicsPathWinding): void;
	    /**
	     * Draws a rectangle. Set the line style, fill, or both before you call the
	     * <code>drawRect()</code> method, by calling the <code>linestyle()</code>,
	     * <code>lineGradientStyle()</code>, <code>beginFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	     * method.
	     *
	     * @param x      A number indicating the horizontal position relative to the
	     *               registration point of the parent display object(in pixels).
	     * @param y      A number indicating the vertical position relative to the
	     *               registration point of the parent display object(in pixels).
	     * @param width  The width of the rectangle(in pixels).
	     * @param height The height of the rectangle(in pixels).
	     * @throws ArgumentError If the <code>width</code> or <code>height</code>
	     *                       parameters are not a number
	     *                      (<code>Number.NaN</code>).
	     */
	    drawRect(x: number, y: number, width: number, height: number): void;
	    /**
	     * Draws a rounded rectangle. Set the line style, fill, or both before you
	     * call the <code>drawRoundRect()</code> method, by calling the
	     * <code>linestyle()</code>, <code>lineGradientStyle()</code>,
	     * <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	     * <code>beginBitmapFill()</code> method.
	     *
	     * @param x             A number indicating the horizontal position relative
	     *                      to the registration point of the parent display
	     *                      object(in pixels).
	     * @param y             A number indicating the vertical position relative to
	     *                      the registration point of the parent display object
	     *                     (in pixels).
	     * @param width         The width of the round rectangle(in pixels).
	     * @param height        The height of the round rectangle(in pixels).
	     * @param ellipseWidth  The width of the ellipse used to draw the rounded
	     *                      corners(in pixels).
	     * @param ellipseHeight The height of the ellipse used to draw the rounded
	     *                      corners(in pixels). Optional; if no value is
	     *                      specified, the default value matches that provided
	     *                      for the <code>ellipseWidth</code> parameter.
	     * @throws ArgumentError If the <code>width</code>, <code>height</code>,
	     *                       <code>ellipseWidth</code> or
	     *                       <code>ellipseHeight</code> parameters are not a
	     *                       number(<code>Number.NaN</code>).
	     */
	    drawRoundRect(x: number, y: number, width: number, height: number, ellipseWidth: number, ellipseHeight?: number): void;
	    /**
	     * Renders a set of triangles, typically to distort bitmaps and give them a
	     * three-dimensional appearance. The <code>drawTriangles()</code> method maps
	     * either the current fill, or a bitmap fill, to the triangle faces using a
	     * set of(u,v) coordinates.
	     *
	     * <p> Any type of fill can be used, but if the fill has a transform matrix
	     * that transform matrix is ignored. </p>
	     *
	     * <p> A <code>uvtData</code> parameter improves texture mapping when a
	     * bitmap fill is used. </p>
	     *
	     * @param culling Specifies whether to render triangles that face in a
	     *                specified direction. This parameter prevents the rendering
	     *                of triangles that cannot be seen in the current view. This
	     *                parameter can be set to any value defined by the
	     *                TriangleCulling class.
	     */
	    drawTriangles(vertices: number[], indices?: number[], uvtData?: number[], culling?: TriangleCulling): void;
	    /**
	     * Applies a fill to the lines and curves that were added since the last call
	     * to the <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	     * <code>beginBitmapFill()</code> method. Flash uses the fill that was
	     * specified in the previous call to the <code>beginFill()</code>,
	     * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	     * method. If the current drawing position does not equal the previous
	     * position specified in a <code>moveTo()</code> method and a fill is
	     * defined, the path is closed with a line and then filled.
	     *
	     */
	    endFill(): void;
	    /**
	     * Specifies a bitmap to use for the line stroke when drawing lines.
	     *
	     * <p>The bitmap line style is used for subsequent calls to Graphics methods
	     * such as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	     * method. The line style remains in effect until you call the
	     * <code>lineStyle()</code> or <code>lineGradientStyle()</code> methods, or
	     * the <code>lineBitmapStyle()</code> method again with different parameters.
	     * </p>
	     *
	     * <p>You can call the <code>lineBitmapStyle()</code> method in the middle of
	     * drawing a path to specify different styles for different line segments
	     * within a path. </p>
	     *
	     * <p>Call the <code>lineStyle()</code> method before you call the
	     * <code>lineBitmapStyle()</code> method to enable a stroke, or else the
	     * value of the line style is <code>undefined</code>.</p>
	     *
	     * <p>Calls to the <code>clear()</code> method set the line style back to
	     * <code>undefined</code>. </p>
	     *
	     * @param bitmap The bitmap to use for the line stroke.
	     * @param matrix An optional transformation matrix as defined by the
	     *               flash.geom.Matrix class. The matrix can be used to scale or
	     *               otherwise manipulate the bitmap before applying it to the
	     *               line style.
	     * @param repeat Whether to repeat the bitmap in a tiled fashion.
	     * @param smooth Whether smoothing should be applied to the bitmap.
	     */
	    lineBitmapStyle(bitmap: BitmapData, matrix?: Matrix, repeat?: boolean, smooth?: boolean): void;
	    /**
	     * Specifies a gradient to use for the stroke when drawing lines.
	     *
	     * <p>The gradient line style is used for subsequent calls to Graphics
	     * methods such as the <code>lineTo()</code> methods or the
	     * <code>drawCircle()</code> method. The line style remains in effect until
	     * you call the <code>lineStyle()</code> or <code>lineBitmapStyle()</code>
	     * methods, or the <code>lineGradientStyle()</code> method again with
	     * different parameters. </p>
	     *
	     * <p>You can call the <code>lineGradientStyle()</code> method in the middle
	     * of drawing a path to specify different styles for different line segments
	     * within a path. </p>
	     *
	     * <p>Call the <code>lineStyle()</code> method before you call the
	     * <code>lineGradientStyle()</code> method to enable a stroke, or else the
	     * value of the line style is <code>undefined</code>.</p>
	     *
	     * <p>Calls to the <code>clear()</code> method set the line style back to
	     * <code>undefined</code>. </p>
	     *
	     * @param type                A value from the GradientType class that
	     *                            specifies which gradient type to use, either
	     *                            GradientType.LINEAR or GradientType.RADIAL.
	     * @param colors              An array of RGB hexadecimal color values used
	     *                            in the gradient; for example, red is 0xFF0000,
	     *                            blue is 0x0000FF, and so on. You can specify
	     *                            up to 15 colors. For each color, specify a
	     *                            corresponding value in the alphas and ratios
	     *                            parameters.
	     * @param alphas              An array of alpha values for the corresponding
	     *                            colors in the colors array; valid values are 0
	     *                            to 1. If the value is less than 0, the default
	     *                            is 0. If the value is greater than 1, the
	     *                            default is 1.
	     * @param ratios              An array of color distribution ratios; valid
	     *                            values are 0-255. This value defines the
	     *                            percentage of the width where the color is
	     *                            sampled at 100%. The value 0 represents the
	     *                            left position in the gradient box, and 255
	     *                            represents the right position in the gradient
	     *                            box.
	     * @param matrix              A transformation matrix as defined by the
	     *                            flash.geom.Matrix class. The flash.geom.Matrix
	     *                            class includes a
	     *                            <code>createGradientBox()</code> method, which
	     *                            lets you conveniently set up the matrix for use
	     *                            with the <code>lineGradientStyle()</code>
	     *                            method.
	     * @param spreadMethod        A value from the SpreadMethod class that
	     *                            specifies which spread method to use:
	     * @param interpolationMethod A value from the InterpolationMethod class that
	     *                            specifies which value to use. For example,
	     *                            consider a simple linear gradient between two
	     *                            colors(with the <code>spreadMethod</code>
	     *                            parameter set to
	     *                            <code>SpreadMethod.REFLECT</code>). The
	     *                            different interpolation methods affect the
	     *                            appearance as follows:
	     * @param focalPointRatio     A number that controls the location of the
	     *                            focal point of the gradient. The value 0 means
	     *                            the focal point is in the center. The value 1
	     *                            means the focal point is at one border of the
	     *                            gradient circle. The value -1 means that the
	     *                            focal point is at the other border of the
	     *                            gradient circle. Values less than -1 or greater
	     *                            than 1 are rounded to -1 or 1. The following
	     *                            image shows a gradient with a
	     *                            <code>focalPointRatio</code> of -0.75:
	     */
	    lineGradientStyle(type: GradientType, colors: number[], alphas: number[], ratios: number[], matrix?: Matrix, spreadMethod?: SpreadMethod, interpolationMethod?: InterpolationMethod, focalPointRatio?: number): void;
	    /**
	     * Specifies a shader to use for the line stroke when drawing lines.
	     *
	     * <p>The shader line style is used for subsequent calls to Graphics methods
	     * such as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	     * method. The line style remains in effect until you call the
	     * <code>lineStyle()</code> or <code>lineGradientStyle()</code> methods, or
	     * the <code>lineBitmapStyle()</code> method again with different parameters.
	     * </p>
	     *
	     * <p>You can call the <code>lineShaderStyle()</code> method in the middle of
	     * drawing a path to specify different styles for different line segments
	     * within a path. </p>
	     *
	     * <p>Call the <code>lineStyle()</code> method before you call the
	     * <code>lineShaderStyle()</code> method to enable a stroke, or else the
	     * value of the line style is <code>undefined</code>.</p>
	     *
	     * <p>Calls to the <code>clear()</code> method set the line style back to
	     * <code>undefined</code>. </p>
	     *
	     * @param shader The shader to use for the line stroke.
	     * @param matrix An optional transformation matrix as defined by the
	     *               flash.geom.Matrix class. The matrix can be used to scale or
	     *               otherwise manipulate the bitmap before applying it to the
	     *               line style.
	     */
	    /**
	     * Specifies a line style used for subsequent calls to Graphics methods such
	     * as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	     * method. The line style remains in effect until you call the
	     * <code>lineGradientStyle()</code> method, the
	     * <code>lineBitmapStyle()</code> method, or the <code>lineStyle()</code>
	     * method with different parameters.
	     *
	     * <p>You can call the <code>lineStyle()</code> method in the middle of
	     * drawing a path to specify different styles for different line segments
	     * within the path.</p>
	     *
	     * <p><b>Note: </b>Calls to the <code>clear()</code> method set the line
	     * style back to <code>undefined</code>.</p>
	     *
	     * <p><b>Note: </b>Flash Lite 4 supports only the first three parameters
	     * (<code>thickness</code>, <code>color</code>, and <code>alpha</code>).</p>
	     *
	     * @param thickness    An integer that indicates the thickness of the line in
	     *                     points; valid values are 0-255. If a number is not
	     *                     specified, or if the parameter is undefined, a line is
	     *                     not drawn. If a value of less than 0 is passed, the
	     *                     default is 0. The value 0 indicates hairline
	     *                     thickness; the maximum thickness is 255. If a value
	     *                     greater than 255 is passed, the default is 255.
	     * @param color        A hexadecimal color value of the line; for example,
	     *                     red is 0xFF0000, blue is 0x0000FF, and so on. If a
	     *                     value is not indicated, the default is 0x000000
	     *                    (black). Optional.
	     * @param alpha        A number that indicates the alpha value of the color
	     *                     of the line; valid values are 0 to 1. If a value is
	     *                     not indicated, the default is 1(solid). If the value
	     *                     is less than 0, the default is 0. If the value is
	     *                     greater than 1, the default is 1.
	     * @param pixelHinting(Not supported in Flash Lite 4) A Boolean value that
	     *                     specifies whether to hint strokes to full pixels. This
	     *                     affects both the position of anchors of a curve and
	     *                     the line stroke size itself. With
	     *                     <code>pixelHinting</code> set to <code>true</code>,
	     *                     line widths are adjusted to full pixel widths. With
	     *                     <code>pixelHinting</code> set to <code>false</code>,
	     *                     disjoints can appear for curves and straight lines.
	     *                     For example, the following illustrations show how
	     *                     Flash Player or Adobe AIR renders two rounded
	     *                     rectangles that are identical, except that the
	     *                     <code>pixelHinting</code> parameter used in the
	     *                     <code>lineStyle()</code> method is set differently
	     *                    (the images are scaled by 200%, to emphasize the
	     *                     difference):
	     *
	     *                     <p>If a value is not supplied, the line does not use
	     *                     pixel hinting.</p>
	     * @param scaleMode   (Not supported in Flash Lite 4) A value from the
	     *                     LineScaleMode class that specifies which scale mode to
	     *                     use:
	     *                     <ul>
	     *                       <li> <code>LineScaleMode.NORMAL</code> - Always
	     *                     scale the line thickness when the object is scaled
	     *                    (the default). </li>
	     *                       <li> <code>LineScaleMode.NONE</code> - Never scale
	     *                     the line thickness. </li>
	     *                       <li> <code>LineScaleMode.VERTICAL</code> - Do not
	     *                     scale the line thickness if the object is scaled
	     *                     vertically <i>only</i>. For example, consider the
	     *                     following circles, drawn with a one-pixel line, and
	     *                     each with the <code>scaleMode</code> parameter set to
	     *                     <code>LineScaleMode.VERTICAL</code>. The circle on the
	     *                     left is scaled vertically only, and the circle on the
	     *                     right is scaled both vertically and horizontally:
	     *                     </li>
	     *                       <li> <code>LineScaleMode.HORIZONTAL</code> - Do not
	     *                     scale the line thickness if the object is scaled
	     *                     horizontally <i>only</i>. For example, consider the
	     *                     following circles, drawn with a one-pixel line, and
	     *                     each with the <code>scaleMode</code> parameter set to
	     *                     <code>LineScaleMode.HORIZONTAL</code>. The circle on
	     *                     the left is scaled horizontally only, and the circle
	     *                     on the right is scaled both vertically and
	     *                     horizontally:   </li>
	     *                     </ul>
	     * @param caps        (Not supported in Flash Lite 4) A value from the
	     *                     CapsStyle class that specifies the type of caps at the
	     *                     end of lines. Valid values are:
	     *                     <code>CapsStyle.NONE</code>,
	     *                     <code>CapsStyle.ROUND</code>, and
	     *                     <code>CapsStyle.SQUARE</code>. If a value is not
	     *                     indicated, Flash uses round caps.
	     *
	     *                     <p>For example, the following illustrations show the
	     *                     different <code>capsStyle</code> settings. For each
	     *                     setting, the illustration shows a blue line with a
	     *                     thickness of 30(for which the <code>capsStyle</code>
	     *                     applies), and a superimposed black line with a
	     *                     thickness of 1(for which no <code>capsStyle</code>
	     *                     applies): </p>
	     * @param joints      (Not supported in Flash Lite 4) A value from the
	     *                     JointStyle class that specifies the type of joint
	     *                     appearance used at angles. Valid values are:
	     *                     <code>JointStyle.BEVEL</code>,
	     *                     <code>JointStyle.MITER</code>, and
	     *                     <code>JointStyle.ROUND</code>. If a value is not
	     *                     indicated, Flash uses round joints.
	     *
	     *                     <p>For example, the following illustrations show the
	     *                     different <code>joints</code> settings. For each
	     *                     setting, the illustration shows an angled blue line
	     *                     with a thickness of 30(for which the
	     *                     <code>jointStyle</code> applies), and a superimposed
	     *                     angled black line with a thickness of 1(for which no
	     *                     <code>jointStyle</code> applies): </p>
	     *
	     *                     <p><b>Note:</b> For <code>joints</code> set to
	     *                     <code>JointStyle.MITER</code>, you can use the
	     *                     <code>miterLimit</code> parameter to limit the length
	     *                     of the miter.</p>
	     * @param miterLimit  (Not supported in Flash Lite 4) A number that
	     *                     indicates the limit at which a miter is cut off. Valid
	     *                     values range from 1 to 255(and values outside that
	     *                     range are rounded to 1 or 255). This value is only
	     *                     used if the <code>jointStyle</code> is set to
	     *                     <code>"miter"</code>. The <code>miterLimit</code>
	     *                     value represents the length that a miter can extend
	     *                     beyond the point at which the lines meet to form a
	     *                     joint. The value expresses a factor of the line
	     *                     <code>thickness</code>. For example, with a
	     *                     <code>miterLimit</code> factor of 2.5 and a
	     *                     <code>thickness</code> of 10 pixels, the miter is cut
	     *                     off at 25 pixels.
	     *
	     *                     <p>For example, consider the following angled lines,
	     *                     each drawn with a <code>thickness</code> of 20, but
	     *                     with <code>miterLimit</code> set to 1, 2, and 4.
	     *                     Superimposed are black reference lines showing the
	     *                     meeting points of the joints:</p>
	     *
	     *                     <p>Notice that a given <code>miterLimit</code> value
	     *                     has a specific maximum angle for which the miter is
	     *                     cut off. The following table lists some examples:</p>
	     */
	    lineStyle(thickness?: number, color?: number, alpha?: number, pixelHinting?: boolean, scaleMode?: LineScaleMode, caps?: CapsStyle, joints?: JointStyle, miterLimit?: number): void;
	    /**
	     * Draws a line using the current line style from the current drawing
	     * position to(<code>x</code>, <code>y</code>); the current drawing position
	     * is then set to(<code>x</code>, <code>y</code>). If the display object in
	     * which you are drawing contains content that was created with the Flash
	     * drawing tools, calls to the <code>lineTo()</code> method are drawn
	     * underneath the content. If you call <code>lineTo()</code> before any calls
	     * to the <code>moveTo()</code> method, the default position for the current
	     * drawing is(<i>0, 0</i>). If any of the parameters are missing, this
	     * method fails and the current drawing position is not changed.
	     *
	     * @param x A number that indicates the horizontal position relative to the
	     *          registration point of the parent display object(in pixels).
	     * @param y A number that indicates the vertical position relative to the
	     *          registration point of the parent display object(in pixels).
	     */
	    lineTo(x: number, y: number): void;
	    /**
	     * Moves the current drawing position to(<code>x</code>, <code>y</code>). If
	     * any of the parameters are missing, this method fails and the current
	     * drawing position is not changed.
	     *
	     * @param x A number that indicates the horizontal position relative to the
	     *          registration point of the parent display object(in pixels).
	     * @param y A number that indicates the vertical position relative to the
	     *          registration point of the parent display object(in pixels).
	     */
	    moveTo(x: number, y: number): void;
	}
	export = Graphics;
	
}
declare module "awayjs-display/lib/base/PixelSnapping" {
	/**
	 * The PixelSnapping class is an enumeration of constant values for setting
	 * the pixel snapping options by using the <code>pixelSnapping</code> property
	 * of a Bitmap object.
	 */
	class PixelSnapping {
	    /**
	     * A constant value used in the <code>pixelSnapping</code> property of a
	     * Bitmap object to specify that the bitmap image is always snapped to the
	     * nearest pixel, independent of any transformation.
	     */
	    static ALWAYS: string;
	    /**
	     * A constant value used in the <code>pixelSnapping</code> property of a
	     * Bitmap object to specify that the bitmap image is snapped to the nearest
	     * pixel if it is drawn with no rotation or skew and it is drawn at a scale
	     * factor of 99.9% to 100.1%. If these conditions are satisfied, the image is
	     * drawn at 100% scale, snapped to the nearest pixel. Internally, this
	     * setting allows the image to be drawn as fast as possible by using the
	     * vector renderer.
	     */
	    static AUTO: string;
	    /**
	     * A constant value used in the <code>pixelSnapping</code> property of a
	     * Bitmap object to specify that no pixel snapping occurs.
	     */
	    static NEVER: string;
	}
	export = PixelSnapping;
	
}
declare module "awayjs-display/lib/pick/IPicker" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import View = require("awayjs-display/lib/containers/View");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	/**
	 * Provides an interface for picking objects that can pick 3d objects from a view or scene.
	 *
	 * @interface away.pick.IPicker
	 */
	interface IPicker {
	    /**
	     * Gets the collision object from the screen coordinates of the picking ray.
	     *
	     * @param x The x coordinate of the picking ray in screen-space.
	     * @param y The y coordinate of the picking ray in screen-space.
	     * @param view The view on which the picking object acts.
	     */
	    getViewCollision(x: number, y: number, view: View): PickingCollisionVO;
	    /**
	     * Gets the collision object from the scene position and direction of the picking ray.
	     *
	     * @param position The position of the picking ray in scene-space.
	     * @param direction The direction of the picking ray in scene-space.
	     * @param scene The scene on which the picking object acts.
	     */
	    getSceneCollision(position: Vector3D, direction: Vector3D, scene: Scene): PickingCollisionVO;
	    /**
	     * Determines whether the picker takes account of the mouseEnabled properties of entities. Defaults to true.
	     */
	    onlyMouseEnabled: boolean;
	    /**
	     * Disposes memory used by the IPicker object
	     */
	    dispose(): any;
	}
	export = IPicker;
	
}
declare module "awayjs-display/lib/traverse/RaycastCollector" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import NodeBase = require("awayjs-display/lib/partition/NodeBase");
	import CollectorBase = require("awayjs-display/lib/traverse/CollectorBase");
	/**
	 * The RaycastCollector class is a traverser for scene partitions that collects all scene graph entities that are
	 * considered intersecting with the defined ray.
	 *
	 * @see away.partition.Partition
	 * @see away.entities.IEntity
	 *
	 * @class away.traverse.RaycastCollector
	 */
	class RaycastCollector extends CollectorBase {
	    private _rayPosition;
	    private _rayDirection;
	    _iCollectionMark: number;
	    /**
	     * Provides the starting position of the ray.
	     */
	    rayPosition: Vector3D;
	    /**
	     * Provides the direction vector of the ray.
	     */
	    rayDirection: Vector3D;
	    /**
	     * Creates a new RaycastCollector object.
	     */
	    constructor();
	    /**
	     * Returns true if the current node is at least partly in the frustum. If so, the partition node knows to pass on the traverser to its children.
	     *
	     * @param node The Partition3DNode object to frustum-test.
	     */
	    enterNode(node: NodeBase): boolean;
	}
	export = RaycastCollector;
	
}
declare module "awayjs-display/lib/pick/RaycastPicker" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import View = require("awayjs-display/lib/containers/View");
	import IPicker = require("awayjs-display/lib/pick/IPicker");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	/**
	 * Picks a 3d object from a view or scene by 3D raycast calculations.
	 * Performs an initial coarse boundary calculation to return a subset of entities whose bounding volumes intersect with the specified ray,
	 * then triggers an optional picking collider on individual entity objects to further determine the precise values of the picking ray collision.
	 *
	 * @class away.pick.RaycastPicker
	 */
	class RaycastPicker implements IPicker {
	    private _findClosestCollision;
	    private _raycastCollector;
	    private _ignoredEntities;
	    private _onlyMouseEnabled;
	    private _entities;
	    private _numEntities;
	    private _hasCollisions;
	    /**
	     * @inheritDoc
	     */
	    onlyMouseEnabled: boolean;
	    /**
	     * Creates a new <code>RaycastPicker</code> object.
	     *
	     * @param findClosestCollision Determines whether the picker searches for the closest bounds collision along the ray,
	     * or simply returns the first collision encountered. Defaults to false.
	     */
	    constructor(findClosestCollision?: boolean);
	    /**
	     * @inheritDoc
	     */
	    getViewCollision(x: number, y: number, view: View): PickingCollisionVO;
	    /**
	     * @inheritDoc
	     */
	    getSceneCollision(rayPosition: Vector3D, rayDirection: Vector3D, scene: Scene): PickingCollisionVO;
	    setIgnoreList(entities: any): void;
	    private isIgnored(entity);
	    private sortOnNearT(entity1, entity2);
	    private getPickingCollisionVO(collector);
	    private updateLocalPosition(pickingCollisionVO);
	    dispose(): void;
	}
	export = RaycastPicker;
	
}
declare module "awayjs-display/lib/pool/IRenderableClass" {
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	/**
	 * IRenderableClass is an interface for the constructable class definition IRenderable that is used to
	 * create renderable objects in the rendering pipeline to render the contents of a partition
	 *
	 * @class away.render.IRenderableClass
	 */
	interface IRenderableClass {
	    /**
	     *
	     */
	    id: string;
	    /**
	     *
	     */
	    new (pool: RenderablePool, materialOwner: IMaterialOwner): IRenderable;
	}
	export = IRenderableClass;
	
}
declare module "awayjs-display/lib/pool/RenderablePool" {
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import IRenderableClass = require("awayjs-display/lib/pool/IRenderableClass");
	/**
	 * @class away.pool.RenderablePool
	 */
	class RenderablePool {
	    private static _pools;
	    private _pool;
	    private _renderableClass;
	    /**
	     * //TODO
	     *
	     * @param renderableClass
	     */
	    constructor(renderableClass: IRenderableClass);
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     * @returns IRenderable
	     */
	    getItem(materialOwner: IMaterialOwner): IRenderable;
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     */
	    disposeItem(materialOwner: IMaterialOwner): void;
	    /**
	     * //TODO
	     *
	     * @param renderableClass
	     * @returns RenderablePool
	     */
	    static getPool(renderableClass: IRenderableClass): RenderablePool;
	    /**
	     * //TODO
	     *
	     * @param renderableClass
	     */
	    static disposePool(renderableClass: any): void;
	}
	export = RenderablePool;
	
}
declare module "awayjs-display/lib/pool/CSSRenderableBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	/**
	 * @class away.pool.RenderableListItem
	 */
	class CSSRenderableBase implements IRenderable {
	    /**
	     *
	     */
	    private _pool;
	    /**
	     *
	     */
	    next: CSSRenderableBase;
	    /**
	     *
	     */
	    materialId: number;
	    /**
	     *
	     */
	    renderOrderId: number;
	    /**
	     *
	     */
	    zIndex: number;
	    /**
	     *
	     */
	    cascaded: boolean;
	    /**
	     *
	     */
	    renderSceneTransform: Matrix3D;
	    /**
	     *
	     */
	    sourceEntity: IEntity;
	    /**
	     *
	     */
	    materialOwner: IMaterialOwner;
	    /**
	     *
	     */
	    htmlElement: HTMLElement;
	    /**
	     *
	     * @param sourceEntity
	     * @param material
	     * @param animator
	     */
	    constructor(pool: RenderablePool, sourceEntity: IEntity, materialOwner: IMaterialOwner);
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    invalidateGeometry(): void;
	    /**
	     *
	     */
	    invalidateIndexData(): void;
	    /**
	     *
	     */
	    invalidateVertexData(dataType: string): void;
	}
	export = CSSRenderableBase;
	
}
declare module "awayjs-display/lib/pool/CSSBillboardRenderable" {
	import CSSRenderableBase = require("awayjs-display/lib/pool/CSSRenderableBase");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import Billboard = require("awayjs-display/lib/entities/Billboard");
	/**
	 * @class away.pool.RenderableListItem
	 */
	class CSSBillboardRenderable extends CSSRenderableBase {
	    static id: string;
	    constructor(pool: RenderablePool, billboard: Billboard);
	}
	export = CSSBillboardRenderable;
	
}
declare module "awayjs-display/lib/entities/LineSegment" {
	import UVTransform = require("awayjs-core/lib/geom/UVTransform");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import EntityNode = require("awayjs-display/lib/partition/EntityNode");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * A Line Segment primitive.
	 */
	class LineSegment extends DisplayObject implements IEntity, IMaterialOwner {
	    private _animator;
	    private _material;
	    private _uvTransform;
	    private onSizeChangedDelegate;
	    _startPosition: Vector3D;
	    _endPosition: Vector3D;
	    _halfThickness: number;
	    /**
	     * Defines the animator of the line segment. Act on the line segment's geometry. Defaults to null
	     */
	    animator: IAnimator;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     *
	     */
	    startPostion: Vector3D;
	    startPosition: Vector3D;
	    /**
	     *
	     */
	    endPosition: Vector3D;
	    /**
	     *
	     */
	    material: MaterialBase;
	    /**
	     *
	     */
	    thickness: number;
	    /**
	     *
	     */
	    uvTransform: UVTransform;
	    /**
	     * Create a line segment
	     *
	     * @param startPosition Start position of the line segment
	     * @param endPosition Ending position of the line segment
	     * @param thickness Thickness of the line
	     */
	    constructor(material: MaterialBase, startPosition: Vector3D, endPosition: Vector3D, thickness?: number);
	    dispose(): void;
	    /**
	     * @protected
	     */
	    pCreateEntityPartitionNode(): EntityNode;
	    /**
	     * @protected
	     */
	    pUpdateBounds(): void;
	    /**
	     * @private
	     */
	    private onSizeChanged(event);
	    /**
	     * @private
	     */
	    private notifyRenderableUpdate();
	    _iCollectRenderables(renderer: IRenderer): void;
	    _iCollectRenderable(renderer: IRenderer): void;
	}
	export = LineSegment;
	
}
declare module "awayjs-display/lib/pool/CSSLineSegmentRenderable" {
	import CSSRenderableBase = require("awayjs-display/lib/pool/CSSRenderableBase");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import LineSegment = require("awayjs-display/lib/entities/LineSegment");
	/**
	 * @class away.pool.RenderableListItem
	 */
	class CSSLineSegmentRenderable extends CSSRenderableBase {
	    static id: string;
	    constructor(pool: RenderablePool, lineSegment: LineSegment);
	}
	export = CSSLineSegmentRenderable;
	
}
declare module "awayjs-display/lib/traverse/CSSEntityCollector" {
	import CollectorBase = require("awayjs-display/lib/traverse/CollectorBase");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	/**
	 * @class away.traverse.CSSEntityCollector
	 */
	class CSSEntityCollector extends CollectorBase implements ICollector {
	    constructor();
	}
	export = CSSEntityCollector;
	
}
declare module "awayjs-display/lib/events/RendererEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class RendererEvent extends Event {
	    static VIEWPORT_UPDATED: string;
	    static SCISSOR_UPDATED: string;
	    constructor(type: string);
	}
	export = RendererEvent;
	
}
declare module "awayjs-display/lib/materials/CSSMaterialBase" {
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	/**
	 * MaterialBase forms an abstract base class for any material.
	 * A material consists of several passes, each of which constitutes at least one render call. Several passes could
	 * be used for special effects (render lighting for many lights in several passes, render an outline in a separate
	 * pass) or to provide additional render-to-texture passes (rendering diffuse light to texture for texture-space
	 * subsurface scattering, or rendering a depth map for specialized self-shadowing).
	 *
	 * Away3D provides default materials trough SinglePassMaterialBase and MultiPassMaterialBase, which use modular
	 * methods to build the shader code. MaterialBase can be extended to build specific and high-performant custom
	 * shaders, or entire new material frameworks.
	 */
	class CSSMaterialBase extends MaterialBase {
	    private _imageElement;
	    private _imageStyle;
	    imageElement: HTMLImageElement;
	    imageStyle: MSStyleCSSProperties;
	    /**
	     * The texture object to use for the albedo colour.
	     */
	    texture: Texture2DBase;
	    /**
	     * Creates a new MaterialBase object.
	     */
	    constructor(texture?: Texture2DBase, smooth?: boolean, repeat?: boolean);
	}
	export = CSSMaterialBase;
	
}
declare module "awayjs-display/lib/render/CSSRendererBase" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import LineSubMesh = require("awayjs-display/lib/base/LineSubMesh");
	import TriangleSubMesh = require("awayjs-display/lib/base/TriangleSubMesh");
	import CSSRenderableBase = require("awayjs-display/lib/pool/CSSRenderableBase");
	import IEntitySorter = require("awayjs-display/lib/sort/IEntitySorter");
	import CSSEntityCollector = require("awayjs-display/lib/traverse/CSSEntityCollector");
	import EntityCollector = require("awayjs-display/lib/traverse/EntityCollector");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import Billboard = require("awayjs-display/lib/entities/Billboard");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Skybox = require("awayjs-display/lib/entities/Skybox");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	/**
	 * RendererBase forms an abstract base class for classes that are used in the rendering pipeline to render the
	 * contents of a partition
	 *
	 * @class away.render.RendererBase
	 */
	class CSSRendererBase extends EventDispatcher {
	    private _billboardRenderablePool;
	    private _lineSegmentRenderablePool;
	    _pCamera: Camera;
	    _iEntryPoint: Vector3D;
	    _pCameraForward: Vector3D;
	    private _backgroundR;
	    private _backgroundG;
	    private _backgroundB;
	    private _backgroundAlpha;
	    private _shareContext;
	    _pBackBufferInvalid: boolean;
	    _depthTextureInvalid: boolean;
	    _renderableHead: CSSRenderableBase;
	    _width: number;
	    _height: number;
	    private _viewPort;
	    private _viewportDirty;
	    private _scissorRect;
	    private _scissorDirty;
	    private _localPos;
	    private _globalPos;
	    private _scissorUpdated;
	    private _viewPortUpdated;
	    /**
	     * A viewPort rectangle equivalent of the StageGL size and position.
	     */
	    viewPort: Rectangle;
	    /**
	     * A scissor rectangle equivalent of the view size and position.
	     */
	    scissorRect: Rectangle;
	    /**
	     *
	     */
	    x: number;
	    /**
	     *
	     */
	    y: number;
	    /**
	     *
	     */
	    width: number;
	    /**
	     *
	     */
	    height: number;
	    /**
	     *
	     */
	    renderableSorter: IEntitySorter;
	    /**
	     * Creates a new RendererBase object.
	     */
	    constructor(renderToTexture?: boolean, forceSoftware?: boolean, profile?: string);
	    /**
	     * The background color's red component, used when clearing.
	     *
	     * @private
	     */
	    _iBackgroundR: number;
	    /**
	     * The background color's green component, used when clearing.
	     *
	     * @private
	     */
	    _iBackgroundG: number;
	    /**
	     * The background color's blue component, used when clearing.
	     *
	     * @private
	     */
	    _iBackgroundB: number;
	    shareContext: boolean;
	    /**
	     * Disposes the resources used by the RendererBase.
	     */
	    dispose(): void;
	    render(entityCollector: ICollector): void;
	    /**
	     * Renders the potentially visible geometry to the back buffer or texture.
	     * @param entityCollector The EntityCollector object containing the potentially visible geometry.
	     * @param scissorRect
	     */
	    _iRender(entityCollector: EntityCollector, target?: TextureProxyBase, scissorRect?: Rectangle, surfaceSelector?: number): void;
	    _iRenderCascades(entityCollector: ICollector, target: TextureProxyBase, numCascades: number, scissorRects: Rectangle[], cameras: Camera[]): void;
	    pCollectRenderables(entityCollector: ICollector): void;
	    /**
	     * Renders the potentially visible geometry to the back buffer or texture. Only executed if everything is set up.
	     * @param entityCollector The EntityCollector object containing the potentially visible geometry.
	     * @param scissorRect
	     */
	    pExecuteRender(entityCollector: CSSEntityCollector, scissorRect?: Rectangle): void;
	    /**
	     * Performs the actual drawing of dom objects to the target.
	     *
	     * @param entityCollector The EntityCollector object containing the potentially visible dom objects.
	     */
	    pDraw(entityCollector: CSSEntityCollector): void;
	    _iBackgroundAlpha: number;
	    /**
	     *
	     * @param billboard
	     */
	    applyBillboard(billboard: Billboard): void;
	    /**
	     *
	     * @param lineSubMesh
	     */
	    applyLineSubMesh(lineSubMesh: LineSubMesh): void;
	    /**
	     *
	     * @param skybox
	     */
	    applySkybox(skybox: Skybox): void;
	    /**
	     *
	     * @param triangleSubMesh
	     */
	    applyTriangleSubMesh(triangleSubMesh: TriangleSubMesh): void;
	    /**
	     *
	     * @param renderable
	     * @private
	     */
	    private _applyRenderable(renderable);
	    /**
	     * @private
	     */
	    private notifyScissorUpdate();
	    /**
	     * @private
	     */
	    private notifyViewportUpdate();
	    /**
	     *
	     */
	    updateGlobalPos(): void;
	    _iCreateEntityCollector(): ICollector;
	}
	export = CSSRendererBase;
	
}
declare module "awayjs-display/lib/events/MouseEvent" {
	import Point = require("awayjs-core/lib/geom/Point");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Event = require("awayjs-core/lib/events/Event");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import View = require("awayjs-display/lib/containers/View");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	/**
	 * A MouseEvent is dispatched when a mouse event occurs over a mouseEnabled object in View.
	 * TODO: we don't have screenZ data, tho this should be easy to implement
	 */
	class MouseEvent extends Event {
	    _iAllowedToPropagate: boolean;
	    _iParentEvent: MouseEvent;
	    /**
	     * Defines the value of the type property of a mouseOver3d event object.
	     */
	    static MOUSE_OVER: string;
	    /**
	     * Defines the value of the type property of a mouseOut3d event object.
	     */
	    static MOUSE_OUT: string;
	    /**
	     * Defines the value of the type property of a mouseUp3d event object.
	     */
	    static MOUSE_UP: string;
	    /**
	     * Defines the value of the type property of a mouseDown3d event object.
	     */
	    static MOUSE_DOWN: string;
	    /**
	     * Defines the value of the type property of a mouseMove3d event object.
	     */
	    static MOUSE_MOVE: string;
	    /**
	     * Defines the value of the type property of a rollOver3d event object.
	     */
	    /**
	     * Defines the value of the type property of a rollOut3d event object.
	     */
	    /**
	     * Defines the value of the type property of a click3d event object.
	     */
	    static CLICK: string;
	    /**
	     * Defines the value of the type property of a doubleClick3d event object.
	     */
	    static DOUBLE_CLICK: string;
	    /**
	     * Defines the value of the type property of a mouseWheel3d event object.
	     */
	    static MOUSE_WHEEL: string;
	    /**
	     * The horizontal coordinate at which the event occurred in view coordinates.
	     */
	    screenX: number;
	    /**
	     * The vertical coordinate at which the event occurred in view coordinates.
	     */
	    screenY: number;
	    /**
	     * The view object inside which the event took place.
	     */
	    view: View;
	    /**
	     * The 3d object inside which the event took place.
	     */
	    object: DisplayObject;
	    /**
	     * The material owner inside which the event took place.
	     */
	    materialOwner: IMaterialOwner;
	    /**
	     * The material of the 3d element inside which the event took place.
	     */
	    material: MaterialBase;
	    /**
	     * The uv coordinate inside the draw primitive where the event took place.
	     */
	    uv: Point;
	    /**
	     * The index of the face where the event took place.
	     */
	    index: number;
	    /**
	     * The index of the subGeometry where the event took place.
	     */
	    subGeometryIndex: number;
	    /**
	     * The position in object space where the event took place
	     */
	    localPosition: Vector3D;
	    /**
	     * The normal in object space where the event took place
	     */
	    localNormal: Vector3D;
	    /**
	     * Indicates whether the Control key is active (true) or inactive (false).
	     */
	    ctrlKey: boolean;
	    /**
	     * Indicates whether the Alt key is active (true) or inactive (false).
	     */
	    altKey: boolean;
	    /**
	     * Indicates whether the Shift key is active (true) or inactive (false).
	     */
	    shiftKey: boolean;
	    /**
	     * Indicates how many lines should be scrolled for each unit the user rotates the mouse wheel.
	     */
	    delta: number;
	    /**
	     * Create a new MouseEvent object.
	     * @param type The type of the MouseEvent.
	     */
	    constructor(type: string);
	    /**
	     * @inheritDoc
	     */
	    bubbles: boolean;
	    /**
	     * @inheritDoc
	     */
	    stopPropagation(): void;
	    /**
	     * @inheritDoc
	     */
	    stopImmediatePropagation(): void;
	    /**
	     * Creates a copy of the MouseEvent object and sets the value of each property to match that of the original.
	     */
	    clone(): Event;
	    /**
	     * The position in scene space where the event took place
	     */
	    scenePosition: Vector3D;
	    /**
	     * The normal in scene space where the event took place
	     */
	    sceneNormal: Vector3D;
	}
	export = MouseEvent;
	
}
declare module "awayjs-display/lib/managers/MouseManager" {
	import View = require("awayjs-display/lib/containers/View");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	/**
	 * MouseManager enforces a singleton pattern and is not intended to be instanced.
	 * it provides a manager class for detecting mouse hits on scene objects and sending out mouse events.
	 */
	class MouseManager {
	    private static _instance;
	    private _viewLookup;
	    _iActiveDiv: HTMLDivElement;
	    _iUpdateDirty: boolean;
	    _iCollidingObject: PickingCollisionVO;
	    private _nullVector;
	    private _previousCollidingObject;
	    private _queuedEvents;
	    private _mouseMoveEvent;
	    private _mouseUp;
	    private _mouseClick;
	    private _mouseOut;
	    private _mouseDown;
	    private _mouseMove;
	    private _mouseOver;
	    private _mouseWheel;
	    private _mouseDoubleClick;
	    private onClickDelegate;
	    private onDoubleClickDelegate;
	    private onMouseDownDelegate;
	    private onMouseMoveDelegate;
	    private onMouseUpDelegate;
	    private onMouseWheelDelegate;
	    private onMouseOverDelegate;
	    private onMouseOutDelegate;
	    /**
	     * Creates a new <code>MouseManager</code> object.
	     */
	    constructor();
	    static getInstance(): MouseManager;
	    fireMouseEvents(forceMouseMove: boolean): void;
	    registerView(view: View): void;
	    unregisterView(view: View): void;
	    private queueDispatch(event, sourceEvent, collider?);
	    private onMouseMove(event);
	    private onMouseOut(event);
	    private onMouseOver(event);
	    private onClick(event);
	    private onDoubleClick(event);
	    private onMouseDown(event);
	    private onMouseUp(event);
	    private onMouseWheel(event);
	    private updateColliders(event);
	}
	export = MouseManager;
	
}
declare module "awayjs-display/lib/containers/View" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import IPicker = require("awayjs-display/lib/pick/IPicker");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import Camera = require("awayjs-display/lib/entities/Camera");
	class View {
	    _pScene: Scene;
	    _pCamera: Camera;
	    _pEntityCollector: ICollector;
	    _pRenderer: IRenderer;
	    private _aspectRatio;
	    private _width;
	    private _height;
	    private _time;
	    private _deltaTime;
	    private _backgroundColor;
	    private _backgroundAlpha;
	    private _viewportDirty;
	    private _scissorDirty;
	    private _onScenePartitionChangedDelegate;
	    private _onProjectionChangedDelegate;
	    private _onViewportUpdatedDelegate;
	    private _onScissorUpdatedDelegate;
	    private _mouseManager;
	    private _mousePicker;
	    private _htmlElement;
	    private _shareContext;
	    _pMouseX: number;
	    _pMouseY: number;
	    constructor(renderer: IRenderer, scene?: Scene, camera?: Camera);
	    /**
	     *
	     * @param e
	     */
	    private onScenePartitionChanged(event);
	    layeredView: boolean;
	    mouseX: number;
	    mouseY: number;
	    /**
	     *
	     */
	    htmlElement: HTMLDivElement;
	    /**
	     *
	     */
	    renderer: IRenderer;
	    /**
	     *
	     */
	    shareContext: boolean;
	    /**
	     *
	     */
	    backgroundColor: number;
	    /**
	     *
	     * @returns {number}
	     */
	    /**
	     *
	     * @param value
	     */
	    backgroundAlpha: number;
	    /**
	     *
	     * @returns {Camera3D}
	     */
	    /**
	     * Set camera that's used to render the scene for this viewport
	     */
	    camera: Camera;
	    /**
	     *
	     * @returns {away.containers.Scene3D}
	     */
	    /**
	     * Set the scene that's used to render for this viewport
	     */
	    scene: Scene;
	    /**
	     *
	     * @returns {number}
	     */
	    deltaTime: number;
	    /**
	     *
	     */
	    width: number;
	    /**
	     *
	     */
	    height: number;
	    /**
	     *
	     */
	    mousePicker: IPicker;
	    /**
	     *
	     */
	    x: number;
	    /**
	     *
	     */
	    y: number;
	    /**
	     *
	     */
	    visible: boolean;
	    /**
	     *
	     * @returns {number}
	     */
	    renderedFacesCount: number;
	    /**
	     * Renders the view.
	     */
	    render(): void;
	    /**
	     *
	     */
	    pUpdateTime(): void;
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    iEntityCollector: ICollector;
	    /**
	     *
	     */
	    private onProjectionChanged(event);
	    /**
	     *
	     */
	    private onViewportUpdated(event);
	    /**
	     *
	     */
	    private onScissorUpdated(event);
	    project(point3d: Vector3D): Vector3D;
	    unproject(sX: number, sY: number, sZ: number): Vector3D;
	    getRay(sX: number, sY: number, sZ: number): Vector3D;
	    forceMouseMove: boolean;
	    updateCollider(): void;
	}
	export = View;
	
}
declare module "awayjs-display/lib/controllers/FirstPersonController" {
	import ControllerBase = require("awayjs-display/lib/controllers/ControllerBase");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	/**
	 * Extended camera used to hover round a specified target object.
	 *
	 * @see    away3d.containers.View3D
	 */
	class FirstPersonController extends ControllerBase {
	    _iCurrentPanAngle: number;
	    _iCurrentTiltAngle: number;
	    private _panAngle;
	    private _tiltAngle;
	    private _minTiltAngle;
	    private _maxTiltAngle;
	    private _steps;
	    private _walkIncrement;
	    private _strafeIncrement;
	    private _wrapPanAngle;
	    fly: boolean;
	    /**
	     * Fractional step taken each time the <code>hover()</code> method is called. Defaults to 8.
	     *
	     * Affects the speed at which the <code>tiltAngle</code> and <code>panAngle</code> resolve to their targets.
	     *
	     * @see    #tiltAngle
	     * @see    #panAngle
	     */
	    steps: number;
	    /**
	     * Rotation of the camera in degrees around the y axis. Defaults to 0.
	     */
	    panAngle: number;
	    /**
	     * Elevation angle of the camera in degrees. Defaults to 90.
	     */
	    tiltAngle: number;
	    /**
	     * Minimum bounds for the <code>tiltAngle</code>. Defaults to -90.
	     *
	     * @see    #tiltAngle
	     */
	    minTiltAngle: number;
	    /**
	     * Maximum bounds for the <code>tiltAngle</code>. Defaults to 90.
	     *
	     * @see    #tiltAngle
	     */
	    maxTiltAngle: number;
	    /**
	     * Defines whether the value of the pan angle wraps when over 360 degrees or under 0 degrees. Defaults to false.
	     */
	    wrapPanAngle: boolean;
	    /**
	     * Creates a new <code>HoverController</code> object.
	     */
	    constructor(targetObject?: DisplayObject, panAngle?: number, tiltAngle?: number, minTiltAngle?: number, maxTiltAngle?: number, steps?: number, wrapPanAngle?: boolean);
	    /**
	     * Updates the current tilt angle and pan angle values.
	     *
	     * Values are calculated using the defined <code>tiltAngle</code>, <code>panAngle</code> and <code>steps</code> variables.
	     *
	     * @param interpolate   If the update to a target pan- or tiltAngle is interpolated. Default is true.
	     *
	     * @see    #tiltAngle
	     * @see    #panAngle
	     * @see    #steps
	     */
	    update(interpolate?: boolean): void;
	    incrementWalk(val: number): void;
	    incrementStrafe(val: number): void;
	}
	export = FirstPersonController;
	
}
declare module "awayjs-display/lib/controllers/LookAtController" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import ControllerBase = require("awayjs-display/lib/controllers/ControllerBase");
	class LookAtController extends ControllerBase {
	    _pLookAtPosition: Vector3D;
	    _pLookAtObject: DisplayObject;
	    _pOrigin: Vector3D;
	    private _onLookAtObjectChangedDelegate;
	    constructor(targetObject?: DisplayObject, lookAtObject?: DisplayObject);
	    lookAtPosition: Vector3D;
	    lookAtObject: DisplayObject;
	    update(interpolate?: boolean): void;
	    private onLookAtObjectChanged(event);
	}
	export = LookAtController;
	
}
declare module "awayjs-display/lib/controllers/HoverController" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import LookAtController = require("awayjs-display/lib/controllers/LookAtController");
	/**
	 * Extended camera used to hover round a specified target object.
	 *
	 * @see    away.containers.View
	 */
	class HoverController extends LookAtController {
	    _iCurrentPanAngle: number;
	    _iCurrentTiltAngle: number;
	    private _panAngle;
	    private _tiltAngle;
	    private _distance;
	    private _minPanAngle;
	    private _maxPanAngle;
	    private _minTiltAngle;
	    private _maxTiltAngle;
	    private _steps;
	    private _yFactor;
	    private _wrapPanAngle;
	    private _upAxis;
	    /**
	     * Fractional step taken each time the <code>hover()</code> method is called. Defaults to 8.
	     *
	     * Affects the speed at which the <code>tiltAngle</code> and <code>panAngle</code> resolve to their targets.
	     *
	     * @see    #tiltAngle
	     * @see    #panAngle
	     */
	    steps: number;
	    /**
	     * Rotation of the camera in degrees around the y axis. Defaults to 0.
	     */
	    panAngle: number;
	    /**
	     * Elevation angle of the camera in degrees. Defaults to 90.
	     */
	    tiltAngle: number;
	    /**
	     * Distance between the camera and the specified target. Defaults to 1000.
	     */
	    distance: number;
	    /**
	     * Minimum bounds for the <code>panAngle</code>. Defaults to -Infinity.
	     *
	     * @see    #panAngle
	     */
	    minPanAngle: number;
	    /**
	     * Maximum bounds for the <code>panAngle</code>. Defaults to Infinity.
	     *
	     * @see    #panAngle
	     */
	    maxPanAngle: number;
	    /**
	     * Minimum bounds for the <code>tiltAngle</code>. Defaults to -90.
	     *
	     * @see    #tiltAngle
	     */
	    minTiltAngle: number;
	    /**
	     * Maximum bounds for the <code>tiltAngle</code>. Defaults to 90.
	     *
	     * @see    #tiltAngle
	     */
	    maxTiltAngle: number;
	    /**
	     * Fractional difference in distance between the horizontal camera orientation and vertical camera orientation. Defaults to 2.
	     *
	     * @see    #distance
	     */
	    yFactor: number;
	    /**
	     * Defines whether the value of the pan angle wraps when over 360 degrees or under 0 degrees. Defaults to false.
	     */
	    wrapPanAngle: boolean;
	    /**
	     * Creates a new <code>HoverController</code> object.
	     */
	    constructor(targetObject?: DisplayObject, lookAtObject?: DisplayObject, panAngle?: number, tiltAngle?: number, distance?: number, minTiltAngle?: number, maxTiltAngle?: number, minPanAngle?: number, maxPanAngle?: number, steps?: number, yFactor?: number, wrapPanAngle?: boolean);
	    /**
	     * Updates the current tilt angle and pan angle values.
	     *
	     * Values are calculated using the defined <code>tiltAngle</code>, <code>panAngle</code> and <code>steps</code> variables.
	     *
	     * @param interpolate   If the update to a target pan- or tiltAngle is interpolated. Default is true.
	     *
	     * @see    #tiltAngle
	     * @see    #panAngle
	     * @see    #steps
	     */
	    update(interpolate?: boolean): void;
	}
	export = HoverController;
	
}
declare module "awayjs-display/lib/controllers/FollowController" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import HoverController = require("awayjs-display/lib/controllers/HoverController");
	/**
	 * Controller used to follow behind an object on the XZ plane, with an optional
	 * elevation (tiltAngle).
	 *
	 * @see    away3d.containers.View3D
	 */
	class FollowController extends HoverController {
	    constructor(targetObject?: DisplayObject, lookAtObject?: DisplayObject, tiltAngle?: number, distance?: number);
	    update(interpolate?: boolean): void;
	}
	export = FollowController;
	
}
declare module "awayjs-display/lib/controllers/SpringController" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import LookAtController = require("awayjs-display/lib/controllers/LookAtController");
	/**
	 * Uses spring physics to animate the target object towards a position that is
	 * defined as the lookAtTarget object's position plus the vector defined by the
	 * positionOffset property.
	 */
	class SpringController extends LookAtController {
	    private _velocity;
	    private _dv;
	    private _stretch;
	    private _force;
	    private _acceleration;
	    private _desiredPosition;
	    /**
	     * Stiffness of the spring, how hard is it to extend. The higher it is, the more "fixed" the cam will be.
	     * A number between 1 and 20 is recommended.
	     */
	    stiffness: number;
	    /**
	     * Damping is the spring internal friction, or how much it resists the "boinggggg" effect. Too high and you'll lose it!
	     * A number between 1 and 20 is recommended.
	     */
	    damping: number;
	    /**
	     * Mass of the camera, if over 120 and it'll be very heavy to move.
	     */
	    mass: number;
	    /**
	     * Offset of spring center from target in target object space, ie: Where the camera should ideally be in the target object space.
	     */
	    positionOffset: Vector3D;
	    constructor(targetObject?: DisplayObject, lookAtObject?: DisplayObject, stiffness?: number, mass?: number, damping?: number);
	    update(interpolate?: boolean): void;
	}
	export = SpringController;
	
}
declare module "awayjs-display/lib/display/ContextMode" {
	class ContextMode {
	    static AUTO: string;
	    static WEBGL: string;
	    static FLASH: string;
	    static NATIVE: string;
	}
	export = ContextMode;
	
}
declare module "awayjs-display/lib/display/IContext" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	/**
	 *
	 * @class away.base.IContext
	 */
	interface IContext {
	    container: HTMLElement;
	    clear(red?: number, green?: number, blue?: number, alpha?: number, depth?: number, stencil?: number, mask?: number): any;
	    configureBackBuffer(width: number, height: number, antiAlias: number, enableDepthAndStencil?: boolean): any;
	    dispose(): any;
	    present(): any;
	    setScissorRectangle(rect: Rectangle): any;
	}
	export = IContext;
	
}
declare module "awayjs-display/lib/entities/Shape" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import Graphics = require("awayjs-display/lib/base/Graphics");
	/**
	 * This class is used to create lightweight shapes using the ActionScript
	 * drawing application program interface(API). The Shape class includes a
	 * <code>graphics</code> property, which lets you access methods from the
	 * Graphics class.
	 *
	 * <p>The Sprite class also includes a <code>graphics</code>property, and it
	 * includes other features not available to the Shape class. For example, a
	 * Sprite object is a display object container, whereas a Shape object is not
	 * (and cannot contain child display objects). For this reason, Shape objects
	 * consume less memory than Sprite objects that contain the same graphics.
	 * However, a Sprite object supports user input events, while a Shape object
	 * does not.</p>
	 */
	class Shape extends DisplayObject {
	    private _graphics;
	    /**
	     * Specifies the Graphics object belonging to this Shape object, where vector
	     * drawing commands can occur.
	     */
	    graphics: Graphics;
	    /**
	     * Creates a new Shape object.
	     */
	    constructor();
	}
	export = Shape;
	
}
declare module "awayjs-display/lib/text/AntiAliasType" {
	/**
	 * The AntiAliasType class provides values for anti-aliasing in the
	 * away.text.TextField class.
	 */
	class AntiAliasType {
	    /**
	     * Sets anti-aliasing to advanced anti-aliasing. Advanced anti-aliasing
	     * allows font faces to be rendered at very high quality at small sizes. It
	     * is best used with applications that have a lot of small text. Advanced
	     * anti-aliasing is not recommended for very large fonts(larger than 48
	     * points). This constant is used for the <code>antiAliasType</code> property
	     * in the TextField class. Use the syntax
	     * <code>AntiAliasType.ADVANCED</code>.
	     */
	    static ADVANCED: string;
	    /**
	     * Sets anti-aliasing to the anti-aliasing that is used in Flash Player 7 and
	     * earlier. This setting is recommended for applications that do not have a
	     * lot of text. This constant is used for the <code>antiAliasType</code>
	     * property in the TextField class. Use the syntax
	     * <code>AntiAliasType.NORMAL</code>.
	     */
	    static NORMAL: string;
	}
	export = AntiAliasType;
	
}
declare module "awayjs-display/lib/text/GridFitType" {
	/**
	 * The GridFitType class defines values for grid fitting in the TextField class.
	 */
	class GridFitType {
	    /**
	     * Doesn't set grid fitting. Horizontal and vertical lines in the glyphs are
	     * not forced to the pixel grid. This constant is used in setting the
	     * <code>gridFitType</code> property of the TextField class. This is often a
	     * good setting for animation or for large font sizes. Use the syntax
	     * <code>GridFitType.NONE</code>.
	     */
	    static NONE: string;
	    /**
	     * Fits strong horizontal and vertical lines to the pixel grid. This constant
	     * is used in setting the <code>gridFitType</code> property of the TextField
	     * class. This setting only works for left-justified text fields and acts
	     * like the <code>GridFitType.SUBPIXEL</code> constant in static text. This
	     * setting generally provides the best readability for left-aligned text. Use
	     * the syntax <code>GridFitType.PIXEL</code>.
	     */
	    static PIXEL: string;
	    /**
	     * Fits strong horizontal and vertical lines to the sub-pixel grid on LCD
	     * monitors. (Red, green, and blue are actual pixels on an LCD screen.) This
	     * is often a good setting for right-aligned or center-aligned dynamic text,
	     * and it is sometimes a useful tradeoff for animation vs. text quality. This
	     * constant is used in setting the <code>gridFitType</code> property of the
	     * TextField class. Use the syntax <code>GridFitType.SUBPIXEL</code>.
	     */
	    static SUBPIXEL: string;
	}
	export = GridFitType;
	
}
declare module "awayjs-display/lib/text/TextFieldAutoSize" {
	/**
	 * The TextFieldAutoSize class is an enumeration of constant values used in
	 * setting the <code>autoSize</code> property of the TextField class.
	 */
	class TextFieldAutoSize {
	    /**
	     * Specifies that the text is to be treated as center-justified text. Any
	     * resizing of a single line of a text field is equally distributed to both
	     * the right and left sides.
	     */
	    static CENTER: string;
	    /**
	     * Specifies that the text is to be treated as left-justified text, meaning
	     * that the left side of the text field remains fixed and any resizing of a
	     * single line is on the right side.
	     */
	    static LEFT: string;
	    /**
	     * Specifies that no resizing is to occur.
	     */
	    static NONE: string;
	    /**
	     * Specifies that the text is to be treated as right-justified text, meaning
	     * that the right side of the text field remains fixed and any resizing of a
	     * single line is on the left side.
	     */
	    static RIGHT: string;
	}
	export = TextFieldAutoSize;
	
}
declare module "awayjs-display/lib/text/TextFieldType" {
	/**
	 * The TextFieldType class is an enumeration of constant values used in setting the
	 * <code>type</code> property of the TextField class.
	 *
	 * @see away.entities.TextField#type
	 */
	class TextFieldType {
	    /**
	     * Used to specify a <code>dynamic</code> TextField.
	     */
	    static DYNAMIC: string;
	    /**
	     * Used to specify an <code>input</code> TextField.
	     */
	    static INPUT: string;
	}
	export = TextFieldType;
	
}
declare module "awayjs-display/lib/text/TextFormat" {
	/**
	 * The TextFormat class represents character formatting information. Use the
	 * TextFormat class to create specific text formatting for text fields. You
	 * can apply text formatting to both static and dynamic text fields. The
	 * properties of the TextFormat class apply to device and embedded fonts.
	 * However, for embedded fonts, bold and italic text actually require specific
	 * fonts. If you want to display bold or italic text with an embedded font,
	 * you need to embed the bold and italic variations of that font.
	 *
	 * <p> You must use the constructor <code>new TextFormat()</code> to create a
	 * TextFormat object before setting its properties. When you apply a
	 * TextFormat object to a text field using the
	 * <code>TextField.defaultTextFormat</code> property or the
	 * <code>TextField.setTextFormat()</code> method, only its defined properties
	 * are applied. Use the <code>TextField.defaultTextFormat</code> property to
	 * apply formatting BEFORE you add text to the <code>TextField</code>, and the
	 * <code>setTextFormat()</code> method to add formatting AFTER you add text to
	 * the <code>TextField</code>. The TextFormat properties are <code>null</code>
	 * by default because if you don't provide values for the properties, Flash
	 * Player uses its own default formatting. The default formatting that Flash
	 * Player uses for each property(if property's value is <code>null</code>) is
	 * as follows:</p>
	 *
	 * <p>The default formatting for each property is also described in each
	 * property description.</p>
	 */
	class TextFormat {
	    /**
	     * Indicates the alignment of the paragraph. Valid values are TextFormatAlign
	     * constants.
	     *
	     * @default TextFormatAlign.LEFT
	     * @throws ArgumentError The <code>align</code> specified is not a member of
	     *                       flash.text.TextFormatAlign.
	     */
	    align: string;
	    /**
	     * Indicates the block indentation in pixels. Block indentation is applied to
	     * an entire block of text; that is, to all lines of the text. In contrast,
	     * normal indentation(<code>TextFormat.indent</code>) affects only the first
	     * line of each paragraph. If this property is <code>null</code>, the
	     * TextFormat object does not specify block indentation(block indentation is
	     * 0).
	     */
	    blockIndent: number;
	    /**
	     * Specifies whether the text is boldface. The default value is
	     * <code>null</code>, which means no boldface is used. If the value is
	     * <code>true</code>, then the text is boldface.
	     */
	    bold: boolean;
	    /**
	     * Indicates that the text is part of a bulleted list. In a bulleted list,
	     * each paragraph of text is indented. To the left of the first line of each
	     * paragraph, a bullet symbol is displayed. The default value is
	     * <code>null</code>, which means no bulleted list is used.
	     */
	    bullet: boolean;
	    /**
	     * Indicates the color of the text. A number containing three 8-bit RGB
	     * components; for example, 0xFF0000 is red, and 0x00FF00 is green. The
	     * default value is <code>null</code>, which means that Flash Player uses the
	     * color black(0x000000).
	     */
	    color: boolean;
	    /**
	     * The name of the font for text in this text format, as a string. The
	     * default value is <code>null</code>, which means that Flash Player uses
	     * Times New Roman font for the text.
	     */
	    font: string;
	    /**
	     * Indicates the indentation from the left margin to the first character in
	     * the paragraph. The default value is <code>null</code>, which indicates
	     * that no indentation is used.
	     */
	    indent: number;
	    /**
	     * Indicates whether text in this text format is italicized. The default
	     * value is <code>null</code>, which means no italics are used.
	     */
	    italic: boolean;
	    /**
	     * A Boolean value that indicates whether kerning is enabled
	     * (<code>true</code>) or disabled(<code>false</code>). Kerning adjusts the
	     * pixels between certain character pairs to improve readability, and should
	     * be used only when necessary, such as with headings in large fonts. Kerning
	     * is supported for embedded fonts only.
	     *
	     * <p>Certain fonts such as Verdana and monospaced fonts, such as Courier
	     * New, do not support kerning.</p>
	     *
	     * <p>The default value is <code>null</code>, which means that kerning is not
	     * enabled.</p>
	     */
	    kerning: boolean;
	    /**
	     * An integer representing the amount of vertical space(called
	     * <i>leading</i>) between lines. The default value is <code>null</code>,
	     * which indicates that the amount of leading used is 0.
	     */
	    leading: number;
	    /**
	     * The left margin of the paragraph, in pixels. The default value is
	     * <code>null</code>, which indicates that the left margin is 0 pixels.
	     */
	    leftMargin: number;
	    /**
	     * A number representing the amount of space that is uniformly distributed
	     * between all characters. The value specifies the number of pixels that are
	     * added to the advance after each character. The default value is
	     * <code>null</code>, which means that 0 pixels of letter spacing is used.
	     * You can use decimal values such as <code>1.75</code>.
	     */
	    letterSpacing: number;
	    /**
	     * The right margin of the paragraph, in pixels. The default value is
	     * <code>null</code>, which indicates that the right margin is 0 pixels.
	     */
	    rightMargin: number;
	    /**
	     * The size in pixels of text in this text format. The default value is
	     * <code>null</code>, which means that a size of 12 is used.
	     */
	    size: number;
	    /**
	     * Specifies custom tab stops as an array of non-negative integers. Each tab
	     * stop is specified in pixels. If custom tab stops are not specified
	     * (<code>null</code>), the default tab stop is 4(average character width).
	     */
	    tabStops: number[];
	    /**
	     * Indicates the target window where the hyperlink is displayed. If the
	     * target window is an empty string, the text is displayed in the default
	     * target window <code>_self</code>. You can choose a custom name or one of
	     * the following four names: <code>_self</code> specifies the current frame
	     * in the current window, <code>_blank</code> specifies a new window,
	     * <code>_parent</code> specifies the parent of the current frame, and
	     * <code>_top</code> specifies the top-level frame in the current window. If
	     * the <code>TextFormat.url</code> property is an empty string or
	     * <code>null</code>, you can get or set this property, but the property will
	     * have no effect.
	     */
	    target: string;
	    /**
	     * Indicates whether the text that uses this text format is underlined
	     * (<code>true</code>) or not(<code>false</code>). This underlining is
	     * similar to that produced by the <code><U></code> tag, but the latter is
	     * not true underlining, because it does not skip descenders correctly. The
	     * default value is <code>null</code>, which indicates that underlining is
	     * not used.
	     */
	    underline: boolean;
	    /**
	     * Indicates the target URL for the text in this text format. If the
	     * <code>url</code> property is an empty string, the text does not have a
	     * hyperlink. The default value is <code>null</code>, which indicates that
	     * the text does not have a hyperlink.
	     *
	     * <p><b>Note:</b> The text with the assigned text format must be set with
	     * the <code>htmlText</code> property for the hyperlink to work.</p>
	     */
	    url: string;
	    /**
	     * Creates a TextFormat object with the specified properties. You can then
	     * change the properties of the TextFormat object to change the formatting of
	     * text fields.
	     *
	     * <p>Any parameter may be set to <code>null</code> to indicate that it is
	     * not defined. All of the parameters are optional; any omitted parameters
	     * are treated as <code>null</code>.</p>
	     *
	     * @param font        The name of a font for text as a string.
	     * @param size        An integer that indicates the size in pixels.
	     * @param color       The color of text using this text format. A number
	     *                    containing three 8-bit RGB components; for example,
	     *                    0xFF0000 is red, and 0x00FF00 is green.
	     * @param bold        A Boolean value that indicates whether the text is
	     *                    boldface.
	     * @param italic      A Boolean value that indicates whether the text is
	     *                    italicized.
	     * @param underline   A Boolean value that indicates whether the text is
	     *                    underlined.
	     * @param url         The URL to which the text in this text format
	     *                    hyperlinks. If <code>url</code> is an empty string, the
	     *                    text does not have a hyperlink.
	     * @param target      The target window where the hyperlink is displayed. If
	     *                    the target window is an empty string, the text is
	     *                    displayed in the default target window
	     *                    <code>_self</code>. If the <code>url</code> parameter
	     *                    is set to an empty string or to the value
	     *                    <code>null</code>, you can get or set this property,
	     *                    but the property will have no effect.
	     * @param align       The alignment of the paragraph, as a TextFormatAlign
	     *                    value.
	     * @param leftMargin  Indicates the left margin of the paragraph, in pixels.
	     * @param rightMargin Indicates the right margin of the paragraph, in pixels.
	     * @param indent      An integer that indicates the indentation from the left
	     *                    margin to the first character in the paragraph.
	     * @param leading     A number that indicates the amount of leading vertical
	     *                    space between lines.
	     */
	    constructor(font?: string, size?: number, color?: number, bold?: boolean, italic?: boolean, underline?: boolean, url?: string, target?: string, align?: string, leftMargin?: number, rightMargin?: number, indent?: number, leading?: number);
	}
	export = TextFormat;
	
}
declare module "awayjs-display/lib/text/TextInteractionMode" {
	/**
	 * A class that defines the Interactive mode of a text field object.
	 *
	 * @see away.entities.TextField#textInteractionMode
	 */
	class TextInteractionMode {
	    /**
	     * The text field's default interaction mode is NORMAL and it varies across
	     * platform. On Desktop, the normal mode implies that the text field is in
	     * scrollable + selection mode. On Mobile platforms like Android, normal mode
	     * implies that the text field can only be scrolled but the text can not be
	     * selected.
	     */
	    static NORMAL: string;
	    /**
	     * On mobile platforms like Android, the text field starts in normal mode
	     * (which implies scroll and non-selectable mode). The user can switch to
	     * selection mode through the in-built context menu of the text field object.
	     */
	    static SELECTION: string;
	}
	export = TextInteractionMode;
	
}
declare module "awayjs-display/lib/text/TextLineMetrics" {
	/**
	 * The TextLineMetrics class contains information about the text position and
	 * measurements of a line of text within a text field. All measurements are in
	 * pixels. Objects of this class are returned by the
	 * <code>away.entities.TextField.getLineMetrics()</code> method.
	 */
	class TextLineMetrics {
	    /**
	     * The ascent value of the text is the length from the baseline to the top of
	     * the line height in pixels.
	     */
	    ascent: number;
	    /**
	     * The descent value of the text is the length from the baseline to the
	     * bottom depth of the line in pixels.
	     */
	    descent: number;
	    /**
	     * The height value of the text of the selected lines (not necessarily the
	     * complete text) in pixels. The height of the text line does not include the
	     * gutter height.
	     */
	    height: number;
	    /**
	     * The leading value is the measurement of the vertical distance between the
	     * lines of text.
	     */
	    leading: number;
	    /**
	     * The width value is the width of the text of the selected lines (not
	     * necessarily the complete text) in pixels. The width of the text line is
	     * not the same as the width of the text field. The width of the text line is
	     * relative to the text field width, minus the gutter width of 4 pixels
	     * (2 pixels on each side).
	     */
	    width: number;
	    /**
	     * The x value is the left position of the first character in pixels. This
	     * value includes the margin, indent (if any), and gutter widths.
	     */
	    x: number;
	    /**
	     * Creates a TextLineMetrics object. The TextLineMetrics object contains
	     * information about the text metrics of a line of text in a text field.
	     * Objects of this class are returned by the
	     * away.entities.TextField.getLineMetrics() method.
	     *
	     * @param x           The left position of the first character in pixels.
	     * @param width       The width of the text of the selected lines (not
	     *                    necessarily the complete text) in pixels.
	     * @param height      The height of the text of the selected lines (not
	     *                    necessarily the complete text) in pixels.
	     * @param ascent      The length from the baseline to the top of the line
	     *                    height in pixels.
	     * @param descent     The length from the baseline to the bottom depth of
	     *                    the line in pixels.
	     * @param leading     The measurement of the vertical distance between the
	     *                    lines of text.
	     */
	    constructor(x?: number, width?: number, height?: number, ascent?: number, descent?: number, leading?: number);
	}
	export = TextLineMetrics;
	
}
declare module "awayjs-display/lib/entities/TextField" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import AntiAliasType = require("awayjs-display/lib/text/AntiAliasType");
	import GridFitType = require("awayjs-display/lib/text/GridFitType");
	import TextFieldAutoSize = require("awayjs-display/lib/text/TextFieldAutoSize");
	import TextFieldType = require("awayjs-display/lib/text/TextFieldType");
	import TextFormat = require("awayjs-display/lib/text/TextFormat");
	import TextInteractionMode = require("awayjs-display/lib/text/TextInteractionMode");
	import TextLineMetrics = require("awayjs-display/lib/text/TextLineMetrics");
	/**
	 * The TextField class is used to create display objects for text display and
	 * input. <ph outputclass="flexonly">You can use the TextField class to
	 * perform low-level text rendering. However, in Flex, you typically use the
	 * Label, Text, TextArea, and TextInput controls to process text. <ph
	 * outputclass="flashonly">You can give a text field an instance name in the
	 * Property inspector and use the methods and properties of the TextField
	 * class to manipulate it with ActionScript. TextField instance names are
	 * displayed in the Movie Explorer and in the Insert Target Path dialog box in
	 * the Actions panel.
	 *
	 * <p>To create a text field dynamically, use the <code>TextField()</code>
	 * constructor.</p>
	 *
	 * <p>The methods of the TextField class let you set, select, and manipulate
	 * text in a dynamic or input text field that you create during authoring or
	 * at runtime. </p>
	 *
	 * <p>ActionScript provides several ways to format your text at runtime. The
	 * TextFormat class lets you set character and paragraph formatting for
	 * TextField objects. You can apply Cascading Style Sheets(CSS) styles to
	 * text fields by using the <code>TextField.styleSheet</code> property and the
	 * StyleSheet class. You can use CSS to style built-in HTML tags, define new
	 * formatting tags, or apply styles. You can assign HTML formatted text, which
	 * optionally uses CSS styles, directly to a text field. HTML text that you
	 * assign to a text field can contain embedded media(movie clips, SWF files,
	 * GIF files, PNG files, and JPEG files). The text wraps around the embedded
	 * media in the same way that a web browser wraps text around media embedded
	 * in an HTML document. </p>
	 *
	 * <p>Flash Player supports a subset of HTML tags that you can use to format
	 * text. See the list of supported HTML tags in the description of the
	 * <code>htmlText</code> property.</p>
	 *
	 * @event change                    Dispatched after a control value is
	 *                                  modified, unlike the
	 *                                  <code>textInput</code> event, which is
	 *                                  dispatched before the value is modified.
	 *                                  Unlike the W3C DOM Event Model version of
	 *                                  the <code>change</code> event, which
	 *                                  dispatches the event only after the
	 *                                  control loses focus, the ActionScript 3.0
	 *                                  version of the <code>change</code> event
	 *                                  is dispatched any time the control
	 *                                  changes. For example, if a user types text
	 *                                  into a text field, a <code>change</code>
	 *                                  event is dispatched after every keystroke.
	 * @event link                      Dispatched when a user clicks a hyperlink
	 *                                  in an HTML-enabled text field, where the
	 *                                  URL begins with "event:". The remainder of
	 *                                  the URL after "event:" is placed in the
	 *                                  text property of the LINK event.
	 *
	 *                                  <p><b>Note:</b> The default behavior,
	 *                                  adding the text to the text field, occurs
	 *                                  only when Flash Player generates the
	 *                                  event, which in this case happens when a
	 *                                  user attempts to input text. You cannot
	 *                                  put text into a text field by sending it
	 *                                  <code>textInput</code> events.</p>
	 * @event scroll                    Dispatched by a TextField object
	 *                                  <i>after</i> the user scrolls.
	 * @event textInput                 Flash Player dispatches the
	 *                                  <code>textInput</code> event when a user
	 *                                  enters one or more characters of text.
	 *                                  Various text input methods can generate
	 *                                  this event, including standard keyboards,
	 *                                  input method editors(IMEs), voice or
	 *                                  speech recognition systems, and even the
	 *                                  act of pasting plain text with no
	 *                                  formatting or style information.
	 * @event textInteractionModeChange Flash Player dispatches the
	 *                                  <code>textInteractionModeChange</code>
	 *                                  event when a user changes the interaction
	 *                                  mode of a text field. for example on
	 *                                  Android, one can toggle from NORMAL mode
	 *                                  to SELECTION mode using context menu
	 *                                  options
	 */
	class TextField extends DisplayObject {
	    private _bottomScrollV;
	    private _caretIndex;
	    private _length;
	    private _maxScrollH;
	    private _maxScrollV;
	    private _numLines;
	    private _selectionBeginIndex;
	    private _selectionEndIndex;
	    private _text;
	    private _textHeight;
	    private _textInteractionMode;
	    private _textWidth;
	    private _charBoundaries;
	    private _charIndexAtPoint;
	    private _firstCharInParagraph;
	    private _imageReference;
	    private _lineIndexAtPoint;
	    private _lineIndexOfChar;
	    private _lineLength;
	    private _lineMetrics;
	    private _lineOffset;
	    private _lineText;
	    private _paragraphLength;
	    private _textFormat;
	    /**
	     * When set to <code>true</code> and the text field is not in focus, Flash
	     * Player highlights the selection in the text field in gray. When set to
	     * <code>false</code> and the text field is not in focus, Flash Player does
	     * not highlight the selection in the text field.
	     *
	     * @default false
	     */
	    alwaysShowSelection: boolean;
	    /**
	     * The type of anti-aliasing used for this text field. Use
	     * <code>flash.text.AntiAliasType</code> constants for this property. You can
	     * control this setting only if the font is embedded(with the
	     * <code>embedFonts</code> property set to <code>true</code>). The default
	     * setting is <code>flash.text.AntiAliasType.NORMAL</code>.
	     *
	     * <p>To set values for this property, use the following string values:</p>
	     */
	    antiAliasType: AntiAliasType;
	    /**
	     * Controls automatic sizing and alignment of text fields. Acceptable values
	     * for the <code>TextFieldAutoSize</code> constants:
	     * <code>TextFieldAutoSize.NONE</code>(the default),
	     * <code>TextFieldAutoSize.LEFT</code>, <code>TextFieldAutoSize.RIGHT</code>,
	     * and <code>TextFieldAutoSize.CENTER</code>.
	     *
	     * <p>If <code>autoSize</code> is set to <code>TextFieldAutoSize.NONE</code>
	     * (the default) no resizing occurs.</p>
	     *
	     * <p>If <code>autoSize</code> is set to <code>TextFieldAutoSize.LEFT</code>,
	     * the text is treated as left-justified text, meaning that the left margin
	     * of the text field remains fixed and any resizing of a single line of the
	     * text field is on the right margin. If the text includes a line break(for
	     * example, <code>"\n"</code> or <code>"\r"</code>), the bottom is also
	     * resized to fit the next line of text. If <code>wordWrap</code> is also set
	     * to <code>true</code>, only the bottom of the text field is resized and the
	     * right side remains fixed.</p>
	     *
	     * <p>If <code>autoSize</code> is set to
	     * <code>TextFieldAutoSize.RIGHT</code>, the text is treated as
	     * right-justified text, meaning that the right margin of the text field
	     * remains fixed and any resizing of a single line of the text field is on
	     * the left margin. If the text includes a line break(for example,
	     * <code>"\n" or "\r")</code>, the bottom is also resized to fit the next
	     * line of text. If <code>wordWrap</code> is also set to <code>true</code>,
	     * only the bottom of the text field is resized and the left side remains
	     * fixed.</p>
	     *
	     * <p>If <code>autoSize</code> is set to
	     * <code>TextFieldAutoSize.CENTER</code>, the text is treated as
	     * center-justified text, meaning that any resizing of a single line of the
	     * text field is equally distributed to both the right and left margins. If
	     * the text includes a line break(for example, <code>"\n"</code> or
	     * <code>"\r"</code>), the bottom is also resized to fit the next line of
	     * text. If <code>wordWrap</code> is also set to <code>true</code>, only the
	     * bottom of the text field is resized and the left and right sides remain
	     * fixed.</p>
	     *
	     * @throws ArgumentError The <code>autoSize</code> specified is not a member
	     *                       of flash.text.TextFieldAutoSize.
	     */
	    autoSize: TextFieldAutoSize;
	    /**
	     * Specifies whether the text field has a background fill. If
	     * <code>true</code>, the text field has a background fill. If
	     * <code>false</code>, the text field has no background fill. Use the
	     * <code>backgroundColor</code> property to set the background color of a
	     * text field.
	     *
	     * @default false
	     */
	    background: boolean;
	    /**
	     * The color of the text field background. The default value is
	     * <code>0xFFFFFF</code>(white). This property can be retrieved or set, even
	     * if there currently is no background, but the color is visible only if the
	     * text field has the <code>background</code> property set to
	     * <code>true</code>.
	     */
	    backgroundColor: number;
	    /**
	     * Specifies whether the text field has a border. If <code>true</code>, the
	     * text field has a border. If <code>false</code>, the text field has no
	     * border. Use the <code>borderColor</code> property to set the border color.
	     *
	     * @default false
	     */
	    border: boolean;
	    /**
	     * The color of the text field border. The default value is
	     * <code>0x000000</code>(black). This property can be retrieved or set, even
	     * if there currently is no border, but the color is visible only if the text
	     * field has the <code>border</code> property set to <code>true</code>.
	     */
	    borderColor: number;
	    /**
	     * An integer(1-based index) that indicates the bottommost line that is
	     * currently visible in the specified text field. Think of the text field as
	     * a window onto a block of text. The <code>scrollV</code> property is the
	     * 1-based index of the topmost visible line in the window.
	     *
	     * <p>All the text between the lines indicated by <code>scrollV</code> and
	     * <code>bottomScrollV</code> is currently visible in the text field.</p>
	     */
	    bottomScrollV: number;
	    /**
	     * The index of the insertion point(caret) position. If no insertion point
	     * is displayed, the value is the position the insertion point would be if
	     * you restored focus to the field(typically where the insertion point last
	     * was, or 0 if the field has not had focus).
	     *
	     * <p>Selection span indexes are zero-based(for example, the first position
	     * is 0, the second position is 1, and so on).</p>
	     */
	    caretIndex: number;
	    /**
	     * A Boolean value that specifies whether extra white space(spaces, line
	     * breaks, and so on) in a text field with HTML text is removed. The default
	     * value is <code>false</code>. The <code>condenseWhite</code> property only
	     * affects text set with the <code>htmlText</code> property, not the
	     * <code>text</code> property. If you set text with the <code>text</code>
	     * property, <code>condenseWhite</code> is ignored.
	     *
	     * <p>If <code>condenseWhite</code> is set to <code>true</code>, use standard
	     * HTML commands such as <code><BR></code> and <code><P></code> to place line
	     * breaks in the text field.</p>
	     *
	     * <p>Set the <code>condenseWhite</code> property before setting the
	     * <code>htmlText</code> property.</p>
	     */
	    condenseWhite: boolean;
	    /**
	     * Specifies the format applied to newly inserted text, such as text entered
	     * by a user or text inserted with the <code>replaceSelectedText()</code>
	     * method.
	     *
	     * <p><b>Note:</b> When selecting characters to be replaced with
	     * <code>setSelection()</code> and <code>replaceSelectedText()</code>, the
	     * <code>defaultTextFormat</code> will be applied only if the text has been
	     * selected up to and including the last character. Here is an example:</p>
	     * <pre xml:space="preserve"> public my_txt:TextField new TextField();
	     * my_txt.text = "Flash Macintosh version"; public my_fmt:TextFormat = new
	     * TextFormat(); my_fmt.color = 0xFF0000; my_txt.defaultTextFormat = my_fmt;
	     * my_txt.setSelection(6,15); // partial text selected - defaultTextFormat
	     * not applied my_txt.setSelection(6,23); // text selected to end -
	     * defaultTextFormat applied my_txt.replaceSelectedText("Windows version");
	     * </pre>
	     *
	     * <p>When you access the <code>defaultTextFormat</code> property, the
	     * returned TextFormat object has all of its properties defined. No property
	     * is <code>null</code>.</p>
	     *
	     * <p><b>Note:</b> You can't set this property if a style sheet is applied to
	     * the text field.</p>
	     *
	     * @throws Error This method cannot be used on a text field with a style
	     *               sheet.
	     */
	    defaultTextFormat: TextFormat;
	    /**
	     * Specifies whether the text field is a password text field. If the value of
	     * this property is <code>true</code>, the text field is treated as a
	     * password text field and hides the input characters using asterisks instead
	     * of the actual characters. If <code>false</code>, the text field is not
	     * treated as a password text field. When password mode is enabled, the Cut
	     * and Copy commands and their corresponding keyboard shortcuts will not
	     * function. This security mechanism prevents an unscrupulous user from using
	     * the shortcuts to discover a password on an unattended computer.
	     *
	     * @default false
	     */
	    displayAsPassword: boolean;
	    /**
	     * Specifies whether to render by using embedded font outlines. If
	     * <code>false</code>, Flash Player renders the text field by using device
	     * fonts.
	     *
	     * <p>If you set the <code>embedFonts</code> property to <code>true</code>
	     * for a text field, you must specify a font for that text by using the
	     * <code>font</code> property of a TextFormat object applied to the text
	     * field. If the specified font is not embedded in the SWF file, the text is
	     * not displayed.</p>
	     *
	     * @default false
	     */
	    embedFonts: boolean;
	    /**
	     * The type of grid fitting used for this text field. This property applies
	     * only if the <code>flash.text.AntiAliasType</code> property of the text
	     * field is set to <code>flash.text.AntiAliasType.ADVANCED</code>.
	     *
	     * <p>The type of grid fitting used determines whether Flash Player forces
	     * strong horizontal and vertical lines to fit to a pixel or subpixel grid,
	     * or not at all.</p>
	     *
	     * <p>For the <code>flash.text.GridFitType</code> property, you can use the
	     * following string values:</p>
	     *
	     * @default pixel
	     */
	    gridFitType: GridFitType;
	    /**
	     * Contains the HTML representation of the text field contents.
	     *
	     * <p>Flash Player supports the following HTML tags:</p>
	     *
	     * <p>Flash Player and AIR also support explicit character codes, such as
	     * &#38;(ASCII ampersand) and &#x20AC;(Unicode € symbol). </p>
	     */
	    htmlText: string;
	    /**
	     * The number of characters in a text field. A character such as tab
	     * (<code>\t</code>) counts as one character.
	     */
	    length: number;
	    /**
	     * The maximum number of characters that the text field can contain, as
	     * entered by a user. A script can insert more text than
	     * <code>maxChars</code> allows; the <code>maxChars</code> property indicates
	     * only how much text a user can enter. If the value of this property is
	     * <code>0</code>, a user can enter an unlimited amount of text.
	     *
	     * @default 0
	     */
	    maxChars: number;
	    /**
	     * The maximum value of <code>scrollH</code>.
	     */
	    maxScrollH(): number;
	    /**
	     * The maximum value of <code>scrollV</code>.
	     */
	    maxScrollV(): number;
	    /**
	     * A Boolean value that indicates whether Flash Player automatically scrolls
	     * multiline text fields when the user clicks a text field and rolls the
	     * mouse wheel. By default, this value is <code>true</code>. This property is
	     * useful if you want to prevent mouse wheel scrolling of text fields, or
	     * implement your own text field scrolling.
	     */
	    mouseWheelEnabled: boolean;
	    /**
	     * Indicates whether field is a multiline text field. If the value is
	     * <code>true</code>, the text field is multiline; if the value is
	     * <code>false</code>, the text field is a single-line text field. In a field
	     * of type <code>TextFieldType.INPUT</code>, the <code>multiline</code> value
	     * determines whether the <code>Enter</code> key creates a new line(a value
	     * of <code>false</code>, and the <code>Enter</code> key is ignored). If you
	     * paste text into a <code>TextField</code> with a <code>multiline</code>
	     * value of <code>false</code>, newlines are stripped out of the text.
	     *
	     * @default false
	     */
	    multiline: boolean;
	    /**
	     * Defines the number of text lines in a multiline text field. If
	     * <code>wordWrap</code> property is set to <code>true</code>, the number of
	     * lines increases when text wraps.
	     */
	    numLines: number;
	    /**
	     * Indicates the set of characters that a user can enter into the text field.
	     * If the value of the <code>restrict</code> property is <code>null</code>,
	     * you can enter any character. If the value of the <code>restrict</code>
	     * property is an empty string, you cannot enter any character. If the value
	     * of the <code>restrict</code> property is a string of characters, you can
	     * enter only characters in the string into the text field. The string is
	     * scanned from left to right. You can specify a range by using the hyphen
	     * (-) character. Only user interaction is restricted; a script can put any
	     * text into the text field. <ph outputclass="flashonly">This property does
	     * not synchronize with the Embed font options in the Property inspector.
	     *
	     * <p>If the string begins with a caret(^) character, all characters are
	     * initially accepted and succeeding characters in the string are excluded
	     * from the set of accepted characters. If the string does not begin with a
	     * caret(^) character, no characters are initially accepted and succeeding
	     * characters in the string are included in the set of accepted
	     * characters.</p>
	     *
	     * <p>The following example allows only uppercase characters, spaces, and
	     * numbers to be entered into a text field:</p>
	     * <pre xml:space="preserve"> my_txt.restrict = "A-Z 0-9"; </pre>
	     *
	     * <p>The following example includes all characters, but excludes lowercase
	     * letters:</p>
	     * <pre xml:space="preserve"> my_txt.restrict = "^a-z"; </pre>
	     *
	     * <p>You can use a backslash to enter a ^ or - verbatim. The accepted
	     * backslash sequences are \-, \^ or \\. The backslash must be an actual
	     * character in the string, so when specified in ActionScript, a double
	     * backslash must be used. For example, the following code includes only the
	     * dash(-) and caret(^):</p>
	     * <pre xml:space="preserve"> my_txt.restrict = "\\-\\^"; </pre>
	     *
	     * <p>The ^ can be used anywhere in the string to toggle between including
	     * characters and excluding characters. The following code includes only
	     * uppercase letters, but excludes the uppercase letter Q:</p>
	     * <pre xml:space="preserve"> my_txt.restrict = "A-Z^Q"; </pre>
	     *
	     * <p>You can use the <code>\u</code> escape sequence to construct
	     * <code>restrict</code> strings. The following code includes only the
	     * characters from ASCII 32(space) to ASCII 126(tilde).</p>
	     * <pre xml:space="preserve"> my_txt.restrict = "\u0020-\u007E"; </pre>
	     *
	     * @default null
	     */
	    restrict: string;
	    /**
	     * The current horizontal scrolling position. If the <code>scrollH</code>
	     * property is 0, the text is not horizontally scrolled. This property value
	     * is an integer that represents the horizontal position in pixels.
	     *
	     * <p>The units of horizontal scrolling are pixels, whereas the units of
	     * vertical scrolling are lines. Horizontal scrolling is measured in pixels
	     * because most fonts you typically use are proportionally spaced; that is,
	     * the characters can have different widths. Flash Player performs vertical
	     * scrolling by line because users usually want to see a complete line of
	     * text rather than a partial line. Even if a line uses multiple fonts, the
	     * height of the line adjusts to fit the largest font in use.</p>
	     *
	     * <p><b>Note: </b>The <code>scrollH</code> property is zero-based, not
	     * 1-based like the <code>scrollV</code> vertical scrolling property.</p>
	     */
	    scrollH: number;
	    /**
	     * The vertical position of text in a text field. The <code>scrollV</code>
	     * property is useful for directing users to a specific paragraph in a long
	     * passage, or creating scrolling text fields.
	     *
	     * <p>The units of vertical scrolling are lines, whereas the units of
	     * horizontal scrolling are pixels. If the first line displayed is the first
	     * line in the text field, scrollV is set to 1(not 0). Horizontal scrolling
	     * is measured in pixels because most fonts are proportionally spaced; that
	     * is, the characters can have different widths. Flash performs vertical
	     * scrolling by line because users usually want to see a complete line of
	     * text rather than a partial line. Even if there are multiple fonts on a
	     * line, the height of the line adjusts to fit the largest font in use.</p>
	     */
	    scrollV: number;
	    /**
	     * A Boolean value that indicates whether the text field is selectable. The
	     * value <code>true</code> indicates that the text is selectable. The
	     * <code>selectable</code> property controls whether a text field is
	     * selectable, not whether a text field is editable. A dynamic text field can
	     * be selectable even if it is not editable. If a dynamic text field is not
	     * selectable, the user cannot select its text.
	     *
	     * <p>If <code>selectable</code> is set to <code>false</code>, the text in
	     * the text field does not respond to selection commands from the mouse or
	     * keyboard, and the text cannot be copied with the Copy command. If
	     * <code>selectable</code> is set to <code>true</code>, the text in the text
	     * field can be selected with the mouse or keyboard, and the text can be
	     * copied with the Copy command. You can select text this way even if the
	     * text field is a dynamic text field instead of an input text field. </p>
	     *
	     * @default true
	     */
	    selectable: boolean;
	    /**
	     * The zero-based character index value of the first character in the current
	     * selection. For example, the first character is 0, the second character is
	     * 1, and so on. If no text is selected, this property is the value of
	     * <code>caretIndex</code>.
	     */
	    selectionBeginIndex: number;
	    /**
	     * The zero-based character index value of the last character in the current
	     * selection. For example, the first character is 0, the second character is
	     * 1, and so on. If no text is selected, this property is the value of
	     * <code>caretIndex</code>.
	     */
	    selectionEndIndex: number;
	    /**
	     * The sharpness of the glyph edges in this text field. This property applies
	     * only if the <code>flash.text.AntiAliasType</code> property of the text
	     * field is set to <code>flash.text.AntiAliasType.ADVANCED</code>. The range
	     * for <code>sharpness</code> is a number from -400 to 400. If you attempt to
	     * set <code>sharpness</code> to a value outside that range, Flash sets the
	     * property to the nearest value in the range(either -400 or 400).
	     *
	     * @default 0
	     */
	    sharpness: number;
	    /**
	     * Attaches a style sheet to the text field. For information on creating
	     * style sheets, see the StyleSheet class and the <i>ActionScript 3.0
	     * Developer's Guide</i>.
	     *
	     * <p>You can change the style sheet associated with a text field at any
	     * time. If you change the style sheet in use, the text field is redrawn with
	     * the new style sheet. You can set the style sheet to <code>null</code> or
	     * <code>undefined</code> to remove the style sheet. If the style sheet in
	     * use is removed, the text field is redrawn without a style sheet. </p>
	     *
	     * <p><b>Note:</b> If the style sheet is removed, the contents of both
	     * <code>TextField.text</code> and <code> TextField.htmlText</code> change to
	     * incorporate the formatting previously applied by the style sheet. To
	     * preserve the original <code>TextField.htmlText</code> contents without the
	     * formatting, save the value in a variable before removing the style
	     * sheet.</p>
	     */
	    styleSheet: StyleSheet;
	    /**
	     * A string that is the current text in the text field. Lines are separated
	     * by the carriage return character(<code>'\r'</code>, ASCII 13). This
	     * property contains unformatted text in the text field, without HTML tags.
	     *
	     * <p>To get the text in HTML form, use the <code>htmlText</code>
	     * property.</p>
	     */
	    text: string;
	    /**
	     * The color of the text in a text field, in hexadecimal format. The
	     * hexadecimal color system uses six digits to represent color values. Each
	     * digit has 16 possible values or characters. The characters range from 0-9
	     * and then A-F. For example, black is <code>0x000000</code>; white is
	     * <code>0xFFFFFF</code>.
	     *
	     * @default 0(0x000000)
	     */
	    textColor: number;
	    /**
	     * The height of the text in pixels.
	     */
	    textHeight: number;
	    /**
	     * The interaction mode property, Default value is
	     * TextInteractionMode.NORMAL. On mobile platforms, the normal mode implies
	     * that the text can be scrolled but not selected. One can switch to the
	     * selectable mode through the in-built context menu on the text field. On
	     * Desktop, the normal mode implies that the text is in scrollable as well as
	     * selection mode.
	     */
	    textInteractionMode: TextInteractionMode;
	    /**
	     * The width of the text in pixels.
	     */
	    textWidth: number;
	    /**
	     * The thickness of the glyph edges in this text field. This property applies
	     * only when <code>AntiAliasType</code> is set to
	     * <code>AntiAliasType.ADVANCED</code>.
	     *
	     * <p>The range for <code>thickness</code> is a number from -200 to 200. If
	     * you attempt to set <code>thickness</code> to a value outside that range,
	     * the property is set to the nearest value in the range(either -200 or
	     * 200).</p>
	     *
	     * @default 0
	     */
	    thickness: number;
	    /**
	     * The type of the text field. Either one of the following TextFieldType
	     * constants: <code>TextFieldType.DYNAMIC</code>, which specifies a dynamic
	     * text field, which a user cannot edit, or <code>TextFieldType.INPUT</code>,
	     * which specifies an input text field, which a user can edit.
	     *
	     * @default dynamic
	     * @throws ArgumentError The <code>type</code> specified is not a member of
	     *                       flash.text.TextFieldType.
	     */
	    type: TextFieldType;
	    /**
	     * Specifies whether to copy and paste the text formatting along with the
	     * text. When set to <code>true</code>, Flash Player copies and pastes
	     * formatting(such as alignment, bold, and italics) when you copy and paste
	     * between text fields. Both the origin and destination text fields for the
	     * copy and paste procedure must have <code>useRichTextClipboard</code> set
	     * to <code>true</code>. The default value is <code>false</code>.
	     */
	    useRichTextClipboard: boolean;
	    /**
	     * A Boolean value that indicates whether the text field has word wrap. If
	     * the value of <code>wordWrap</code> is <code>true</code>, the text field
	     * has word wrap; if the value is <code>false</code>, the text field does not
	     * have word wrap. The default value is <code>false</code>.
	     */
	    wordWrap: boolean;
	    /**
	     * Creates a new TextField instance. After you create the TextField instance,
	     * call the <code>addChild()</code> or <code>addChildAt()</code> method of
	     * the parent DisplayObjectContainer object to add the TextField instance to
	     * the display list.
	     *
	     * <p>The default size for a text field is 100 x 100 pixels.</p>
	     */
	    constructor();
	    /**
	     * Appends the string specified by the <code>newText</code> parameter to the
	     * end of the text of the text field. This method is more efficient than an
	     * addition assignment(<code>+=</code>) on a <code>text</code> property
	     * (such as <code>someTextField.text += moreText</code>), particularly for a
	     * text field that contains a significant amount of content.
	     *
	     * @param newText The string to append to the existing text.
	     */
	    appendText(newText: string): void;
	    /**
	     * Returns a rectangle that is the bounding box of the character.
	     *
	     * @param charIndex The zero-based index value for the character(for
	     *                  example, the first position is 0, the second position is
	     *                  1, and so on).
	     * @return A rectangle with <code>x</code> and <code>y</code> minimum and
	     *         maximum values defining the bounding box of the character.
	     */
	    getCharBoundaries(charIndex: number): Rectangle;
	    /**
	     * Returns the zero-based index value of the character at the point specified
	     * by the <code>x</code> and <code>y</code> parameters.
	     *
	     * @param x The <i>x</i> coordinate of the character.
	     * @param y The <i>y</i> coordinate of the character.
	     * @return The zero-based index value of the character(for example, the
	     *         first position is 0, the second position is 1, and so on). Returns
	     *         -1 if the point is not over any character.
	     */
	    getCharIndexAtPoint(x: number, y: number): number;
	    /**
	     * Given a character index, returns the index of the first character in the
	     * same paragraph.
	     *
	     * @param charIndex The zero-based index value of the character(for example,
	     *                  the first character is 0, the second character is 1, and
	     *                  so on).
	     * @return The zero-based index value of the first character in the same
	     *         paragraph.
	     * @throws RangeError The character index specified is out of range.
	     */
	    getFirstCharInParagraph(charIndex: number): number;
	    /**
	     * Returns a DisplayObject reference for the given <code>id</code>, for an
	     * image or SWF file that has been added to an HTML-formatted text field by
	     * using an <code><img></code> tag. The <code><img></code> tag is in the
	     * following format:
	     *
	     * <p><pre xml:space="preserve"><code> <img src = 'filename.jpg' id =
	     * 'instanceName' ></code></pre></p>
	     *
	     * @param id The <code>id</code> to match(in the <code>id</code> attribute
	     *           of the <code><img></code> tag).
	     * @return The display object corresponding to the image or SWF file with the
	     *         matching <code>id</code> attribute in the <code><img></code> tag
	     *         of the text field. For media loaded from an external source, this
	     *         object is a Loader object, and, once loaded, the media object is a
	     *         child of that Loader object. For media embedded in the SWF file,
	     *         it is the loaded object. If no <code><img></code> tag with the
	     *         matching <code>id</code> exists, the method returns
	     *         <code>null</code>.
	     */
	    getImageReference(id: string): DisplayObject;
	    /**
	     * Returns the zero-based index value of the line at the point specified by
	     * the <code>x</code> and <code>y</code> parameters.
	     *
	     * @param x The <i>x</i> coordinate of the line.
	     * @param y The <i>y</i> coordinate of the line.
	     * @return The zero-based index value of the line(for example, the first
	     *         line is 0, the second line is 1, and so on). Returns -1 if the
	     *         point is not over any line.
	     */
	    getLineIndexAtPoint(x: number, y: number): number;
	    /**
	     * Returns the zero-based index value of the line containing the character
	     * specified by the <code>charIndex</code> parameter.
	     *
	     * @param charIndex The zero-based index value of the character(for example,
	     *                  the first character is 0, the second character is 1, and
	     *                  so on).
	     * @return The zero-based index value of the line.
	     * @throws RangeError The character index specified is out of range.
	     */
	    getLineIndexOfChar(charIndex: number): number;
	    /**
	     * Returns the number of characters in a specific text line.
	     *
	     * @param lineIndex The line number for which you want the length.
	     * @return The number of characters in the line.
	     * @throws RangeError The line number specified is out of range.
	     */
	    getLineLength(lineIndex: number): number;
	    /**
	     * Returns metrics information about a given text line.
	     *
	     * @param lineIndex The line number for which you want metrics information.
	     * @return A TextLineMetrics object.
	     * @throws RangeError The line number specified is out of range.
	     */
	    getLineMetrics(lineIndex: number): TextLineMetrics;
	    /**
	     * Returns the character index of the first character in the line that the
	     * <code>lineIndex</code> parameter specifies.
	     *
	     * @param lineIndex The zero-based index value of the line(for example, the
	     *                  first line is 0, the second line is 1, and so on).
	     * @return The zero-based index value of the first character in the line.
	     * @throws RangeError The line number specified is out of range.
	     */
	    getLineOffset(lineIndex: number): number;
	    /**
	     * Returns the text of the line specified by the <code>lineIndex</code>
	     * parameter.
	     *
	     * @param lineIndex The zero-based index value of the line(for example, the
	     *                  first line is 0, the second line is 1, and so on).
	     * @return The text string contained in the specified line.
	     * @throws RangeError The line number specified is out of range.
	     */
	    getLineText(lineIndex: number): string;
	    /**
	     * Given a character index, returns the length of the paragraph containing
	     * the given character. The length is relative to the first character in the
	     * paragraph(as returned by <code>getFirstCharInParagraph()</code>), not to
	     * the character index passed in.
	     *
	     * @param charIndex The zero-based index value of the character(for example,
	     *                  the first character is 0, the second character is 1, and
	     *                  so on).
	     * @return Returns the number of characters in the paragraph.
	     * @throws RangeError The character index specified is out of range.
	     */
	    getParagraphLength(charIndex: number): number;
	    /**
	     * Returns a TextFormat object that contains formatting information for the
	     * range of text that the <code>beginIndex</code> and <code>endIndex</code>
	     * parameters specify. Only properties that are common to the entire text
	     * specified are set in the resulting TextFormat object. Any property that is
	     * <i>mixed</i>, meaning that it has different values at different points in
	     * the text, has a value of <code>null</code>.
	     *
	     * <p>If you do not specify values for these parameters, this method is
	     * applied to all the text in the text field. </p>
	     *
	     * <p>The following table describes three possible usages:</p>
	     *
	     * @return The TextFormat object that represents the formatting properties
	     *         for the specified text.
	     * @throws RangeError The <code>beginIndex</code> or <code>endIndex</code>
	     *                    specified is out of range.
	     */
	    getTextFormat(beginIndex?: number, endIndex?: number): TextFormat;
	    /**
	     * Replaces the current selection with the contents of the <code>value</code>
	     * parameter. The text is inserted at the position of the current selection,
	     * using the current default character format and default paragraph format.
	     * The text is not treated as HTML.
	     *
	     * <p>You can use the <code>replaceSelectedText()</code> method to insert and
	     * delete text without disrupting the character and paragraph formatting of
	     * the rest of the text.</p>
	     *
	     * <p><b>Note:</b> This method does not work if a style sheet is applied to
	     * the text field.</p>
	     *
	     * @param value The string to replace the currently selected text.
	     * @throws Error This method cannot be used on a text field with a style
	     *               sheet.
	     */
	    replaceSelectedText(value: string): void;
	    /**
	     * Replaces the range of characters that the <code>beginIndex</code> and
	     * <code>endIndex</code> parameters specify with the contents of the
	     * <code>newText</code> parameter. As designed, the text from
	     * <code>beginIndex</code> to <code>endIndex-1</code> is replaced.
	     *
	     * <p><b>Note:</b> This method does not work if a style sheet is applied to
	     * the text field.</p>
	     *
	     * @param beginIndex The zero-based index value for the start position of the
	     *                   replacement range.
	     * @param endIndex   The zero-based index position of the first character
	     *                   after the desired text span.
	     * @param newText    The text to use to replace the specified range of
	     *                   characters.
	     * @throws Error This method cannot be used on a text field with a style
	     *               sheet.
	     */
	    replaceText(beginIndex: number, endIndex: number, newText: string): void;
	    /**
	     * Sets as selected the text designated by the index values of the first and
	     * last characters, which are specified with the <code>beginIndex</code> and
	     * <code>endIndex</code> parameters. If the two parameter values are the
	     * same, this method sets the insertion point, as if you set the
	     * <code>caretIndex</code> property.
	     *
	     * @param beginIndex The zero-based index value of the first character in the
	     *                   selection(for example, the first character is 0, the
	     *                   second character is 1, and so on).
	     * @param endIndex   The zero-based index value of the last character in the
	     *                   selection.
	     */
	    setSelection(beginIndex: number, endIndex: number): void;
	    /**
	     * Applies the text formatting that the <code>format</code> parameter
	     * specifies to the specified text in a text field. The value of
	     * <code>format</code> must be a TextFormat object that specifies the desired
	     * text formatting changes. Only the non-null properties of
	     * <code>format</code> are applied to the text field. Any property of
	     * <code>format</code> that is set to <code>null</code> is not applied. By
	     * default, all of the properties of a newly created TextFormat object are
	     * set to <code>null</code>.
	     *
	     * <p><b>Note:</b> This method does not work if a style sheet is applied to
	     * the text field.</p>
	     *
	     * <p>The <code>setTextFormat()</code> method changes the text formatting
	     * applied to a range of characters or to the entire body of text in a text
	     * field. To apply the properties of format to all text in the text field, do
	     * not specify values for <code>beginIndex</code> and <code>endIndex</code>.
	     * To apply the properties of the format to a range of text, specify values
	     * for the <code>beginIndex</code> and the <code>endIndex</code> parameters.
	     * You can use the <code>length</code> property to determine the index
	     * values.</p>
	     *
	     * <p>The two types of formatting information in a TextFormat object are
	     * character level formatting and paragraph level formatting. Each character
	     * in a text field can have its own character formatting settings, such as
	     * font name, font size, bold, and italic.</p>
	     *
	     * <p>For paragraphs, the first character of the paragraph is examined for
	     * the paragraph formatting settings for the entire paragraph. Examples of
	     * paragraph formatting settings are left margin, right margin, and
	     * indentation.</p>
	     *
	     * <p>Any text inserted manually by the user, or replaced by the
	     * <code>replaceSelectedText()</code> method, receives the default text field
	     * formatting for new text, and not the formatting specified for the text
	     * insertion point. To set the default formatting for new text, use
	     * <code>defaultTextFormat</code>.</p>
	     *
	     * @param format A TextFormat object that contains character and paragraph
	     *               formatting information.
	     * @throws Error      This method cannot be used on a text field with a style
	     *                    sheet.
	     * @throws RangeError The <code>beginIndex</code> or <code>endIndex</code>
	     *                    specified is out of range.
	     */
	    setTextFormat(format: TextFormat, beginIndex?: number, endIndex?: number): void;
	    /**
	     * Returns true if an embedded font is available with the specified
	     * <code>fontName</code> and <code>fontStyle</code> where
	     * <code>Font.fontType</code> is <code>flash.text.FontType.EMBEDDED</code>.
	     * Starting with Flash Player 10, two kinds of embedded fonts can appear in a
	     * SWF file. Normal embedded fonts are only used with TextField objects. CFF
	     * embedded fonts are only used with the flash.text.engine classes. The two
	     * types are distinguished by the <code>fontType</code> property of the
	     * <code>Font</code> class, as returned by the <code>enumerateFonts()</code>
	     * function.
	     *
	     * <p>TextField cannot use a font of type <code>EMBEDDED_CFF</code>. If
	     * <code>embedFonts</code> is set to <code>true</code> and the only font
	     * available at run time with the specified name and style is of type
	     * <code>EMBEDDED_CFF</code>, Flash Player fails to render the text, as if no
	     * embedded font were available with the specified name and style.</p>
	     *
	     * <p>If both <code>EMBEDDED</code> and <code>EMBEDDED_CFF</code> fonts are
	     * available with the same name and style, the <code>EMBEDDED</code> font is
	     * selected and text renders with the <code>EMBEDDED</code> font.</p>
	     *
	     * @param fontName  The name of the embedded font to check.
	     * @param fontStyle Specifies the font style to check. Use
	     *                  <code>flash.text.FontStyle</code>
	     * @return <code>true</code> if a compatible embedded font is available,
	     *         otherwise <code>false</code>.
	     * @throws ArgumentError The <code>fontStyle</code> specified is not a member
	     *                       of <code>flash.text.FontStyle</code>.
	     */
	    static isFontCompatible(fontName: string, fontStyle: string): boolean;
	}
	export = TextField;
	
}
declare module "awayjs-display/lib/entities/timelinedata/CommandPropsBase" {
	/**
	 * BaseClass for CommandProperties. Should not be instantiated directly.
	 */
	class CommandPropsBase {
	    constructor();
	    deactivate(thisObj: any): void;
	    apply(thisObj: any, time: number, speed: number): void;
	}
	export = CommandPropsBase;
	
}
declare module "awayjs-display/lib/entities/timelinedata/TimeLineObject" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import CommandPropsBase = require("awayjs-display/lib/entities/timelinedata/CommandPropsBase");
	/**
	 * TimeLineObject represents a unique object that is (or will be) used by a TimeLine.
	 *  A TimeLineObject basically consists of an objID, and an IAsset.
	 *  The FrameCommands hold references to these TimeLineObjects, so they can access and modify the IAssets
	
	 */
	class TimeLineObject {
	    private _asset;
	    private _objID;
	    private _deactivateCommandProps;
	    private _isActive;
	    private _is2D;
	    constructor(asset: IAsset, objID: number, deactiveCommandProps: CommandPropsBase);
	    deactivateCommandProps: CommandPropsBase;
	    deactivate(): void;
	    asset: IAsset;
	    objID: number;
	    is2D: boolean;
	    isActive: boolean;
	}
	export = TimeLineObject;
	
}
declare module "awayjs-display/lib/entities/timelinedata/FrameCommand" {
	import CommandPropsBase = require("awayjs-display/lib/entities/timelinedata/CommandPropsBase");
	import TimeLineObject = require("awayjs-display/lib/entities/timelinedata/TimeLineObject");
	/**
	 * FrameCommand associates a TimeLineobject with CommandProps.
	 * CommandProps can be of different class, depending on the type of Asset that the TimeLineObject references to.
	 */
	class FrameCommand {
	    private _commandProps;
	    private _tlObj;
	    private _activate;
	    constructor(tlObj: TimeLineObject);
	    activateObj: boolean;
	    commandProps: CommandPropsBase;
	    tlObj: TimeLineObject;
	    execute(time: number, speed: number): void;
	}
	export = FrameCommand;
	
}
declare module "awayjs-display/lib/entities/timelinedata/TimeLineFrame" {
	import FrameCommand = require("awayjs-display/lib/entities/timelinedata/FrameCommand");
	/**
	 * TimelineFrame holds 3 list of FrameCommands
	 *  - list1 _frameCommands should be  executed when playing the timeline (previous Frame was played)
	 *  - list2 _frameCommandsReverse should be executed when playing the timeline reversed (previous Frame was played)
	 *  - list3 _frameCommandsInit should be executed when jumping to a frame, so we need to fully init the frame
	 *
	 *  Addionial TimelineFrame properties are:
	 *  - script - can be executed, after the frameCommands have been executed
	 *  - list of FrameLabels, and list of corresponding labelTypes
	 *  - duration-value (1 frame is not necessary 1 frame long)
	 *  - startTime and endTime are needed internally when deciding what frame to display
	 */
	class TimeLineFrame {
	    private _script;
	    private _startTime;
	    private _endTime;
	    private _duration;
	    private _timeline;
	    private _frameCommands;
	    private _frameCommandsReverse;
	    private _frameCommandsInit;
	    private _framelabels;
	    private _labelTypes;
	    private _isDirty;
	    constructor();
	    addCommand(newCommand: FrameCommand): void;
	    addCommandReverse(newCommand: FrameCommand): void;
	    addCommandInit(newCommand: FrameCommand): void;
	    addLabel(label: string, type: number): void;
	    framelabels: string[];
	    labelTypes: number[];
	    script: string;
	    addToScript(newscript: string): void;
	    isDirty: boolean;
	    makeDirty(): void;
	    startTime: number;
	    duration: number;
	    endTime: number;
	    setFrameTime(startTime: number, duration: number): void;
	    /**
	     * executes the set of Commands for this Frame.
	     * Each Frame has 3 sets of commands:
	     *  0 = init frame commands = the frame must be init as if previous frame was not played
	     *  1 = play frame commands = the previous frame was played
	     *  2 = playReverse Commands = the next frame was played
	     */
	    executeCommands(commandSet: number, time: number, speed: number): void;
	}
	export = TimeLineFrame;
	
}
declare module "awayjs-display/lib/entities/TimeLine" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import TimeLineFrame = require("awayjs-display/lib/entities/timelinedata/TimeLineFrame");
	import TimeLineObject = require("awayjs-display/lib/entities/timelinedata/TimeLineObject");
	/**
	 * Timeline is a DisplayObjectContainer, that can control the animation of a list of TimeLineObjects.
	 * For now, the focus of Development is on animating the new type of 2D-Geometry exported from FlashPro,
	 * but there is no reason that this cannot be used to animate any type of object, that implements IAsset.
	**/
	class TimeLine extends DisplayObjectContainer {
	    private _timeLineObjs;
	    private _frames;
	    private _time;
	    private _currentFrame;
	    private _speed;
	    private _fps;
	    private _isplaying;
	    private _isInit;
	    private _playMode;
	    private _duration;
	    constructor();
	    speed: number;
	    fps: number;
	    assetType: string;
	    /**
	     * should be called right before the call to away3d-render.
	     */
	    update(timeDelta: number, jumpingToFrame?: boolean): void;
	    /**
	     * Add a new TimeLineFrame.
	     */
	    addFrame(newFrame: TimeLineFrame): void;
	    duration: number;
	    /**
	     * This is called inside the TimeLineFrame.execute() function.
	     */
	    executeFrameScript(frameScript: string): void;
	    /**
	     * Starts playback of animation from current position
	     */
	    start(): void;
	    /**
	     * Stop playback of animation and hold current position
	     */
	    stop(): void;
	    /**
	     * Classic gotoAndPlay like as3 api - set frame by frame-number.
	     */
	    gotoAndPlay(frameNumber: number): void;
	    /**
	     * Classic gotoAndStop as3 api - set frame by frame-number.
	     */
	    gotoAndStop(frameNumber: number): void;
	    /**
	     * gotoAndPlay - set frame by frame-label.
	     */
	    gotoAndPlayLabel(frameLabel: string): void;
	    /**
	     * gotoAndStop - set frame by frame-label.
	     */
	    gotoAndStopLabel(frameLabel: string): void;
	    /**
	     * gotoAndPlay - set time in ms.
	     */
	    gotoAndPlayTime(time: number): void;
	    /**
	     * gotoAndStop - set time in ms.
	     */
	    gotoAndStopTime(time: number): void;
	    addTimeLineObject(newTlObj: TimeLineObject, isDisplayObj?: boolean): void;
	    getTimeLineObjectByID(objID: number): TimeLineObject;
	    getObjectByInstanceName(instanceName: string): IAsset;
	}
	export = TimeLine;
	
}
declare module "awayjs-display/lib/errors/CastError" {
	import Error = require("awayjs-core/lib/errors/Error");
	class CastError extends Error {
	    constructor(message: string);
	}
	export = CastError;
	
}
declare module "awayjs-display/lib/events/ResizeEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class ResizeEvent extends Event {
	    static RESIZE: string;
	    private _oldHeight;
	    private _oldWidth;
	    constructor(type: string, oldHeight?: number, oldWidth?: number);
	    oldHeight: number;
	    oldWidth: number;
	}
	export = ResizeEvent;
	
}
declare module "awayjs-display/lib/events/StageEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class StageEvent extends Event {
	    static CONTEXT_CREATED: string;
	    static CONTEXT_DISPOSED: string;
	    static CONTEXT_RECREATED: string;
	    static VIEWPORT_UPDATED: string;
	    constructor(type: string);
	}
	export = StageEvent;
	
}
declare module "awayjs-display/lib/materials/LightSources" {
	/**
	 * Enumeration class for defining which lighting types affect the specific material
	 * lighting component (diffuse and specular). This can be useful if, for example, you
	 * want to use light probes for diffuse global lighting, but want specular reflections from
	 * traditional light sources without those affecting the diffuse light.
	 *
	 * @see away.materials.ColorMaterial.diffuseLightSources
	 * @see away.materials.ColorMaterial.specularLightSources
	 * @see away.materials.TextureMaterial.diffuseLightSources
	 * @see away.materials.TextureMaterial.specularLightSources
	 */
	class LightSources {
	    /**
	     * Defines normal lights are to be used as the source for the lighting
	     * component.
	     */
	    static LIGHTS: number;
	    /**
	     * Defines that global lighting probes are to be used as the source for the
	     * lighting component.
	     */
	    static PROBES: number;
	    /**
	     * Defines that both normal and global lighting probes  are to be used as the
	     * source for the lighting component. This is equivalent to LightSources.LIGHTS | LightSources.PROBES.
	     */
	    static ALL: number;
	}
	export = LightSources;
	
}
declare module "awayjs-display/lib/pool/CSSSkyboxRenderable" {
	import CSSRenderableBase = require("awayjs-display/lib/pool/CSSRenderableBase");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import Skybox = require("awayjs-display/lib/entities/Skybox");
	/**
	 * @class away.pool.CSSSkyboxRenderable
	 */
	class CSSSkyboxRenderable extends CSSRenderableBase {
	    static id: string;
	    constructor(pool: RenderablePool, skyBox: Skybox);
	}
	export = CSSSkyboxRenderable;
	
}
declare module "awayjs-display/lib/prefabs/PrimitivePrefabBase" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	import PrefabBase = require("awayjs-display/lib/prefabs/PrefabBase");
	/**
	 * PrimitivePrefabBase is an abstract base class for polytope prefabs, which are simple pre-built geometric shapes
	 */
	class PrimitivePrefabBase extends PrefabBase {
	    _geomDirty: boolean;
	    _uvDirty: boolean;
	    private _material;
	    private _geometry;
	    private _subGeometry;
	    private _geometryType;
	    private _geometryTypeDirty;
	    /**
	     *
	     */
	    assetType: string;
	    /**
	     *
	     */
	    geometryType: string;
	    geometry: Geometry;
	    /**
	     * The material with which to render the primitive.
	     */
	    material: MaterialBase;
	    /**
	     * Creates a new PrimitivePrefabBase object.
	     *
	     * @param material The material with which to render the object
	     */
	    constructor(material?: MaterialBase, geometryType?: string);
	    /**
	     * Builds the primitive's geometry when invalid. This method should not be called directly. The calling should
	     * be triggered by the invalidateGeometry method (and in turn by updateGeometry).
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * Builds the primitive's uv coordinates when invalid. This method should not be called directly. The calling
	     * should be triggered by the invalidateUVs method (and in turn by updateUVs).
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * Invalidates the primitive's geometry type, causing it to be updated when requested.
	     */
	    invalidateGeometryType(): void;
	    /**
	     * Invalidates the primitive's geometry, causing it to be updated when requested.
	     */
	    _pInvalidateGeometry(): void;
	    /**
	     * Invalidates the primitive's uv coordinates, causing them to be updated when requested.
	     */
	    _pInvalidateUVs(): void;
	    /**
	     * Updates the subgeometry when invalid.
	     */
	    private updateGeometryType();
	    /**
	     * Updates the geometry when invalid.
	     */
	    private updateGeometry();
	    /**
	     * Updates the uv coordinates when invalid.
	     */
	    private updateUVs();
	    _iValidate(): void;
	    _pCreateObject(): DisplayObject;
	}
	export = PrimitivePrefabBase;
	
}
declare module "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import PrimitivePrefabBase = require("awayjs-display/lib/prefabs/PrimitivePrefabBase");
	/**
	 * A Capsule primitive mesh.
	 */
	class PrimitiveCapsulePrefab extends PrimitivePrefabBase implements IAsset {
	    private _radius;
	    private _height;
	    private _segmentsW;
	    private _segmentsH;
	    private _yUp;
	    private _numVertices;
	    /**
	     * The radius of the capsule.
	     */
	    radius: number;
	    /**
	     * The height of the capsule.
	     */
	    height: number;
	    /**
	     * Defines the number of horizontal segments that make up the capsule. Defaults to 16.
	     */
	    segmentsW: number;
	    /**
	     * Defines the number of vertical segments that make up the capsule. Defaults to 15. Must be uneven.
	     */
	    segmentsH: number;
	    /**
	     * Defines whether the capsule poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    yUp: boolean;
	    /**
	     * Creates a new Capsule object.
	     * @param radius The radius of the capsule.
	     * @param height The height of the capsule.
	     * @param segmentsW Defines the number of horizontal segments that make up the capsule. Defaults to 16.
	     * @param segmentsH Defines the number of vertical segments that make up the capsule. Defaults to 15. Must be uneven value.
	     * @param yUp Defines whether the capsule poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    constructor(radius?: number, height?: number, segmentsW?: number, segmentsH?: number, yUp?: boolean);
	    /**
	     * @inheritDoc
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * @inheritDoc
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	}
	export = PrimitiveCapsulePrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import PrimitivePrefabBase = require("awayjs-display/lib/prefabs/PrimitivePrefabBase");
	/**
	 * A Cylinder primitive mesh.
	 */
	class PrimitiveCylinderPrefab extends PrimitivePrefabBase implements IAsset {
	    _pBottomRadius: number;
	    _pSegmentsW: number;
	    _pSegmentsH: number;
	    private _topRadius;
	    private _height;
	    private _topClosed;
	    private _bottomClosed;
	    private _surfaceClosed;
	    private _yUp;
	    private _numVertices;
	    /**
	     * The radius of the top end of the cylinder.
	     */
	    topRadius: number;
	    /**
	     * The radius of the bottom end of the cylinder.
	     */
	    bottomRadius: number;
	    /**
	     * The radius of the top end of the cylinder.
	     */
	    height: number;
	    /**
	     * Defines the number of horizontal segments that make up the cylinder. Defaults to 16.
	     */
	    segmentsW: number;
	    setSegmentsW(value: number): void;
	    /**
	     * Defines the number of vertical segments that make up the cylinder. Defaults to 1.
	     */
	    segmentsH: number;
	    setSegmentsH(value: number): void;
	    /**
	     * Defines whether the top end of the cylinder is closed (true) or open.
	     */
	    topClosed: boolean;
	    /**
	     * Defines whether the bottom end of the cylinder is closed (true) or open.
	     */
	    bottomClosed: boolean;
	    /**
	     * Defines whether the cylinder poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    yUp: boolean;
	    /**
	     * Creates a new Cylinder object.
	     * @param topRadius The radius of the top end of the cylinder.
	     * @param bottomRadius The radius of the bottom end of the cylinder
	     * @param height The radius of the bottom end of the cylinder
	     * @param segmentsW Defines the number of horizontal segments that make up the cylinder. Defaults to 16.
	     * @param segmentsH Defines the number of vertical segments that make up the cylinder. Defaults to 1.
	     * @param topClosed Defines whether the top end of the cylinder is closed (true) or open.
	     * @param bottomClosed Defines whether the bottom end of the cylinder is closed (true) or open.
	     * @param yUp Defines whether the cone poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    constructor(topRadius?: number, bottomRadius?: number, height?: number, segmentsW?: number, segmentsH?: number, topClosed?: boolean, bottomClosed?: boolean, surfaceClosed?: boolean, yUp?: boolean);
	    /**
	     * @inheritDoc
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * @inheritDoc
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	}
	export = PrimitiveCylinderPrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitiveConePrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import PrimitiveCylinderPrefab = require("awayjs-display/lib/prefabs/PrimitiveCylinderPrefab");
	/**
	 * A UV Cone primitive mesh.
	 */
	class PrimitiveConePrefab extends PrimitiveCylinderPrefab implements IAsset {
	    /**
	     * The radius of the bottom end of the cone.
	     */
	    radius: number;
	    /**
	     * Creates a new Cone object.
	     * @param radius The radius of the bottom end of the cone
	     * @param height The height of the cone
	     * @param segmentsW Defines the number of horizontal segments that make up the cone. Defaults to 16.
	     * @param segmentsH Defines the number of vertical segments that make up the cone. Defaults to 1.
	     * @param yUp Defines whether the cone poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    constructor(radius?: number, height?: number, segmentsW?: number, segmentsH?: number, closed?: boolean, yUp?: boolean);
	}
	export = PrimitiveConePrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitiveCubePrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import PrimitivePrefabBase = require("awayjs-display/lib/prefabs/PrimitivePrefabBase");
	/**
	 * A Cube primitive prefab.
	 */
	class PrimitiveCubePrefab extends PrimitivePrefabBase implements IAsset {
	    private _width;
	    private _height;
	    private _depth;
	    private _tile6;
	    private _segmentsW;
	    private _segmentsH;
	    private _segmentsD;
	    /**
	     * Creates a new Cube object.
	     * @param width The size of the cube along its X-axis.
	     * @param height The size of the cube along its Y-axis.
	     * @param depth The size of the cube along its Z-axis.
	     * @param segmentsW The number of segments that make up the cube along the X-axis.
	     * @param segmentsH The number of segments that make up the cube along the Y-axis.
	     * @param segmentsD The number of segments that make up the cube along the Z-axis.
	     * @param tile6 The type of uv mapping to use. When true, a texture will be subdivided in a 2x3 grid, each used for a single face. When false, the entire image is mapped on each face.
	     */
	    constructor(width?: number, height?: number, depth?: number, segmentsW?: number, segmentsH?: number, segmentsD?: number, tile6?: boolean);
	    /**
	     * The size of the cube along its X-axis.
	     */
	    width: number;
	    /**
	     * The size of the cube along its Y-axis.
	     */
	    height: number;
	    /**
	     * The size of the cube along its Z-axis.
	     */
	    depth: number;
	    /**
	     * The type of uv mapping to use. When false, the entire image is mapped on each face.
	     * When true, a texture will be subdivided in a 3x2 grid, each used for a single face.
	     * Reading the tiles from left to right, top to bottom they represent the faces of the
	     * cube in the following order: bottom, top, back, left, front, right. This creates
	     * several shared edges (between the top, front, left and right faces) which simplifies
	     * texture painting.
	     */
	    tile6: boolean;
	    /**
	     * The number of segments that make up the cube along the X-axis. Defaults to 1.
	     */
	    segmentsW: number;
	    /**
	     * The number of segments that make up the cube along the Y-axis. Defaults to 1.
	     */
	    segmentsH: number;
	    /**
	     * The number of segments that make up the cube along the Z-axis. Defaults to 1.
	     */
	    segmentsD: number;
	    /**
	     * @inheritDoc
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * @inheritDoc
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	}
	export = PrimitiveCubePrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitivePlanePrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import PrimitivePrefabBase = require("awayjs-display/lib/prefabs/PrimitivePrefabBase");
	/**
	 * A Plane primitive mesh.
	 */
	class PrimitivePlanePrefab extends PrimitivePrefabBase implements IAsset {
	    private _segmentsW;
	    private _segmentsH;
	    private _yUp;
	    private _width;
	    private _height;
	    private _doubleSided;
	    /**
	     * Creates a new Plane object.
	     * @param width The width of the plane.
	     * @param height The height of the plane.
	     * @param segmentsW The number of segments that make up the plane along the X-axis.
	     * @param segmentsH The number of segments that make up the plane along the Y or Z-axis.
	     * @param yUp Defines whether the normal vector of the plane should point along the Y-axis (true) or Z-axis (false).
	     * @param doubleSided Defines whether the plane will be visible from both sides, with correct vertex normals.
	     */
	    constructor(width?: number, height?: number, segmentsW?: number, segmentsH?: number, yUp?: boolean, doubleSided?: boolean);
	    /**
	     * The number of segments that make up the plane along the X-axis. Defaults to 1.
	     */
	    segmentsW: number;
	    /**
	     * The number of segments that make up the plane along the Y or Z-axis, depending on whether yUp is true or
	     * false, respectively. Defaults to 1.
	     */
	    segmentsH: number;
	    /**
	     *  Defines whether the normal vector of the plane should point along the Y-axis (true) or Z-axis (false). Defaults to true.
	     */
	    yUp: boolean;
	    /**
	     * Defines whether the plane will be visible from both sides, with correct vertex normals (as opposed to bothSides on Material). Defaults to false.
	     */
	    doubleSided: boolean;
	    /**
	     * The width of the plane.
	     */
	    width: number;
	    /**
	     * The height of the plane.
	     */
	    height: number;
	    /**
	     * @inheritDoc
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * @inheritDoc
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	}
	export = PrimitivePlanePrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitivePolygonPrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import PrimitiveCylinderPrefab = require("awayjs-display/lib/prefabs/PrimitiveCylinderPrefab");
	/**
	 * A UV RegularPolygon primitive mesh.
	 */
	class PrimitivePolygonPrefab extends PrimitiveCylinderPrefab implements IAsset {
	    /**
	     * The radius of the regular polygon.
	     */
	    radius: number;
	    /**
	     * The number of sides of the regular polygon.
	     */
	    sides: number;
	    /**
	     * The number of subdivisions from the edge to the center of the regular polygon.
	     */
	    subdivisions: number;
	    /**
	     * Creates a new RegularPolygon disc object.
	     * @param radius The radius of the regular polygon
	     * @param sides Defines the number of sides of the regular polygon.
	     * @param yUp Defines whether the regular polygon should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    constructor(radius?: number, sides?: number, yUp?: boolean);
	}
	export = PrimitivePolygonPrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitiveSpherePrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import PrimitivePrefabBase = require("awayjs-display/lib/prefabs/PrimitivePrefabBase");
	/**
	 * A UV Sphere primitive mesh.
	 */
	class PrimitiveSpherePrefab extends PrimitivePrefabBase implements IAsset {
	    private _radius;
	    private _segmentsW;
	    private _segmentsH;
	    private _yUp;
	    /**
	     * The radius of the sphere.
	     */
	    radius: number;
	    /**
	     * Defines the number of horizontal segments that make up the sphere. Defaults to 16.
	     */
	    segmentsW: number;
	    /**
	     * Defines the number of vertical segments that make up the sphere. Defaults to 12.
	     */
	    segmentsH: number;
	    /**
	     * Defines whether the sphere poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    yUp: boolean;
	    /**
	     * Creates a new Sphere object.
	     *
	     * @param radius The radius of the sphere.
	     * @param segmentsW Defines the number of horizontal segments that make up the sphere.
	     * @param segmentsH Defines the number of vertical segments that make up the sphere.
	     * @param yUp Defines whether the sphere poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    constructor(radius?: number, segmentsW?: number, segmentsH?: number, yUp?: boolean);
	    /**
	     * @inheritDoc
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * @inheritDoc
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	}
	export = PrimitiveSpherePrefab;
	
}
declare module "awayjs-display/lib/prefabs/PrimitiveTorusPrefab" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import PrimitivePrefabBase = require("awayjs-display/lib/prefabs/PrimitivePrefabBase");
	/**
	 * A UV Cylinder primitive mesh.
	 */
	class PrimitiveTorusPrefab extends PrimitivePrefabBase implements IAsset {
	    private _radius;
	    private _tubeRadius;
	    private _segmentsR;
	    private _segmentsT;
	    private _yUp;
	    private _numVertices;
	    /**
	     * The radius of the torus.
	     */
	    radius: number;
	    /**
	     * The radius of the inner tube of the torus.
	     */
	    tubeRadius: number;
	    /**
	     * Defines the number of horizontal segments that make up the torus. Defaults to 16.
	     */
	    segmentsR: number;
	    /**
	     * Defines the number of vertical segments that make up the torus. Defaults to 8.
	     */
	    segmentsT: number;
	    /**
	     * Defines whether the torus poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    yUp: boolean;
	    /**
	     * Creates a new <code>Torus</code> object.
	     * @param radius The radius of the torus.
	     * @param tuebRadius The radius of the inner tube of the torus.
	     * @param segmentsR Defines the number of horizontal segments that make up the torus.
	     * @param segmentsT Defines the number of vertical segments that make up the torus.
	     * @param yUp Defines whether the torus poles should lay on the Y-axis (true) or on the Z-axis (false).
	     */
	    constructor(radius?: number, tubeRadius?: number, segmentsR?: number, segmentsT?: number, yUp?: boolean);
	    /**
	     * @inheritDoc
	     */
	    _pBuildGeometry(target: SubGeometryBase, geometryType: string): void;
	    /**
	     * @inheritDoc
	     */
	    _pBuildUVs(target: SubGeometryBase, geometryType: string): void;
	}
	export = PrimitiveTorusPrefab;
	
}
declare module "awayjs-display/lib/render/CSSDefaultRenderer" {
	import CSSRendererBase = require("awayjs-display/lib/render/CSSRendererBase");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import EntityCollector = require("awayjs-display/lib/traverse/EntityCollector");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	/**
	 * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the
	 * materials assigned to them.
	 *
	 * @class away.render.DefaultRenderer
	 */
	class CSSDefaultRenderer extends CSSRendererBase implements IRenderer {
	    private _container;
	    private _context;
	    private _contextStyle;
	    private _contextMatrix;
	    private _activeMaterial;
	    private _skyboxProjection;
	    private _transform;
	    /**
	     * Creates a new CSSDefaultRenderer object.
	     */
	    constructor();
	    /**
	     *
	     * @param entityCollector
	     */
	    render(entityCollector: ICollector): void;
	    /**
	     * @inheritDoc
	     */
	    pDraw(entityCollector: EntityCollector): void;
	    /**
	     * Updates the backbuffer properties.
	     */
	    pUpdateBackBuffer(): void;
	    /**
	     * Draw the skybox if present.
	     * @param entityCollector The EntityCollector containing all potentially visible information.
	     */
	    private drawSkybox(entityCollector);
	    /**
	     * Draw a list of renderables.
	     * @param renderables The renderables to draw.
	     * @param entityCollector The EntityCollector containing all potentially visible information.
	     */
	    private drawRenderables(item, entityCollector);
	    dispose(): void;
	    _iCreateEntityCollector(): ICollector;
	}
	export = CSSDefaultRenderer;
	
}
declare module "awayjs-display/lib/sort/RenderableMergeSort" {
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import IEntitySorter = require("awayjs-display/lib/sort/IEntitySorter");
	/**
	 * @class away.sort.RenderableMergeSort
	 */
	class RenderableMergeSort implements IEntitySorter {
	    sortBlendedRenderables(head: IRenderable): IRenderable;
	    sortOpaqueRenderables(head: IRenderable): IRenderable;
	}
	export = RenderableMergeSort;
	
}
declare module "awayjs-display/lib/text/TextFormatAlign" {
	/**
	 * The TextFormatAlign class provides values for text alignment in the
	 * TextFormat class.
	 */
	class TextFormatAlign {
	    /**
	     * Constant; centers the text in the text field. Use the syntax
	     * <code>TextFormatAlign.CENTER</code>.
	     */
	    CENTER: string;
	    /**
	     * Constant; justifies text within the text field. Use the syntax
	     * <code>TextFormatAlign.JUSTIFY</code>.
	     */
	    JUSTIFY: string;
	    /**
	     * Constant; aligns text to the left within the text field. Use the syntax
	     * <code>TextFormatAlign.LEFT</code>.
	     */
	    LEFT: string;
	    /**
	     * Constant; aligns text to the right within the text field. Use the syntax
	     * <code>TextFormatAlign.RIGHT</code>.
	     */
	    RIGHT: string;
	}
	export = TextFormatAlign;
	
}
declare module "awayjs-display/lib/utils/Cast" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
	/**
	 * Helper class for casting assets to usable objects
	 */
	class Cast {
	    private static _colorNames;
	    private static _hexChars;
	    private static _notClasses;
	    private static _classes;
	    static string(data: any): string;
	    static byteArray(data: any): ByteArray;
	    private static isHex(str);
	    static tryColor(data: any): number;
	    static color(data: any): number;
	    static tryClass(name: string): any;
	    static bitmapData(data: any): BitmapData;
	    static bitmapTexture(data: any): BitmapTexture;
	}
	export = Cast;
	
}
declare module "awayjs-display/lib/entities/timelinedata/InterpolationObject" {
	/**
	 * TimeLineObject represents a unique object that is (or will be) used by a TimeLine.
	 *  A TimeLineObject basically consists of an objID, and an IAsset.
	 *  The FrameCommands hold references to these TimeLineObjects, so they can access and modify the IAssets
	
	 */
	class InterpolationObject {
	    private _type;
	    private _startValue;
	    private _startTime;
	    private _endValue;
	    private _endTime;
	    private _duration;
	    constructor(type: number, startValue: any, endValue: any, startTime: number, endTime: number);
	    getState(time: number, speed: number): any;
	}
	export = InterpolationObject;
	
}
declare module "awayjs-display/lib/entities/timelinedata/CommandPropsDisplayObject" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import CommandPropsBase = require("awayjs-display/lib/entities/timelinedata/CommandPropsBase");
	import InterpolationObject = require("awayjs-display/lib/entities/timelinedata/InterpolationObject");
	class CommandPropsDisplayObject extends CommandPropsBase {
	    private _doDisplaymatrix;
	    private _displayMatrix;
	    private _displayMatrixInterpolate;
	    private _doColorTransform;
	    private _colorTransform;
	    private _colorTransformInterpolate;
	    private _doDepth;
	    private _depth;
	    private _doFilters;
	    private _filter;
	    private _doBlendMode;
	    private _blendMode;
	    private _doDepthClip;
	    private _depthClip;
	    private _doInstanceName;
	    private _instanceName;
	    constructor();
	    setBlendMode(blendMode: number): void;
	    setClipDepth(clipDepth: number): void;
	    setFilter(filter: any): void;
	    setDepth(depth: number): void;
	    setDisplaymatrixInterpolate(interpolate: InterpolationObject): void;
	    setDisplaymatrix(displayMatrix: Matrix3D): void;
	    setColorTransform(colorTransform: ColorTransform): void;
	    setColorTranformInterpolate(interpolate: InterpolationObject): void;
	    setInstancename(instanceName: string): void;
	    deactivate(thisObj: DisplayObjectContainer): void;
	    apply(thisObj: DisplayObjectContainer, time: number, speed: number): void;
	}
	export = CommandPropsDisplayObject;
	
}
declare module "awayjs-display/lib/materials/lightpickers/StaticLightPicker" {
	import LightPickerBase = require("awayjs-display/lib/materials/lightpickers/LightPickerBase");
	/**
	 * StaticLightPicker is a light picker that provides a static set of lights. The lights can be reassigned, but
	 * if the configuration changes (number of directional lights, point lights, etc), a material recompilation may
	 * occur.
	 */
	class StaticLightPicker extends LightPickerBase {
	    private _lights;
	    private _onCastShadowChangeDelegate;
	    /**
	     * Creates a new StaticLightPicker object.
	     * @param lights The lights to be used for shading.
	     */
	    constructor(lights: any);
	    /**
	     * The lights used for shading.
	     */
	    lights: any[];
	    /**
	     * Remove configuration change listeners on the lights.
	     */
	    private clearListeners();
	    /**
	     * Notifies the material of a configuration change.
	     */
	    private onCastShadowChange(event);
	    /**
	     * Called when a directional light's shadow casting configuration changes.
	     */
	    private updateDirectionalCasting(light);
	    /**
	     * Called when a point light's shadow casting configuration changes.
	     */
	    private updatePointCasting(light);
	}
	export = StaticLightPicker;
	
}
declare module "awayjs-display/lib/materials/shadowmappers/CascadeShadowMapper" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Event = require("awayjs-core/lib/events/Event");
	import IEventDispatcher = require("awayjs-core/lib/events/IEventDispatcher");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import DirectionalShadowMapper = require("awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper");
	import RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
	class CascadeShadowMapper extends DirectionalShadowMapper implements IEventDispatcher {
	    _pScissorRects: Rectangle[];
	    private _pScissorRectsInvalid;
	    private _splitRatios;
	    private _numCascades;
	    private _depthCameras;
	    private _depthLenses;
	    private _texOffsetsX;
	    private _texOffsetsY;
	    private _changeDispatcher;
	    private _nearPlaneDistances;
	    constructor(numCascades?: number);
	    getSplitRatio(index: number): number;
	    setSplitRatio(index: number, value: number): void;
	    getDepthProjections(partition: number): Matrix3D;
	    private init();
	    _pSetDepthMapSize(value: number): void;
	    private invalidateScissorRects();
	    numCascades: number;
	    pDrawDepthMap(target: RenderTexture, scene: Scene, renderer: IRenderer): void;
	    private updateScissorRects();
	    pUpdateDepthProjection(viewCamera: Camera): void;
	    private updateProjectionPartition(matrix, splitRatio, texOffsetX, texOffsetY);
	    addEventListener(type: string, listener: Function): void;
	    removeEventListener(type: string, listener: Function): void;
	    dispatchEvent(event: Event): void;
	    hasEventListener(type: string): boolean;
	    _iNearPlaneDistances: number[];
	}
	export = CascadeShadowMapper;
	
}
declare module "awayjs-display/lib/materials/shadowmappers/NearDirectionalShadowMapper" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import DirectionalShadowMapper = require("awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper");
	class NearDirectionalShadowMapper extends DirectionalShadowMapper {
	    private _coverageRatio;
	    constructor(coverageRatio?: number);
	    /**
	     * A value between 0 and 1 to indicate the ratio of the view frustum that needs to be covered by the shadow map.
	     */
	    coverageRatio: number;
	    pUpdateDepthProjection(viewCamera: Camera): void;
	}
	export = NearDirectionalShadowMapper;
	
}
declare module "awayjs-methodmaterials/lib/TriangleMaterialMode" {
	class TriangleMaterialMode {
	    /**
	     *
	     */
	    static SINGLE_PASS: string;
	    /**
	     *
	     */
	    static MULTI_PASS: string;
	}
	export = TriangleMaterialMode;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadingMethodBase" {
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	/**
	 * ShadingMethodBase provides an abstract base method for shading methods, used by compiled passes to compile
	 * the final shading program.
	 */
	class ShadingMethodBase extends NamedAssetBase {
	    /**
	     * Create a new ShadingMethodBase object.
	     */
	    constructor();
	    iIsUsed(shaderObject: ShaderObjectBase): boolean;
	    /**
	     * Initializes the properties for a MethodVO, including register and texture indices.
	     *
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     *
	     * @internal
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * Initializes unchanging shader constants using the data from a MethodVO.
	     *
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     *
	     * @internal
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * Indicates whether or not this method expects normals in tangent space. Override for object-space normals.
	     */
	    iUsesTangentSpace(): boolean;
	    /**
	     * Cleans up any resources used by the current object.
	     */
	    dispose(): void;
	    /**
	     * Resets the compilation state of the method.
	     *
	     * @internal
	     */
	    iReset(): void;
	    /**
	     * Resets the method's state for compilation.
	     *
	     * @internal
	     */
	    iCleanCompilationData(): void;
	    /**
	     * Get the vertex shader code for this method.
	     * @param vo The MethodVO object linking this method with the pass currently being compiled.
	     * @param regCache The register cache used during the compilation.
	     *
	     * @internal
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Sets the render state for this method.
	     *
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     * @param stage The Stage object currently used for rendering.
	     *
	     * @internal
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Sets the render state for a single renderable.
	     *
	     * @param vo The MethodVO object linking this method with the pass currently being compiled.
	     * @param renderable The renderable currently being rendered.
	     * @param stage The Stage object currently used for rendering.
	     * @param camera The camera from which the scene is currently rendered.
	     *
	     * @internal
	     */
	    iSetRenderState(shaderObject: ShaderObjectBase, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * Clears the render state for this method.
	     * @param vo The MethodVO object linking this method with the pass currently being compiled.
	     * @param stage The Stage object currently used for rendering.
	     *
	     * @internal
	     */
	    iDeactivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Marks the shader program as invalid, so it will be recompiled before the next render.
	     *
	     * @internal
	     */
	    iInvalidateShaderProgram(): void;
	    /**
	     * Copies the state from a ShadingMethodBase object into the current object.
	     */
	    copyFrom(method: ShadingMethodBase): void;
	}
	export = ShadingMethodBase;
	
}
declare module "awayjs-methodmaterials/lib/data/MethodVO" {
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * MethodVO contains data for a given shader object for the use within a single material.
	 * This allows shader methods to be shared across materials while their non-public state differs.
	 */
	class MethodVO {
	    useMethod: boolean;
	    method: ShadingMethodBase;
	    texturesIndex: number;
	    secondaryTexturesIndex: number;
	    vertexConstantsIndex: number;
	    secondaryVertexConstantsIndex: number;
	    fragmentConstantsIndex: number;
	    secondaryFragmentConstantsIndex: number;
	    needsProjection: boolean;
	    needsView: boolean;
	    needsNormals: boolean;
	    needsTangents: boolean;
	    needsUV: boolean;
	    needsSecondaryUV: boolean;
	    needsGlobalVertexPos: boolean;
	    needsGlobalFragmentPos: boolean;
	    usesTexture: boolean;
	    /**
	     * Creates a new MethodVO object.
	     */
	    constructor(method: ShadingMethodBase);
	    /**
	     * Resets the values of the value object to their "unused" state.
	     */
	    reset(): void;
	}
	export = MethodVO;
	
}
declare module "awayjs-methodmaterials/lib/methods/AmbientBasicMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * AmbientBasicMethod provides the default shading method for uniform ambient lighting.
	 */
	class AmbientBasicMethod extends ShadingMethodBase {
	    private _color;
	    private _alpha;
	    private _colorR;
	    private _colorG;
	    private _colorB;
	    private _ambient;
	    /**
	     * Creates a new AmbientBasicMethod object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The strength of the ambient reflection of the surface.
	     */
	    ambient: number;
	    /**
	     * The alpha component of the surface.
	     */
	    alpha: number;
	    /**
	     * @inheritDoc
	     */
	    copyFrom(method: ShadingMethodBase): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Updates the ambient color data used by the render state.
	     */
	    private updateColor();
	}
	export = AmbientBasicMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/LightingMethodBase" {
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * LightingMethodBase provides an abstract base method for shading methods that uses lights.
	 * Used for diffuse and specular shaders only.
	 */
	class LightingMethodBase extends ShadingMethodBase {
	    /**
	     * A method that is exposed to wrappers in case the strength needs to be controlled
	     */
	    _iModulateMethod: (shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData) => string;
	    /**
	     * Creates a new LightingMethodBase.
	     */
	    constructor();
	    /**
	     * Get the fragment shader code that will be needed before any per-light code is added.
	     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
	     * @param regCache The register cache used during the compilation.
	     * @private
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Get the fragment shader code that will generate the code relevant to a single light.
	     *
	     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
	     * @param lightDirReg The register containing the light direction vector.
	     * @param lightColReg The register containing the light colour.
	     * @param regCache The register cache used during the compilation.
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Get the fragment shader code that will generate the code relevant to a single light probe object.
	     *
	     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
	     * @param cubeMapReg The register containing the cube map for the current probe
	     * @param weightRegister A string representation of the register + component containing the current weight
	     * @param regCache The register cache providing any necessary registers to the shader
	     */
	    iGetFragmentCodePerProbe(shaderObject: ShaderLightingObject, methodVO: MethodVO, cubeMapReg: ShaderRegisterElement, weightRegister: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.
	     *
	     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
	     * @param regCache The register cache used during the compilation.
	     * @param targetReg The register containing the final shading output.
	     * @private
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = LightingMethodBase;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseBasicMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	import LightingMethodBase = require("awayjs-methodmaterials/lib/methods/LightingMethodBase");
	/**
	 * DiffuseBasicMethod provides the default shading method for Lambert (dot3) diffuse lighting.
	 */
	class DiffuseBasicMethod extends LightingMethodBase {
	    private _multiply;
	    _pUseTexture: boolean;
	    _pTotalLightColorReg: ShaderRegisterElement;
	    _pDiffuseInputRegister: ShaderRegisterElement;
	    private _texture;
	    private _diffuseColor;
	    private _ambientColor;
	    private _diffuseR;
	    private _diffuseG;
	    private _diffuseB;
	    private _ambientR;
	    private _ambientG;
	    private _ambientB;
	    _pIsFirstLight: boolean;
	    /**
	     * Creates a new DiffuseBasicMethod object.
	     */
	    constructor();
	    iIsUsed(shaderObject: ShaderLightingObject): boolean;
	    /**
	     * Set internally if diffuse color component multiplies or replaces the ambient color
	     */
	    multiply: boolean;
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * Forces the creation of the texture.
	     * @param stage The Stage used by the renderer
	     */
	    generateMip(stage: Stage): void;
	    /**
	     * The color of the diffuse reflection when not using a texture.
	     */
	    diffuseColor: number;
	    /**
	     * The color of the ambient reflection
	     */
	    ambientColor: number;
	    /**
	     * The bitmapData to use to define the diffuse reflection color per texel.
	     */
	    texture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    copyFrom(method: ShadingMethodBase): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerProbe(shaderObject: ShaderLightingObject, methodVO: MethodVO, cubeMapReg: ShaderRegisterElement, weightRegister: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Generate the code that applies the calculated shadow to the diffuse light
	     * @param methodVO The MethodVO object for which the compilation is currently happening.
	     * @param regCache The register cache the compiler is currently using for the register management.
	     */
	    pApplyShadow(shaderObject: ShaderLightingObject, methodVO: MethodVO, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Updates the diffuse color data used by the render state.
	     */
	    private updateDiffuse();
	    /**
	     * Updates the ambient color data used by the render state.
	     */
	    private updateAmbient();
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderLightingObject, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	}
	export = DiffuseBasicMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectMethodBase" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * EffectMethodBase forms an abstract base class for shader methods that are not dependent on light sources,
	 * and are in essence post-process effects on the materials.
	 */
	class EffectMethodBase extends ShadingMethodBase implements IAsset {
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    /**
	     * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.
	     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
	     * @param regCache The register cache used during the compilation.
	     * @param targetReg The register that will be containing the method's output.
	     * @private
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectMethodBase;
	
}
declare module "awayjs-methodmaterials/lib/methods/NormalBasicMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * NormalBasicMethod is the default method for standard tangent-space normal mapping.
	 */
	class NormalBasicMethod extends ShadingMethodBase {
	    private _texture;
	    private _useTexture;
	    _pNormalTextureRegister: ShaderRegisterElement;
	    /**
	     * Creates a new NormalBasicMethod object.
	     */
	    constructor();
	    iIsUsed(shaderObject: ShaderObjectBase): boolean;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * Indicates whether or not this method outputs normals in tangent space. Override for object-space normals.
	     */
	    iOutputsTangentNormals(): boolean;
	    /**
	     * @inheritDoc
	     */
	    copyFrom(method: ShadingMethodBase): void;
	    /**
	     * The texture containing the normals per pixel.
	     */
	    normalMap: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = NormalBasicMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import ShadowMapperBase = require("awayjs-display/lib/materials/shadowmappers/ShadowMapperBase");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * ShadowMapMethodBase provides an abstract base method for shadow map methods.
	 */
	class ShadowMapMethodBase extends ShadingMethodBase implements IAsset {
	    _pCastingLight: LightBase;
	    _pShadowMapper: ShadowMapperBase;
	    _pEpsilon: number;
	    _pAlpha: number;
	    /**
	     * Creates a new ShadowMapMethodBase object.
	     * @param castingLight The light used to cast shadows.
	     */
	    constructor(castingLight: LightBase);
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    /**
	     * The "transparency" of the shadows. This allows making shadows less strong.
	     */
	    alpha: number;
	    /**
	     * The light casting the shadows.
	     */
	    castingLight: LightBase;
	    /**
	     * A small value to counter floating point precision errors when comparing values in the shadow map with the
	     * calculated depth value. Increase this if shadow banding occurs, decrease it if the shadow seems to be too detached.
	     */
	    epsilon: number;
	}
	export = ShadowMapMethodBase;
	
}
declare module "awayjs-methodmaterials/lib/methods/SpecularBasicMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import LightingMethodBase = require("awayjs-methodmaterials/lib/methods/LightingMethodBase");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * SpecularBasicMethod provides the default shading method for Blinn-Phong specular highlights (an optimized but approximated
	 * version of Phong specularity).
	 */
	class SpecularBasicMethod extends LightingMethodBase {
	    _pUseTexture: boolean;
	    _pTotalLightColorReg: ShaderRegisterElement;
	    _pSpecularTextureRegister: ShaderRegisterElement;
	    _pSpecularTexData: ShaderRegisterElement;
	    _pSpecularDataRegister: ShaderRegisterElement;
	    private _texture;
	    private _gloss;
	    private _specular;
	    private _specularColor;
	    _iSpecularR: number;
	    _iSpecularG: number;
	    _iSpecularB: number;
	    _pIsFirstLight: boolean;
	    /**
	     * Creates a new SpecularBasicMethod object.
	     */
	    constructor();
	    iIsUsed(shaderObject: ShaderLightingObject): boolean;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * The sharpness of the specular highlight.
	     */
	    gloss: number;
	    /**
	     * The overall strength of the specular highlights.
	     */
	    specular: number;
	    /**
	     * The colour of the specular reflection of the surface.
	     */
	    specularColor: number;
	    /**
	     * The bitmapData that encodes the specular highlight strength per texel in the red channel, and the sharpness
	     * in the green channel. You can use SpecularBitmapTexture if you want to easily set specular and gloss maps
	     * from grayscale images, but prepared images are preferred.
	     */
	    texture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    copyFrom(method: ShadingMethodBase): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerProbe(shaderObject: ShaderLightingObject, methodVO: MethodVO, cubeMapReg: ShaderRegisterElement, weightRegister: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Updates the specular color data used by the render state.
	     */
	    private updateSpecular();
	}
	export = SpecularBasicMethod;
	
}
declare module "awayjs-methodmaterials/lib/passes/MaterialPassMode" {
	class MaterialPassMode {
	    static EFFECTS: number;
	    /**
	     *
	     */
	    static LIGHTING: number;
	    /**
	     *
	     */
	    static SUPER_SHADER: number;
	}
	export = MaterialPassMode;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectColorTransformMethod provides a shading method that changes the colour of a material analogous to a
	 * ColorTransform object.
	 */
	class EffectColorTransformMethod extends EffectMethodBase {
	    private _colorTransform;
	    /**
	     * Creates a new EffectColorTransformMethod.
	     */
	    constructor();
	    /**
	     * The ColorTransform object to transform the colour of the material with.
	     */
	    colorTransform: ColorTransform;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	}
	export = EffectColorTransformMethod;
	
}
declare module "awayjs-methodmaterials/lib/passes/TriangleMethodPass" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import LightingPassGLBase = require("awayjs-renderergl/lib/passes/LightingPassGLBase");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import AmbientBasicMethod = require("awayjs-methodmaterials/lib/methods/AmbientBasicMethod");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	import EffectColorTransformMethod = require("awayjs-methodmaterials/lib/methods/EffectColorTransformMethod");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	import NormalBasicMethod = require("awayjs-methodmaterials/lib/methods/NormalBasicMethod");
	import ShadowMapMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMapMethodBase");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	/**
	 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
	 * using material methods to define their appearance.
	 */
	class TriangleMethodPass extends LightingPassGLBase {
	    _pNumLights: number;
	    private _passMode;
	    private _includeCasters;
	    private _maxLights;
	    _iColorTransformMethodVO: MethodVO;
	    _iNormalMethodVO: MethodVO;
	    _iAmbientMethodVO: MethodVO;
	    _iShadowMethodVO: MethodVO;
	    _iDiffuseMethodVO: MethodVO;
	    _iSpecularMethodVO: MethodVO;
	    _iMethodVOs: MethodVO[];
	    _numEffectDependencies: number;
	    private _onShaderInvalidatedDelegate;
	    /**
	     *
	     */
	    passMode: number;
	    /**
	     * Indicates whether or not shadow casting lights need to be included.
	     */
	    includeCasters: boolean;
	    /**
	     * Creates a new CompiledPass object.
	     *
	     * @param material The material to which this pass belongs.
	     */
	    constructor(passMode?: number);
	    /**
	     * Factory method to create a concrete shader object for this pass.
	     *
	     * @param profile The compatibility profile used by the renderer.
	     */
	    createShaderObject(profile: string): ShaderObjectBase;
	    /**
	     * Initializes the unchanging constant data for this material.
	     */
	    _iInitConstantData(shaderObject: ShaderObjectBase): void;
	    /**
	     * The ColorTransform object to transform the colour of the material with. Defaults to null.
	     */
	    colorTransform: ColorTransform;
	    /**
	     * The EffectColorTransformMethod object to transform the colour of the material with. Defaults to null.
	     */
	    colorTransformMethod: EffectColorTransformMethod;
	    /**
	     * Implemented by subclasses if the pass uses lights to update the shader.
	     */
	    pUpdateLights(): void;
	    private _removeDependency(methodVO, effectsDependency?);
	    private _addDependency(methodVO, effectsDependency?, index?);
	    /**
	     * Appends an "effect" shading method to the shader. Effect methods are those that do not influence the lighting
	     * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the
	     * methods added prior.
	     */
	    addEffectMethod(method: EffectMethodBase): void;
	    /**
	     * The number of "effect" methods added to the material.
	     */
	    numEffectMethods: number;
	    /**
	     * Queries whether a given effects method was added to the material.
	     *
	     * @param method The method to be queried.
	     * @return true if the method was added to the material, false otherwise.
	     */
	    hasEffectMethod(method: EffectMethodBase): boolean;
	    /**
	     * Returns the method added at the given index.
	     * @param index The index of the method to retrieve.
	     * @return The method at the given index.
	     */
	    getEffectMethodAt(index: number): EffectMethodBase;
	    /**
	     * Adds an effect method at the specified index amongst the methods already added to the material. Effect
	     * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,
	     * etc. The method will be applied to the result of the methods with a lower index.
	     */
	    addEffectMethodAt(method: EffectMethodBase, index: number): void;
	    /**
	     * Removes an effect method from the material.
	     * @param method The method to be removed.
	     */
	    removeEffectMethod(method: EffectMethodBase): void;
	    private getDependencyForMethod(method);
	    /**
	     * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.
	     */
	    normalMethod: NormalBasicMethod;
	    /**
	     * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.
	     */
	    ambientMethod: AmbientBasicMethod;
	    /**
	     * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.
	     */
	    shadowMethod: ShadowMapMethodBase;
	    /**
	     * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.
	     */
	    diffuseMethod: DiffuseBasicMethod;
	    /**
	     * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.
	     */
	    specularMethod: SpecularBasicMethod;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * Called when any method's shader code is invalidated.
	     */
	    private onShaderInvalidated(event);
	    /**
	     * @inheritDoc
	     */
	    _iActivate(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	    /**
	     *
	     *
	     * @param renderable
	     * @param stage
	     * @param camera
	     */
	    setRenderState(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     * @inheritDoc
	     */
	    _iDeactivate(pass: MaterialPassData, renderer: RendererBase): void;
	    _iIncludeDependencies(shaderObject: ShaderLightingObject): void;
	    /**
	     * Counts the dependencies for a given method.
	     * @param method The method to count the dependencies for.
	     * @param methodVO The method's data for this material.
	     */
	    private setupAndCountDependencies(shaderObject, methodVO);
	    _iGetPreLightingVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPreLightingFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerLightDiffuseFragmentCode(shaderObject: ShaderLightingObject, lightDirReg: ShaderRegisterElement, diffuseColorReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerLightSpecularFragmentCode(shaderObject: ShaderLightingObject, lightDirReg: ShaderRegisterElement, specularColorReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerProbeDiffuseFragmentCode(shaderObject: ShaderLightingObject, texReg: ShaderRegisterElement, weightReg: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerProbeSpecularFragmentCode(shaderObject: ShaderLightingObject, texReg: ShaderRegisterElement, weightReg: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPostLightingVertexCode(shaderObject: ShaderLightingObject, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPostLightingFragmentCode(shaderObject: ShaderLightingObject, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Indicates whether or not normals are allowed in tangent space. This is only the case if no object-space
	     * dependencies exist.
	     */
	    _pUsesTangentSpace(shaderObject: ShaderLightingObject): boolean;
	    /**
	     * Indicates whether or not normals are output in tangent space.
	     */
	    _pOutputsTangentNormals(shaderObject: ShaderObjectBase): boolean;
	    /**
	     * Indicates whether or not normals are output by the pass.
	     */
	    _pOutputsNormals(shaderObject: ShaderObjectBase): boolean;
	    _iGetNormalVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetNormalFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iGetVertexCode(shaderObject: ShaderObjectBase, regCache: ShaderRegisterCache, sharedReg: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, regCache: ShaderRegisterCache, sharedReg: ShaderRegisterData): string;
	    /**
	     * Indicates whether the shader uses any shadows.
	     */
	    _iUsesShadows(): boolean;
	    /**
	     * Indicates whether the shader uses any specular component.
	     */
	    _iUsesSpecular(): boolean;
	    /**
	     * Calculates the amount of directional lights this material will support.
	     * @param numDirectionalLights The maximum amount of directional lights to support.
	     * @return The amount of directional lights this material will support, bounded by the amount necessary.
	     */
	    private calculateNumDirectionalLights(numDirectionalLights);
	    /**
	     * Calculates the amount of point lights this material will support.
	     * @param numDirectionalLights The maximum amount of point lights to support.
	     * @return The amount of point lights this material will support, bounded by the amount necessary.
	     */
	    private calculateNumPointLights(numPointLights);
	    /**
	     * Calculates the amount of light probes this material will support.
	     * @param numDirectionalLights The maximum amount of light probes to support.
	     * @return The amount of light probes this material will support, bounded by the amount necessary.
	     */
	    private calculateNumProbes(numLightProbes);
	}
	export = TriangleMethodPass;
	
}
declare module "awayjs-methodmaterials/lib/TriangleMethodMaterial" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import TriangleMaterialBase = require("awayjs-renderergl/lib/materials/TriangleMaterialBase");
	import AmbientBasicMethod = require("awayjs-methodmaterials/lib/methods/AmbientBasicMethod");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	import NormalBasicMethod = require("awayjs-methodmaterials/lib/methods/NormalBasicMethod");
	import ShadowMapMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMapMethodBase");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	/**
	 * TriangleMethodMaterial forms an abstract base class for the default shaded materials provided by Stage,
	 * using material methods to define their appearance.
	 */
	class TriangleMethodMaterial extends TriangleMaterialBase {
	    private _alphaBlending;
	    private _alpha;
	    private _colorTransform;
	    private _materialMode;
	    private _casterLightPass;
	    private _nonCasterLightPasses;
	    private _screenPass;
	    private _ambientMethod;
	    private _shadowMethod;
	    private _diffuseMethod;
	    private _normalMethod;
	    private _specularMethod;
	    private _depthCompareMode;
	    /**
	     * Creates a new TriangleMethodMaterial object.
	     *
	     * @param texture The texture used for the material's albedo color.
	     * @param smooth Indicates whether the texture should be filtered when sampled. Defaults to true.
	     * @param repeat Indicates whether the texture should be tiled when sampled. Defaults to false.
	     * @param mipmap Indicates whether or not any used textures should use mipmapping. Defaults to false.
	     */
	    constructor(texture?: Texture2DBase, smooth?: boolean, repeat?: boolean, mipmap?: boolean);
	    constructor(color?: number, alpha?: number);
	    materialMode: string;
	    /**
	     * The depth compare mode used to render the renderables using this material.
	     *
	     * @see away.stagegl.ContextGLCompareMode
	     */
	    depthCompareMode: string;
	    /**
	     * The alpha of the surface.
	     */
	    alpha: number;
	    /**
	     * The ColorTransform object to transform the colour of the material with. Defaults to null.
	     */
	    colorTransform: ColorTransform;
	    /**
	     * The texture object to use for the ambient colour.
	     */
	    diffuseTexture: Texture2DBase;
	    /**
	     * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.
	     */
	    ambientMethod: AmbientBasicMethod;
	    /**
	     * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.
	     */
	    shadowMethod: ShadowMapMethodBase;
	    /**
	     * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.
	     */
	    diffuseMethod: DiffuseBasicMethod;
	    /**
	     * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.
	     */
	    specularMethod: SpecularBasicMethod;
	    /**
	     * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.
	     */
	    normalMethod: NormalBasicMethod;
	    /**
	     * Appends an "effect" shading method to the shader. Effect methods are those that do not influence the lighting
	     * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the
	     * methods added prior.
	     */
	    addEffectMethod(method: EffectMethodBase): void;
	    /**
	     * The number of "effect" methods added to the material.
	     */
	    numEffectMethods: number;
	    /**
	     * Queries whether a given effect method was added to the material.
	     *
	     * @param method The method to be queried.
	     * @return true if the method was added to the material, false otherwise.
	     */
	    hasEffectMethod(method: EffectMethodBase): boolean;
	    /**
	     * Returns the method added at the given index.
	     * @param index The index of the method to retrieve.
	     * @return The method at the given index.
	     */
	    getEffectMethodAt(index: number): EffectMethodBase;
	    /**
	     * Adds an effect method at the specified index amongst the methods already added to the material. Effect
	     * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,
	     * etc. The method will be applied to the result of the methods with a lower index.
	     */
	    addEffectMethodAt(method: EffectMethodBase, index: number): void;
	    /**
	     * Removes an effect method from the material.
	     * @param method The method to be removed.
	     */
	    removeEffectMethod(method: EffectMethodBase): void;
	    /**
	     * The normal map to modulate the direction of the surface for each texel. The default normal method expects
	     * tangent-space normal maps, but others could expect object-space maps.
	     */
	    normalMap: Texture2DBase;
	    /**
	     * A specular map that defines the strength of specular reflections for each texel in the red channel,
	     * and the gloss factor in the green channel. You can use SpecularBitmapTexture if you want to easily set
	     * specular and gloss maps from grayscale images, but correctly authored images are preferred.
	     */
	    specularMap: Texture2DBase;
	    /**
	     * The glossiness of the material (sharpness of the specular highlight).
	     */
	    gloss: number;
	    /**
	     * The strength of the ambient reflection.
	     */
	    ambient: number;
	    /**
	     * The overall strength of the specular reflection.
	     */
	    specular: number;
	    /**
	     * The colour of the ambient reflection.
	     */
	    ambientColor: number;
	    /**
	     * The colour of the diffuse reflection.
	     */
	    diffuseColor: number;
	    /**
	     * The colour of the specular reflection.
	     */
	    specularColor: number;
	    /**
	     * Indicates whether or not the material has transparency. If binary transparency is sufficient, for
	     * example when using textures of foliage, consider using alphaThreshold instead.
	     */
	    alphaBlending: boolean;
	    /**
	     * @inheritDoc
	     */
	    _iUpdateMaterial(): void;
	    /**
	     * Initializes all the passes and their dependent passes.
	     */
	    private initPasses();
	    /**
	     * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.
	     */
	    private setBlendAndCompareModes();
	    private initCasterLightPass();
	    private removeCasterLightPass();
	    private initNonCasterLightPasses();
	    private removeNonCasterLightPasses();
	    private removeEffectPass();
	    private initEffectPass();
	    /**
	     * The maximum total number of lights provided by the light picker.
	     */
	    private numLights;
	    /**
	     * The amount of lights that don't cast shadows.
	     */
	    private numNonCasters;
	}
	export = TriangleMethodMaterial;
	
}
declare module "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod" {
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import AmbientBasicMethod = require("awayjs-methodmaterials/lib/methods/AmbientBasicMethod");
	/**
	 * AmbientEnvMapMethod provides a diffuse shading method that uses a diffuse irradiance environment map to
	 * approximate global lighting rather than lights.
	 */
	class AmbientEnvMapMethod extends AmbientBasicMethod {
	    private _cubeTexture;
	    /**
	     * Creates a new <code>AmbientEnvMapMethod</code> object.
	     *
	     * @param envMap The cube environment map to use for the ambient lighting.
	     */
	    constructor(envMap: CubeTextureBase);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The cube environment map to use for the diffuse lighting.
	     */
	    envMap: CubeTextureBase;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = AmbientEnvMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	/**
	 * DiffuseCompositeMethod provides a base class for diffuse methods that wrap a diffuse method to alter the
	 * calculated diffuse reflection strength.
	 */
	class DiffuseCompositeMethod extends DiffuseBasicMethod {
	    pBaseMethod: DiffuseBasicMethod;
	    private _onShaderInvalidatedDelegate;
	    /**
	     * Creates a new <code>DiffuseCompositeMethod</code> object.
	     *
	     * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature clampDiffuse(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the diffuse strength.
	     * @param baseMethod The base diffuse method on which this method's shading is based.
	     */
	    constructor(modulateMethod: (shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData) => string, baseMethod?: DiffuseBasicMethod);
	    /**
	     * The base diffuse method on which this method's shading is based.
	     */
	    baseMethod: DiffuseBasicMethod;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    /**
	     * @inheritDoc
	     */
	    texture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    /**
	     * @inheritDoc
	     */
	    diffuseColor: number;
	    /**
	     * @inheritDoc
	     */
	    /**
	     * @inheritDoc
	     */
	    ambientColor: number;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerProbe(shaderObject: ShaderLightingObject, methodVO: MethodVO, cubeMapReg: ShaderRegisterElement, weightRegister: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderLightingObject, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * @inheritDoc
	     */
	    iDeactivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iReset(): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * Called when the base method's shader code is invalidated.
	     */
	    private onShaderInvalidated(event);
	}
	export = DiffuseCompositeMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseCelMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	import DiffuseCompositeMethod = require("awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod");
	/**
	 * DiffuseCelMethod provides a shading method to add diffuse cel (cartoon) shading.
	 */
	class DiffuseCelMethod extends DiffuseCompositeMethod {
	    private _levels;
	    private _dataReg;
	    private _smoothness;
	    /**
	     * Creates a new DiffuseCelMethod object.
	     * @param levels The amount of shadow gradations.
	     * @param baseMethod An optional diffuse method on which the cartoon shading is based. If omitted, DiffuseBasicMethod is used.
	     */
	    constructor(levels?: number, baseMethod?: DiffuseBasicMethod);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * The amount of shadow gradations.
	     */
	    levels: number;
	    /**
	     * The smoothness of the edge between 2 shading levels.
	     */
	    smoothness: number;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Snaps the diffuse shading of the wrapped method to one of the levels.
	     * @param vo The MethodVO used to compile the current shader.
	     * @param t The register containing the diffuse strength in the "w" component.
	     * @param regCache The register cache used for the shader compilation.
	     * @param sharedRegisters The shared register data for this shader.
	     * @return The AGAL fragment code for the method.
	     */
	    private clampDiffuse(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);
	}
	export = DiffuseCelMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod" {
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	/**
	 * DiffuseDepthMethod provides a debug method to visualise depth maps
	 */
	class DiffuseDepthMethod extends DiffuseBasicMethod {
	    /**
	     * Creates a new DiffuseBasicMethod object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = DiffuseDepthMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	/**
	 * DiffuseGradientMethod is an alternative to DiffuseBasicMethod in which the shading can be modulated with a gradient
	 * to introduce color-tinted shading as opposed to the single-channel diffuse strength. This can be used as a crude
	 * approximation to subsurface scattering (for instance, the mid-range shading for skin can be tinted red to similate
	 * scattered light within the skin attributing to the final colour)
	 */
	class DiffuseGradientMethod extends DiffuseBasicMethod {
	    private _gradientTextureRegister;
	    private _gradient;
	    /**
	     * Creates a new DiffuseGradientMethod object.
	     * @param gradient A texture that contains the light colour based on the angle. This can be used to change
	     * the light colour due to subsurface scattering when the surface faces away from the light.
	     */
	    constructor(gradient: Texture2DBase);
	    /**
	     * A texture that contains the light colour based on the angle. This can be used to change the light colour
	     * due to subsurface scattering when the surface faces away from the light.
	     */
	    gradient: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    pApplyShadow(shaderObject: ShaderLightingObject, methodVO: MethodVO, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	}
	export = DiffuseGradientMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	import DiffuseCompositeMethod = require("awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod");
	/**
	 * DiffuseLightMapMethod provides a diffuse shading method that uses a light map to modulate the calculated diffuse
	 * lighting. It is different from EffectLightMapMethod in that the latter modulates the entire calculated pixel color, rather
	 * than only the diffuse lighting value.
	 */
	class DiffuseLightMapMethod extends DiffuseCompositeMethod {
	    /**
	     * Indicates the light map should be multiplied with the calculated shading result.
	     * This can be used to add pre-calculated shadows or occlusion.
	     */
	    static MULTIPLY: string;
	    /**
	     * Indicates the light map should be added into the calculated shading result.
	     * This can be used to add pre-calculated lighting or global illumination.
	     */
	    static ADD: string;
	    private _lightMapTexture;
	    private _blendMode;
	    private _useSecondaryUV;
	    /**
	     * Creates a new DiffuseLightMapMethod method.
	     *
	     * @param lightMap The texture containing the light map.
	     * @param blendMode The blend mode with which the light map should be applied to the lighting result.
	     * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.
	     * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.
	     */
	    constructor(lightMap: Texture2DBase, blendMode?: string, useSecondaryUV?: boolean, baseMethod?: DiffuseBasicMethod);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * The blend mode with which the light map should be applied to the lighting result.
	     *
	     * @see DiffuseLightMapMethod.ADD
	     * @see DiffuseLightMapMethod.MULTIPLY
	     */
	    blendMode: string;
	    /**
	     * The texture containing the light map data.
	     */
	    lightMapTexture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = DiffuseLightMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/passes/SingleObjectDepthPass" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * The SingleObjectDepthPass provides a material pass that renders a single object to a depth map from the point
	 * of view from a light.
	 */
	class SingleObjectDepthPass extends MaterialPassGLBase {
	    private _textures;
	    private _projections;
	    private _textureSize;
	    private _polyOffset;
	    private _enc;
	    private _projectionTexturesInvalid;
	    /**
	     * The size of the depth map texture to render to.
	     */
	    textureSize: number;
	    /**
	     * The amount by which the rendered object will be inflated, to prevent depth map rounding errors.
	     */
	    polyOffset: number;
	    /**
	     * Creates a new SingleObjectDepthPass object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * Updates the projection textures used to contain the depth renders.
	     */
	    private updateProjectionTextures();
	    /**
	     * @inheritDoc
	     */
	    _iGetVertexCode(): string;
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Gets the depth maps rendered for this object from all lights.
	     * @param renderable The renderable for which to retrieve the depth maps.
	     * @param stage3DProxy The Stage3DProxy object currently used for rendering.
	     * @return A list of depth map textures for all supported lights.
	     */
	    _iGetDepthMap(renderable: RenderableBase): RenderTexture;
	    /**
	     * Retrieves the depth map projection maps for all lights.
	     * @param renderable The renderable for which to retrieve the projection maps.
	     * @return A list of projection maps for all supported lights.
	     */
	    _iGetProjection(renderable: RenderableBase): Matrix3D;
	    /**
	     * @inheritDoc
	     */
	    _iRender(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     * @inheritDoc
	     */
	    _iActivate(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	}
	export = SingleObjectDepthPass;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseSubSurfaceMethod" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	import DiffuseCompositeMethod = require("awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod");
	/**
	 * DiffuseSubSurfaceMethod provides a depth map-based diffuse shading method that mimics the scattering of
	 * light inside translucent surfaces. It allows light to shine through an object and to soften the diffuse shading.
	 * It can be used for candle wax, ice, skin, ...
	 */
	class DiffuseSubSurfaceMethod extends DiffuseCompositeMethod {
	    private _depthPass;
	    private _lightProjVarying;
	    private _propReg;
	    private _scattering;
	    private _translucency;
	    private _lightColorReg;
	    private _scatterColor;
	    private _colorReg;
	    private _decReg;
	    private _scatterR;
	    private _scatterG;
	    private _scatterB;
	    private _targetReg;
	    /**
	     * Creates a new <code>DiffuseSubSurfaceMethod</code> object.
	     *
	     * @param depthMapSize The size of the depth map used.
	     * @param depthMapOffset The amount by which the rendered object will be inflated, to prevent depth map rounding errors.
	     * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.
	     */
	    constructor(depthMapSize?: number, depthMapOffset?: number, baseMethod?: DiffuseBasicMethod);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    iCleanCompilationData(): void;
	    /**
	     * The amount by which the light scatters. It can be used to set the translucent surface's thickness. Use low
	     * values for skin.
	     */
	    scattering: number;
	    /**
	     * The translucency of the object.
	     */
	    translucency: number;
	    /**
	     * The colour of the "insides" of the object, ie: the colour the light becomes after leaving the object.
	     */
	    scatterColor: number;
	    /**
	     * @inheritDoc
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderObjectBase, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * Generates the code for this method
	     */
	    private scatterLight(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);
	}
	export = DiffuseSubSurfaceMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
	/**
	 * DiffuseWrapMethod is an alternative to DiffuseBasicMethod in which the light is allowed to be "wrapped around" the normally dark area, to some extent.
	 * It can be used as a crude approximation to Oren-Nayar or simple subsurface scattering.
	 */
	class DiffuseWrapMethod extends DiffuseBasicMethod {
	    private _wrapDataRegister;
	    private _wrapFactor;
	    /**
	     * Creates a new DiffuseWrapMethod object.
	     * @param wrapFactor A factor to indicate the amount by which the light is allowed to wrap
	     */
	    constructor(wrapFactor?: number);
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * A factor to indicate the amount by which the light is allowed to wrap.
	     */
	    wrapFactor: number;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	}
	export = DiffuseWrapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectAlphaMaskMethod allows the use of an additional texture to specify the alpha value of the material. When used
	 * with the secondary uv set, it allows for a tiled main texture with independently varying alpha (useful for water
	 * etc).
	 */
	class EffectAlphaMaskMethod extends EffectMethodBase {
	    private _texture;
	    private _useSecondaryUV;
	    /**
	     * Creates a new EffectAlphaMaskMethod object.
	     *
	     * @param texture The texture to use as the alpha mask.
	     * @param useSecondaryUV Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently.
	     */
	    constructor(texture: Texture2DBase, useSecondaryUV?: boolean);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently, for
	     * instance to tile the main texture and normal map while providing untiled alpha, for example to define the
	     * transparency over a tiled water surface.
	     */
	    useSecondaryUV: boolean;
	    /**
	     * The texture to use as the alpha mask.
	     */
	    texture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectAlphaMaskMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectColorMatrixMethod provides a shading method that changes the colour of a material analogous to a ColorMatrixFilter.
	 */
	class EffectColorMatrixMethod extends EffectMethodBase {
	    private _matrix;
	    /**
	     * Creates a new EffectColorTransformMethod.
	     *
	     * @param matrix An array of 20 items for 4 x 5 color transform.
	     */
	    constructor(matrix: number[]);
	    /**
	     * The 4 x 5 matrix to transform the color of the material.
	     */
	    colorMatrix: number[];
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	}
	export = EffectColorMatrixMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod" {
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectEnvMapMethod provides a material method to perform reflection mapping using cube maps.
	 */
	class EffectEnvMapMethod extends EffectMethodBase {
	    private _cubeTexture;
	    private _alpha;
	    private _mask;
	    /**
	     * Creates an EffectEnvMapMethod object.
	     * @param envMap The environment map containing the reflected scene.
	     * @param alpha The reflectivity of the surface.
	     */
	    constructor(envMap: CubeTextureBase, alpha?: number);
	    /**
	     * An optional texture to modulate the reflectivity of the surface.
	     */
	    mask: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The cubic environment map containing the reflected scene.
	     */
	    envMap: CubeTextureBase;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * The reflectivity of the surface.
	     */
	    alpha: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectEnvMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectFogMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectFogMethod provides a method to add distance-based fog to a material.
	 */
	class EffectFogMethod extends EffectMethodBase {
	    private _minDistance;
	    private _maxDistance;
	    private _fogColor;
	    private _fogR;
	    private _fogG;
	    private _fogB;
	    /**
	     * Creates a new EffectFogMethod object.
	     * @param minDistance The distance from which the fog starts appearing.
	     * @param maxDistance The distance at which the fog is densest.
	     * @param fogColor The colour of the fog.
	     */
	    constructor(minDistance: number, maxDistance: number, fogColor?: number);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The distance from which the fog starts appearing.
	     */
	    minDistance: number;
	    /**
	     * The distance at which the fog is densest.
	     */
	    maxDistance: number;
	    /**
	     * The colour of the fog.
	     */
	    fogColor: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectFogMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod" {
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectFresnelEnvMapMethod provides a method to add fresnel-based reflectivity to an object using cube maps, which gets
	 * stronger as the viewing angle becomes more grazing.
	 */
	class EffectFresnelEnvMapMethod extends EffectMethodBase {
	    private _cubeTexture;
	    private _fresnelPower;
	    private _normalReflectance;
	    private _alpha;
	    private _mask;
	    /**
	     * Creates a new <code>EffectFresnelEnvMapMethod</code> object.
	     *
	     * @param envMap The environment map containing the reflected scene.
	     * @param alpha The reflectivity of the material.
	     */
	    constructor(envMap: CubeTextureBase, alpha?: number);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * An optional texture to modulate the reflectivity of the surface.
	     */
	    mask: Texture2DBase;
	    /**
	     * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.
	     */
	    fresnelPower: number;
	    /**
	     * The cubic environment map containing the reflected scene.
	     */
	    envMap: CubeTextureBase;
	    /**
	     * The reflectivity of the surface.
	     */
	    alpha: number;
	    /**
	     * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.
	     */
	    normalReflectance: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectFresnelEnvMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectLightMapMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectLightMapMethod provides a method that allows applying a light map texture to the calculated pixel colour.
	 * It is different from DiffuseLightMapMethod in that the latter only modulates the diffuse shading value rather
	 * than the whole pixel colour.
	 */
	class EffectLightMapMethod extends EffectMethodBase {
	    /**
	     * Indicates the light map should be multiplied with the calculated shading result.
	     */
	    static MULTIPLY: string;
	    /**
	     * Indicates the light map should be added into the calculated shading result.
	     */
	    static ADD: string;
	    private _texture;
	    private _blendMode;
	    private _useSecondaryUV;
	    /**
	     * Creates a new EffectLightMapMethod object.
	     *
	     * @param texture The texture containing the light map.
	     * @param blendMode The blend mode with which the light map should be applied to the lighting result.
	     * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.
	     */
	    constructor(texture: Texture2DBase, blendMode?: string, useSecondaryUV?: boolean);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The blend mode with which the light map should be applied to the lighting result.
	     *
	     * @see EffectLightMapMethod.ADD
	     * @see EffectLightMapMethod.MULTIPLY
	     */
	    blendMode: string;
	    /**
	     * The texture containing the light map.
	     */
	    texture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectLightMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectRefractionEnvMapMethod" {
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectRefractionEnvMapMethod provides a method to add refracted transparency based on cube maps.
	 */
	class EffectRefractionEnvMapMethod extends EffectMethodBase {
	    private _envMap;
	    private _dispersionR;
	    private _dispersionG;
	    private _dispersionB;
	    private _useDispersion;
	    private _refractionIndex;
	    private _alpha;
	    /**
	     * Creates a new EffectRefractionEnvMapMethod object. Example values for dispersion are: dispersionR: -0.03, dispersionG: -0.01, dispersionB: = .0015
	     *
	     * @param envMap The environment map containing the refracted scene.
	     * @param refractionIndex The refractive index of the material.
	     * @param dispersionR The amount of chromatic dispersion of the red channel. Defaults to 0 (none).
	     * @param dispersionG The amount of chromatic dispersion of the green channel. Defaults to 0 (none).
	     * @param dispersionB The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).
	     */
	    constructor(envMap: CubeTextureBase, refractionIndex?: number, dispersionR?: number, dispersionG?: number, dispersionB?: number);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The cube environment map to use for the refraction.
	     */
	    envMap: CubeTextureBase;
	    /**
	     * The refractive index of the material.
	     */
	    refractionIndex: number;
	    /**
	     * The amount of chromatic dispersion of the red channel. Defaults to 0 (none).
	     */
	    dispersionR: number;
	    /**
	     * The amount of chromatic dispersion of the green channel. Defaults to 0 (none).
	     */
	    dispersionG: number;
	    /**
	     * The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).
	     */
	    dispersionB: number;
	    /**
	     * The amount of transparency of the object. Warning: the alpha applies to the refracted color, not the actual
	     * material. A value of 1 will make it appear fully transparent.
	     */
	    alpha: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectRefractionEnvMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/EffectRimLightMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import EffectMethodBase = require("awayjs-methodmaterials/lib/methods/EffectMethodBase");
	/**
	 * EffectRimLightMethod provides a method to add rim lighting to a material. This adds a glow-like effect to edges of objects.
	 */
	class EffectRimLightMethod extends EffectMethodBase {
	    static ADD: string;
	    static MULTIPLY: string;
	    static MIX: string;
	    private _color;
	    private _blendMode;
	    private _colorR;
	    private _colorG;
	    private _colorB;
	    private _strength;
	    private _power;
	    /**
	     * Creates a new <code>EffectRimLightMethod</code> object.
	     *
	     * @param color The colour of the rim light.
	     * @param strength The strength of the rim light.
	     * @param power The power of the rim light. Higher values will result in a higher edge fall-off.
	     * @param blend The blend mode with which to add the light to the object.
	     */
	    constructor(color?: number, strength?: number, power?: number, blend?: string);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The blend mode with which to add the light to the object.
	     *
	     * EffectRimLightMethod.MULTIPLY multiplies the rim light with the material's colour.
	     * EffectRimLightMethod.ADD adds the rim light with the material's colour.
	     * EffectRimLightMethod.MIX provides normal alpha blending.
	     */
	    blendMode: string;
	    /**
	     * The color of the rim light.
	     */
	    color: number;
	    /**
	     * The strength of the rim light.
	     */
	    strength: number;
	    /**
	     * The power of the rim light. Higher values will result in a higher edge fall-off.
	     */
	    power: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = EffectRimLightMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/NormalHeightMapMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import NormalBasicMethod = require("awayjs-methodmaterials/lib/methods/NormalBasicMethod");
	import ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
	/**
	 * NormalHeightMapMethod provides a normal map method that uses a height map to calculate the normals.
	 */
	class NormalHeightMapMethod extends NormalBasicMethod {
	    private _worldXYRatio;
	    private _worldXZRatio;
	    /**
	     * Creates a new NormalHeightMapMethod method.
	     *
	     * @param heightMap The texture containing the height data. 0 means low, 1 means high.
	     * @param worldWidth The width of the 'world'. This is used to map uv coordinates' u component to scene dimensions.
	     * @param worldHeight The height of the 'world'. This is used to map the height map values to scene dimensions.
	     * @param worldDepth The depth of the 'world'. This is used to map uv coordinates' v component to scene dimensions.
	     */
	    constructor(heightMap: Texture2DBase, worldWidth: number, worldHeight: number, worldDepth: number);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    tangentSpace: boolean;
	    /**
	     * @inheritDoc
	     */
	    copyFrom(method: ShadingMethodBase): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = NormalHeightMapMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import NormalBasicMethod = require("awayjs-methodmaterials/lib/methods/NormalBasicMethod");
	/**
	 * NormalSimpleWaterMethod provides a basic normal map method to create water ripples by translating two wave normal maps.
	 */
	class NormalSimpleWaterMethod extends NormalBasicMethod {
	    private _texture2;
	    private _normalTextureRegister2;
	    private _useSecondNormalMap;
	    private _water1OffsetX;
	    private _water1OffsetY;
	    private _water2OffsetX;
	    private _water2OffsetY;
	    /**
	     * Creates a new NormalSimpleWaterMethod object.
	     * @param waveMap1 A normal map containing one layer of a wave structure.
	     * @param waveMap2 A normal map containing a second layer of a wave structure.
	     */
	    constructor(waveMap1: Texture2DBase, waveMap2: Texture2DBase);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The translation of the first wave layer along the X-axis.
	     */
	    water1OffsetX: number;
	    /**
	     * The translation of the first wave layer along the Y-axis.
	     */
	    water1OffsetY: number;
	    /**
	     * The translation of the second wave layer along the X-axis.
	     */
	    water2OffsetX: number;
	    /**
	     * The translation of the second wave layer along the Y-axis.
	     */
	    water2OffsetY: number;
	    /**
	     * A second normal map that will be combined with the first to create a wave-like animation pattern.
	     */
	    secondaryNormalMap: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = NormalSimpleWaterMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowMethodBase" {
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMapMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMapMethodBase");
	/**
	 * ShadowMethodBase provides an abstract method for simple (non-wrapping) shadow map methods.
	 */
	class ShadowMethodBase extends ShadowMapMethodBase {
	    _pDepthMapCoordReg: ShaderRegisterElement;
	    _pUsePoint: boolean;
	    /**
	     * Creates a new ShadowMethodBase object.
	     * @param castingLight The light used to cast shadows.
	     */
	    constructor(castingLight: LightBase);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * Wrappers that override the vertex shader need to set this explicitly
	     */
	    _iDepthMapCoordReg: ShaderRegisterElement;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Gets the vertex code for shadow mapping with a point light.
	     *
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     * @param regCache The register cache used during the compilation.
	     */
	    _pGetPointVertexCode(methodVO: MethodVO, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Gets the vertex code for shadow mapping with a planar shadow map (fe: directional lights).
	     *
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     * @param regCache The register cache used during the compilation.
	     */
	    pGetPlanarVertexCode(methodVO: MethodVO, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Gets the fragment code for shadow mapping with a planar shadow map.
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     * @param regCache The register cache used during the compilation.
	     * @param targetReg The register to contain the shadow coverage
	     * @return
	     */
	    _pGetPlanarFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Gets the fragment code for shadow mapping with a point light.
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     * @param regCache The register cache used during the compilation.
	     * @param targetReg The register to contain the shadow coverage
	     * @return
	     */
	    _pGetPointFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderObjectBase, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * Gets the fragment code for combining this method with a cascaded shadow map method.
	     * @param methodVO The MethodVO object linking this method with the pass currently being compiled.
	     * @param regCache The register cache used during the compilation.
	     * @param decodeRegister The register containing the data to decode the shadow map depth value.
	     * @param depthTexture The texture containing the shadow map.
	     * @param depthProjection The projection of the fragment relative to the light.
	     * @param targetRegister The register to contain the shadow coverage
	     * @return
	     */
	    _iGetCascadeFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, decodeRegister: ShaderRegisterElement, depthTexture: ShaderRegisterElement, depthProjection: ShaderRegisterElement, targetRegister: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * Sets the method state for cascade shadow mapping.
	     */
	    iActivateForCascade(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	}
	export = ShadowMethodBase;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowCascadeMethod" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMapMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMapMethodBase");
	import ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
	/**
	 * ShadowCascadeMethod is a shadow map method to apply cascade shadow mapping on materials.
	 * Must be used with a DirectionalLight with a CascadeShadowMapper assigned to its shadowMapper property.
	 *
	 * @see away.lights.CascadeShadowMapper
	 */
	class ShadowCascadeMethod extends ShadowMapMethodBase {
	    private _baseMethod;
	    private _cascadeShadowMapper;
	    private _depthMapCoordVaryings;
	    private _cascadeProjections;
	    /**
	     * Creates a new ShadowCascadeMethod object.
	     *
	     * @param shadowMethodBase The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)
	     */
	    constructor(shadowMethodBase: ShadowMethodBase);
	    /**
	     * The shadow map sampling method used to sample individual cascades. These are typically those used in conjunction
	     * with a DirectionalShadowMapper.
	     *
	     * @see ShadowHardMethod
	     * @see ShadowSoftMethod
	     */
	    baseMethod: ShadowMethodBase;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * @inheritDoc
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Creates the registers for the cascades' projection coordinates.
	     */
	    private initProjectionsRegs(registerCache);
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderObjectBase, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * Called when the shadow mappers cascade configuration changes.
	     */
	    private onCascadeChange(event);
	    /**
	     * Called when the base method's shader code is invalidated.
	     */
	    private onShaderInvalidated(event);
	}
	export = ShadowCascadeMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod" {
	import DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
	/**
	 * ShadowDitheredMethod provides a soft shadowing technique by randomly distributing sample points differently for each fragment.
	 */
	class ShadowDitheredMethod extends ShadowMethodBase {
	    private static _grainTexture;
	    private static _grainUsages;
	    private static _grainBitmapData;
	    private _depthMapSize;
	    private _range;
	    private _numSamples;
	    /**
	     * Creates a new ShadowDitheredMethod object.
	     * @param castingLight The light casting the shadows
	     * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 24.
	     */
	    constructor(castingLight: DirectionalLight, numSamples?: number, range?: number);
	    /**
	     * The amount of samples to take for dithering. Minimum 1, maximum 24. The actual maximum may depend on the
	     * complexity of the shader.
	     */
	    numSamples: number;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The range in the shadow map in which to distribute the samples.
	     */
	    range: number;
	    /**
	     * Creates a texture containing the dithering noise texture.
	     */
	    private initGrainTexture();
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    _pGetPlanarFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Get the actual shader code for shadow mapping
	     * @param regCache The register cache managing the registers.
	     * @param depthMapRegister The texture register containing the depth map.
	     * @param decReg The register containing the depth map decoding data.
	     * @param targetReg The target register to add the shadow coverage.
	     */
	    private getSampleCode(customDataReg, depthMapRegister, decReg, targetReg, regCache, sharedRegisters);
	    /**
	     * Adds the code for another tap to the shader code.
	     * @param uvReg The uv register for the tap.
	     * @param depthMapRegister The texture register containing the depth map.
	     * @param decReg The register containing the depth map decoding data.
	     * @param targetReg The target register to add the tap comparison result.
	     * @param regCache The register cache managing the registers.
	     * @return
	     */
	    private addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
	    /**
	     * @inheritDoc
	     */
	    iActivateForCascade(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    _iGetCascadeFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, decodeRegister: ShaderRegisterElement, depthTexture: ShaderRegisterElement, depthProjection: ShaderRegisterElement, targetRegister: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = ShadowDitheredMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod" {
	import DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
	/**
	 * ShadowFilteredMethod provides a softened shadowing technique by bilinearly interpolating shadow comparison
	 * results of neighbouring pixels.
	 */
	class ShadowFilteredMethod extends ShadowMethodBase {
	    /**
	     * Creates a new DiffuseBasicMethod object.
	     *
	     * @param castingLight The light casting the shadow
	     */
	    constructor(castingLight: DirectionalLight);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    _pGetPlanarFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivateForCascade(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    _iGetCascadeFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, decodeRegister: ShaderRegisterElement, depthTexture: ShaderRegisterElement, depthProjection: ShaderRegisterElement, targetRegister: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = ShadowFilteredMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowHardMethod" {
	import LightBase = require("awayjs-display/lib/base/LightBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
	/**
	 * ShadowHardMethod provides the cheapest shadow map method by using a single tap without any filtering.
	 */
	class ShadowHardMethod extends ShadowMethodBase {
	    /**
	     * Creates a new ShadowHardMethod object.
	     */
	    constructor(castingLight: LightBase);
	    /**
	     * @inheritDoc
	     */
	    _pGetPlanarFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _pGetPointFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iGetCascadeFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, decodeRegister: ShaderRegisterElement, depthTexture: ShaderRegisterElement, depthProjection: ShaderRegisterElement, targetRegister: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivateForCascade(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	}
	export = ShadowHardMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowNearMethod" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
	/**
	 * ShadowNearMethod provides a shadow map method that restricts the shadowed area near the camera to optimize
	 * shadow map usage. This method needs to be used in conjunction with a NearDirectionalShadowMapper.
	 *
	 * @see away.lights.NearDirectionalShadowMapper
	 */
	class ShadowNearMethod extends ShadowMethodBase {
	    private _baseMethod;
	    private _fadeRatio;
	    private _nearShadowMapper;
	    private _onShaderInvalidatedDelegate;
	    /**
	     * Creates a new ShadowNearMethod object.
	     * @param baseMethod The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)
	     * @param fadeRatio The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.
	     */
	    constructor(baseMethod: ShadowMethodBase, fadeRatio?: number);
	    /**
	     * The base shadow map method on which this method's shading is based.
	     */
	    baseMethod: ShadowMethodBase;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    alpha: number;
	    /**
	     * @inheritDoc
	     */
	    epsilon: number;
	    /**
	     * The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.
	     */
	    fadeRatio: number;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iDeactivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderObjectBase, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * @inheritDoc
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iReset(): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * Called when the base method's shader code is invalidated.
	     */
	    private onShaderInvalidated(event);
	}
	export = ShadowNearMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/ShadowSoftMethod" {
	import DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
	/**
	 * ShadowSoftMethod provides a soft shadowing technique by randomly distributing sample points.
	 */
	class ShadowSoftMethod extends ShadowMethodBase {
	    private _range;
	    private _numSamples;
	    private _offsets;
	    /**
	     * Creates a new DiffuseBasicMethod object.
	     *
	     * @param castingLight The light casting the shadows
	     * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 32.
	     */
	    constructor(castingLight: DirectionalLight, numSamples?: number, range?: number);
	    /**
	     * The amount of samples to take for dithering. Minimum 1, maximum 32. The actual maximum may depend on the
	     * complexity of the shader.
	     */
	    numSamples: number;
	    /**
	     * The range in the shadow map in which to distribute the samples.
	     */
	    range: number;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    _pGetPlanarFragmentCode(methodVO: MethodVO, targetReg: ShaderRegisterElement, regCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Adds the code for another tap to the shader code.
	     * @param uv The uv register for the tap.
	     * @param texture The texture register containing the depth map.
	     * @param decode The register containing the depth map decoding data.
	     * @param target The target register to add the tap comparison result.
	     * @param regCache The register cache managing the registers.
	     * @return
	     */
	    private addSample(uv, texture, decode, target, regCache);
	    /**
	     * @inheritDoc
	     */
	    iActivateForCascade(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    _iGetCascadeFragmentCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, decodeRegister: ShaderRegisterElement, depthTexture: ShaderRegisterElement, depthProjection: ShaderRegisterElement, targetRegister: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Get the actual shader code for shadow mapping
	     * @param regCache The register cache managing the registers.
	     * @param depthTexture The texture register containing the depth map.
	     * @param decodeRegister The register containing the depth map decoding data.
	     * @param targetReg The target register to add the shadow coverage.
	     * @param dataReg The register containing additional data.
	     */
	    private getSampleCode(regCache, depthTexture, decodeRegister, targetRegister, dataReg);
	}
	export = ShadowSoftMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod" {
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	/**
	 * SpecularAnisotropicMethod provides a specular method resulting in anisotropic highlights. These are typical for
	 * surfaces with microfacet details such as tiny grooves. In particular, this uses the Heidrich-Seidel distrubution.
	 * The tangent vectors are used as the surface groove directions.
	 */
	class SpecularAnisotropicMethod extends SpecularBasicMethod {
	    /**
	     * Creates a new SpecularAnisotropicMethod object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = SpecularAnisotropicMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/SpecularCompositeMethod" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	/**
	 * SpecularCompositeMethod provides a base class for specular methods that wrap a specular method to alter the
	 * calculated specular reflection strength.
	 */
	class SpecularCompositeMethod extends SpecularBasicMethod {
	    private _baseMethod;
	    private _onShaderInvalidatedDelegate;
	    /**
	     * Creates a new <code>SpecularCompositeMethod</code> object.
	     *
	     * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature modSpecular(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the specular strength and t.xyz will contain the half-vector or the reflection vector.
	     * @param baseMethod The base specular method on which this method's shading is based.
	     */
	    constructor(modulateMethod: (shaderObject: ShaderObjectBase, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData) => string, baseMethod?: SpecularBasicMethod);
	    /**
	     * @inheritDoc
	     */
	    iInitVO(shaderObject: ShaderLightingObject, methodVO: MethodVO): void;
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * The base specular method on which this method's shading is based.
	     */
	    baseMethod: SpecularBasicMethod;
	    /**
	     * @inheritDoc
	     */
	    gloss: number;
	    /**
	     * @inheritDoc
	     */
	    specular: number;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    texture: Texture2DBase;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iSetRenderState(shaderObject: ShaderLightingObject, methodVO: MethodVO, renderable: RenderableBase, stage: Stage, camera: Camera): void;
	    /**
	     * @inheritDoc
	     */
	    iDeactivate(shaderObject: ShaderObjectBase, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetVertexCode(shaderObject: ShaderObjectBase, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     * @return
	     */
	    iGetFragmentCodePerProbe(shaderObject: ShaderLightingObject, methodVO: MethodVO, cubeMapReg: ShaderRegisterElement, weightRegister: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPostLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, targetReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    iReset(): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * Called when the base method's shader code is invalidated.
	     */
	    private onShaderInvalidated(event);
	}
	export = SpecularCompositeMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/SpecularCelMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	import SpecularCompositeMethod = require("awayjs-methodmaterials/lib/methods/SpecularCompositeMethod");
	/**
	 * SpecularCelMethod provides a shading method to add specular cel (cartoon) shading.
	 */
	class SpecularCelMethod extends SpecularCompositeMethod {
	    private _dataReg;
	    private _smoothness;
	    private _specularCutOff;
	    /**
	     * Creates a new SpecularCelMethod object.
	     * @param specularCutOff The threshold at which the specular highlight should be shown.
	     * @param baseMethod An optional specular method on which the cartoon shading is based. If ommitted, SpecularBasicMethod is used.
	     */
	    constructor(specularCutOff?: number, baseMethod?: SpecularBasicMethod);
	    /**
	     * The smoothness of the highlight edge.
	     */
	    smoothness: number;
	    /**
	     * The threshold at which the specular highlight should be shown.
	     */
	    specularCutOff: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * Snaps the specular shading strength of the wrapped method to zero or one, depending on whether or not it exceeds the specularCutOff
	     * @param vo The MethodVO used to compile the current shader.
	     * @param t The register containing the specular strength in the "w" component, and either the half-vector or the reflection vector in "xyz".
	     * @param regCache The register cache used for the shader compilation.
	     * @param sharedRegisters The shared register data for this shader.
	     * @return The AGAL fragment code for the method.
	     */
	    private clampSpecular(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = SpecularCelMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	import SpecularCompositeMethod = require("awayjs-methodmaterials/lib/methods/SpecularCompositeMethod");
	/**
	 * SpecularFresnelMethod provides a specular shading method that causes stronger highlights on grazing view angles.
	 */
	class SpecularFresnelMethod extends SpecularCompositeMethod {
	    private _dataReg;
	    private _incidentLight;
	    private _fresnelPower;
	    private _normalReflectance;
	    /**
	     * Creates a new SpecularFresnelMethod object.
	     * @param basedOnSurface Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.
	     * @param baseMethod The specular method to which the fresnel equation. Defaults to SpecularBasicMethod.
	     */
	    constructor(basedOnSurface?: boolean, baseMethod?: SpecularBasicMethod);
	    /**
	     * @inheritDoc
	     */
	    iInitConstants(shaderObject: ShaderObjectBase, methodVO: MethodVO): void;
	    /**
	     * Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.
	     */
	    basedOnSurface: boolean;
	    /**
	     * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.
	     */
	    fresnelPower: number;
	    /**
	     * @inheritDoc
	     */
	    iCleanCompilationData(): void;
	    /**
	     * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.
	     */
	    normalReflectance: number;
	    /**
	     * @inheritDoc
	     */
	    iActivate(shaderObject: ShaderLightingObject, methodVO: MethodVO, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentPreLightingCode(shaderObject: ShaderLightingObject, methodVO: MethodVO, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Applies the fresnel effect to the specular strength.
	     *
	     * @param vo The MethodVO object containing the method data for the currently compiled material pass.
	     * @param target The register containing the specular strength in the "w" component, and the half-vector/reflection vector in "xyz".
	     * @param regCache The register cache used for the shader compilation.
	     * @param sharedRegisters The shared registers created by the compiler.
	     * @return The AGAL fragment code for the method.
	     */
	    private modulateSpecular(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);
	}
	export = SpecularFresnelMethod;
	
}
declare module "awayjs-methodmaterials/lib/methods/SpecularPhongMethod" {
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MethodVO = require("awayjs-methodmaterials/lib/data/MethodVO");
	import SpecularBasicMethod = require("awayjs-methodmaterials/lib/methods/SpecularBasicMethod");
	/**
	 * SpecularPhongMethod provides a specular method that provides Phong highlights.
	 */
	class SpecularPhongMethod extends SpecularBasicMethod {
	    /**
	     * Creates a new SpecularPhongMethod object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    iGetFragmentCodePerLight(shaderObject: ShaderLightingObject, methodVO: MethodVO, lightDirReg: ShaderRegisterElement, lightColReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = SpecularPhongMethod;
	
}
declare module "awayjs-parsers/lib/AWDParser" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	/**
	 * AWDParser provides a parser for the AWD data type.
	 */
	class AWDParser extends ParserBase {
	    private _debug;
	    private _byteData;
	    private _startedParsing;
	    private _cur_block_id;
	    private _blocks;
	    private _newBlockBytes;
	    private _version;
	    private _compression;
	    private _accuracyOnBlocks;
	    private _accuracyMatrix;
	    private _accuracyGeo;
	    private _accuracyProps;
	    private _matrixNrType;
	    private _geoNrType;
	    private _propsNrType;
	    private _streaming;
	    private _texture_users;
	    private _parsed_header;
	    private _body;
	    private _defaultTexture;
	    private _cubeTextures;
	    private _defaultBitmapMaterial;
	    private _defaultCubeTexture;
	    static COMPRESSIONMODE_LZMA: string;
	    static UNCOMPRESSED: number;
	    static DEFLATE: number;
	    static LZMA: number;
	    static INT8: number;
	    static INT16: number;
	    static INT32: number;
	    static UINT8: number;
	    static UINT16: number;
	    static UINT32: number;
	    static FLOAT32: number;
	    static FLOAT64: number;
	    static BOOL: number;
	    static COLOR: number;
	    static BADDR: number;
	    static AWDSTRING: number;
	    static AWDBYTEARRAY: number;
	    static VECTOR2x1: number;
	    static VECTOR3x1: number;
	    static VECTOR4x1: number;
	    static MTX3x2: number;
	    static MTX3x3: number;
	    static MTX4x3: number;
	    static MTX4x4: number;
	    private blendModeDic;
	    private _depthSizeDic;
	    /**
	     * Creates a new AWDParser object.
	     * @param uri The url or id of the data or file to be parsed.
	     * @param extra The holder for extra contextual data that the parser might need.
	     */
	    constructor();
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependency(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependencyFailure(resourceDependency: ResourceDependency): void;
	    /**
	     * Resolve a dependency name
	     *
	     * @param resourceDependency The dependency to be resolved.
	     */
	    _iResolveDependencyName(resourceDependency: ResourceDependency, asset: IAsset): string;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    _pStartParsing(frameLimit: number): void;
	    private dispose();
	    private parseNextBlock();
	    private parseShape2D(blockID);
	    private parseShape2DFill(blockID);
	    private parseTimeLine(blockID);
	    private parseTriangleGeometrieBlock(blockID);
	    private parsePrimitves(blockID);
	    private parseContainer(blockID);
	    private parseMeshInstance(blockID);
	    private parseSkyboxInstance(blockID);
	    private parseLight(blockID);
	    private parseCamera(blockID);
	    private parseLightPicker(blockID);
	    private parseMaterial(blockID);
	    private parseMaterial_v1(blockID);
	    private parseTexture(blockID);
	    private parseCubeTexture(blockID);
	    private parseSharedMethodBlock(blockID);
	    private parseShadowMethodBlock(blockID);
	    private parseCommand(blockID);
	    private parseMetaData(blockID);
	    private parseNameSpace(blockID);
	    private parseShadowMethodList(light, blockID);
	    private parseSkeleton(blockID);
	    private parseSkeletonPose(blockID);
	    private parseSkeletonAnimation(blockID);
	    private parseMeshPoseAnimation(blockID, poseOnly?);
	    private parseVertexAnimationSet(blockID);
	    private parseAnimatorSet(blockID);
	    private parseSharedMethodList(blockID);
	    private parseUserAttributes();
	    private parseProperties(expected);
	    private parseAttrValue(type, len);
	    private parseHeader();
	    private getUVForVertexAnimation(meshID);
	    private parseVarStr();
	    private getAssetByID(assetID, assetTypesToGet, extraTypeInfo?);
	    private getDefaultAsset(assetType, extraTypeInfo);
	    private getDefaultMaterial();
	    private getDefaultTexture();
	    private getDefaultCubeTexture();
	    private readNumber(precision?);
	    private parseMatrix3D();
	    private parseMatrix32RawData();
	    private parseMatrix43RawData();
	}
	export = AWDParser;
	
}
declare module "awayjs-parsers/lib/MD2Parser" {
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	/**
	 * MD2Parser provides a parser for the MD2 data type.
	 */
	class MD2Parser extends ParserBase {
	    static FPS: number;
	    private _clipNodes;
	    private _byteData;
	    private _startedParsing;
	    private _parsedHeader;
	    private _parsedUV;
	    private _parsedFaces;
	    private _parsedFrames;
	    private _ident;
	    private _version;
	    private _skinWidth;
	    private _skinHeight;
	    private _numSkins;
	    private _numVertices;
	    private _numST;
	    private _numTris;
	    private _numFrames;
	    private _offsetSkins;
	    private _offsetST;
	    private _offsetTris;
	    private _offsetFrames;
	    private _offsetEnd;
	    private _uvIndices;
	    private _indices;
	    private _vertIndices;
	    private _animationSet;
	    private _firstSubGeom;
	    private _uvs;
	    private _finalUV;
	    private _materialNames;
	    private _textureType;
	    private _ignoreTexturePath;
	    private _mesh;
	    private _geometry;
	    private materialFinal;
	    private geoCreated;
	    /**
	     * Creates a new MD2Parser object.
	     * @param textureType The extension of the texture (e.g. jpg/png/...)
	     * @param ignoreTexturePath If true, the path of the texture is ignored
	     */
	    constructor(textureType?: string, ignoreTexturePath?: boolean);
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependency(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependencyFailure(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    _pStartParsing(frameLimit: number): void;
	    /**
	     * Reads in all that MD2 Header data that is declared as private variables.
	     * I know its a lot, and it looks ugly, but only way to do it in Flash
	     */
	    private parseHeader();
	    /**
	     * Parses the file names for the materials.
	     */
	    private parseMaterialNames();
	    /**
	     * Parses the uv data for the mesh.
	     */
	    private parseUV();
	    /**
	     * Parses unique indices for the faces.
	     */
	    private parseFaces();
	    /**
	     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the
	     * corresponding vertex and uv data in the correct location.
	     * @param vertexIndex The original index in the vertex list.
	     * @param uvIndex The original index in the uv list.
	     */
	    private addIndex(vertexIndex, uvIndex);
	    /**
	     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.
	     * @param vertexIndex The original index in the vertex list.
	     * @param uvIndex The original index in the uv list.
	     * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.
	     */
	    private findIndex(vertexIndex, uvIndex);
	    /**
	     * Parses all the frame geometries.
	     */
	    private parseFrames();
	    private readFrameName();
	}
	export = MD2Parser;
	
}
declare module "awayjs-parsers/lib/MD5AnimParser" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	/**
	 * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.
	 *
	 * todo: optimize
	 */
	class MD5AnimParser extends ParserBase {
	    private _textData;
	    private _startedParsing;
	    static VERSION_TOKEN: string;
	    static COMMAND_LINE_TOKEN: string;
	    static NUM_FRAMES_TOKEN: string;
	    static NUM_JOINTS_TOKEN: string;
	    static FRAME_RATE_TOKEN: string;
	    static NUM_ANIMATED_COMPONENTS_TOKEN: string;
	    static HIERARCHY_TOKEN: string;
	    static BOUNDS_TOKEN: string;
	    static BASE_FRAME_TOKEN: string;
	    static FRAME_TOKEN: string;
	    static COMMENT_TOKEN: string;
	    private _parseIndex;
	    private _reachedEOF;
	    private _line;
	    private _charLineIndex;
	    private _version;
	    private _frameRate;
	    private _numFrames;
	    private _numJoints;
	    private _numAnimatedComponents;
	    private _hierarchy;
	    private _bounds;
	    private _frameData;
	    private _baseFrameData;
	    private _rotationQuat;
	    private _clip;
	    /**
	     * Creates a new MD5AnimParser object.
	     * @param uri The url or id of the data or file to be parsed.
	     * @param extra The holder for extra contextual data that the parser might need.
	     */
	    constructor(additionalRotationAxis?: Vector3D, additionalRotationRadians?: number);
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    /**
	     * Converts all key frame data to an SkinnedAnimationSequence.
	     */
	    private translateClip();
	    /**
	     * Converts a single key frame data to a SkeletonPose.
	     * @param frameData The actual frame data.
	     * @return A SkeletonPose containing the frame data's pose.
	     */
	    private translatePose(frameData);
	    /**
	     * Parses the skeleton's hierarchy data.
	     */
	    private parseHierarchy();
	    /**
	     * Parses frame bounds.
	     */
	    private parseBounds();
	    /**
	     * Parses the base frame.
	     */
	    private parseBaseFrame();
	    /**
	     * Parses a single frame.
	     */
	    private parseFrame();
	    /**
	     * Puts back the last read character into the data stream.
	     */
	    private putBack();
	    /**
	     * Gets the next token in the data stream.
	     */
	    private getNextToken();
	    /**
	     * Skips all whitespace in the data stream.
	     */
	    private skipWhiteSpace();
	    /**
	     * Skips to the next line.
	     */
	    private ignoreLine();
	    /**
	     * Retrieves the next single character in the data stream.
	     */
	    private getNextChar();
	    /**
	     * Retrieves the next integer in the data stream.
	     */
	    private getNextInt();
	    /**
	     * Retrieves the next floating point number in the data stream.
	     */
	    private getNextNumber();
	    /**
	     * Retrieves the next 3d vector in the data stream.
	     */
	    private parseVector3D();
	    /**
	     * Retrieves the next quaternion in the data stream.
	     */
	    private parseQuaternion();
	    /**
	     * Parses the command line data.
	     */
	    private parseCMD();
	    /**
	     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded
	     * by double quotes.
	     */
	    private parseLiteralstring();
	    /**
	     * Throws an end-of-file error when a premature end of file was encountered.
	     */
	    private sendEOFError();
	    /**
	     * Throws an error when an unexpected token was encountered.
	     * @param expected The token type that was actually expected.
	     */
	    private sendParseError(expected);
	    /**
	     * Throws an error when an unknown keyword was encountered.
	     */
	    private sendUnknownKeywordError();
	}
	export = MD5AnimParser;
	
}
declare module "awayjs-parsers/lib/MD5MeshParser" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	/**
	 * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.
	 *
	 * todo: optimize
	 */
	class MD5MeshParser extends ParserBase {
	    private _textData;
	    private _startedParsing;
	    static VERSION_TOKEN: string;
	    static COMMAND_LINE_TOKEN: string;
	    static NUM_JOINTS_TOKEN: string;
	    static NUM_MESHES_TOKEN: string;
	    static COMMENT_TOKEN: string;
	    static JOINTS_TOKEN: string;
	    static MESH_TOKEN: string;
	    static MESH_SHADER_TOKEN: string;
	    static MESH_NUM_VERTS_TOKEN: string;
	    static MESH_VERT_TOKEN: string;
	    static MESH_NUM_TRIS_TOKEN: string;
	    static MESH_TRI_TOKEN: string;
	    static MESH_NUM_WEIGHTS_TOKEN: string;
	    static MESH_WEIGHT_TOKEN: string;
	    private _parseIndex;
	    private _reachedEOF;
	    private _line;
	    private _charLineIndex;
	    private _version;
	    private _numJoints;
	    private _numMeshes;
	    private _mesh;
	    private _shaders;
	    private _maxJointCount;
	    private _meshData;
	    private _bindPoses;
	    private _geometry;
	    private _skeleton;
	    private _animationSet;
	    private _rotationQuat;
	    /**
	     * Creates a new MD5MeshParser object.
	     */
	    constructor(additionalRotationAxis?: Vector3D, additionalRotationRadians?: number);
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    _pStartParsing(frameLimit: number): void;
	    private calculateMaxJointCount();
	    private countZeroWeightJoints(vertex, weights);
	    /**
	     * Parses the skeleton's joints.
	     */
	    private parseJoints();
	    /**
	     * Puts back the last read character into the data stream.
	     */
	    private putBack();
	    /**
	     * Parses the mesh geometry.
	     */
	    private parseMesh();
	    /**
	     * Converts the mesh data to a SkinnedSub instance.
	     * @param vertexData The mesh's vertices.
	     * @param weights The joint weights per vertex.
	     * @param indices The indices for the faces.
	     * @return A SubGeometry instance containing all geometrical data for the current mesh.
	     */
	    private translateGeom(vertexData, weights, indices);
	    /**
	     * Retrieve the next triplet of vertex indices that form a face.
	     * @param indices The index list in which to store the read data.
	     */
	    private parseTri(indices);
	    /**
	     * Reads a new joint data set for a single joint.
	     * @param weights the target list to contain the weight data.
	     */
	    private parseJoint(weights);
	    /**
	     * Reads the data for a single vertex.
	     * @param vertexData The list to contain the vertex data.
	     */
	    private parseVertex(vertexData);
	    /**
	     * Reads the next uv coordinate.
	     * @param vertexData The vertexData to contain the UV coordinates.
	     */
	    private parseUV(vertexData);
	    /**
	     * Gets the next token in the data stream.
	     */
	    private getNextToken();
	    /**
	     * Skips all whitespace in the data stream.
	     */
	    private skipWhiteSpace();
	    /**
	     * Skips to the next line.
	     */
	    private ignoreLine();
	    /**
	     * Retrieves the next single character in the data stream.
	     */
	    private getNextChar();
	    /**
	     * Retrieves the next integer in the data stream.
	     */
	    private getNextInt();
	    /**
	     * Retrieves the next floating point number in the data stream.
	     */
	    private getNextNumber();
	    /**
	     * Retrieves the next 3d vector in the data stream.
	     */
	    private parseVector3D();
	    /**
	     * Retrieves the next quaternion in the data stream.
	     */
	    private parseQuaternion();
	    /**
	     * Parses the command line data.
	     */
	    private parseCMD();
	    /**
	     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded
	     * by double quotes.
	     */
	    private parseLiteralstring();
	    /**
	     * Throws an end-of-file error when a premature end of file was encountered.
	     */
	    private sendEOFError();
	    /**
	     * Throws an error when an unexpected token was encountered.
	     * @param expected The token type that was actually expected.
	     */
	    private sendParseError(expected);
	    /**
	     * Throws an error when an unknown keyword was encountered.
	     */
	    private sendUnknownKeywordError();
	}
	export = MD5MeshParser;
	
}
declare module "awayjs-parsers/lib/Max3DSParser" {
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	/**
	 * Max3DSParser provides a parser for the 3ds data type.
	 */
	class Max3DSParser extends ParserBase {
	    private _byteData;
	    private _textures;
	    private _materials;
	    private _unfinalized_objects;
	    private _cur_obj_end;
	    private _cur_obj;
	    private _cur_mat_end;
	    private _cur_mat;
	    private _useSmoothingGroups;
	    /**
	     * Creates a new <code>Max3DSParser</code> object.
	     *
	     * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.
	     */
	    constructor(useSmoothingGroups?: boolean);
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependency(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependencyFailure(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    _pStartParsing(frameLimit: number): void;
	    private parseMaterial();
	    private parseTexture(end);
	    private parseVertexList();
	    private parseFaceList();
	    private parseSmoothingGroups();
	    private parseUVList();
	    private parseFaceMaterialList();
	    private parseObjectAnimation(end);
	    private constructObject(obj, pivot?);
	    private prepareData(vertices, faces, obj);
	    private applySmoothGroups(vertices, faces);
	    private finalizeCurrentMaterial();
	    private readNulTermstring();
	    private readTransform();
	    private readColor();
	}
	export = Max3DSParser;
	
}
declare module "awayjs-parsers/lib/OBJParser" {
	import ParserBase = require("awayjs-core/lib/parsers/ParserBase");
	import ResourceDependency = require("awayjs-core/lib/parsers/ResourceDependency");
	/**
	 * OBJParser provides a parser for the OBJ data type.
	 */
	class OBJParser extends ParserBase {
	    private _textData;
	    private _startedParsing;
	    private _charIndex;
	    private _oldIndex;
	    private _stringLength;
	    private _currentObject;
	    private _currentGroup;
	    private _currentMaterialGroup;
	    private _objects;
	    private _materialIDs;
	    private _materialLoaded;
	    private _materialSpecularData;
	    private _meshes;
	    private _lastMtlID;
	    private _objectIndex;
	    private _realIndices;
	    private _vertexIndex;
	    private _vertices;
	    private _vertexNormals;
	    private _uvs;
	    private _scale;
	    private _mtlLib;
	    private _mtlLibLoaded;
	    private _activeMaterialID;
	    /**
	     * Creates a new OBJParser object.
	     * @param uri The url or id of the data or file to be parsed.
	     * @param extra The holder for extra contextual data that the parser might need.
	     */
	    constructor(scale?: number);
	    /**
	     * Scaling factor applied directly to vertices data
	     * @param value The scaling factor.
	     */
	    scale: number;
	    /**
	     * Indicates whether or not a given file extension is supported by the parser.
	     * @param extension The file extension of a potential file to be parsed.
	     * @return Whether or not the given file type is supported.
	     */
	    static supportsType(extension: string): boolean;
	    /**
	     * Tests whether a data block can be parsed by the parser.
	     * @param data The data block to potentially be parsed.
	     * @return Whether or not the given data is supported.
	     */
	    static supportsData(data: any): boolean;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependency(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _iResolveDependencyFailure(resourceDependency: ResourceDependency): void;
	    /**
	     * @inheritDoc
	     */
	    _pProceedParsing(): boolean;
	    _pStartParsing(frameLimit: number): void;
	    /**
	     * Parses a single line in the OBJ file.
	     */
	    private parseLine(trunk);
	    /**
	     * Converts the parsed data into an Away3D scenegraph structure
	     */
	    private translate();
	    /**
	     * Translates an obj's material group to a subgeometry.
	     * @param materialGroup The material group data to convert.
	     * @param geometry The Geometry to contain the converted SubGeometry.
	     */
	    private translateMaterialGroup(materialGroup, geometry);
	    private translateVertexData(face, vertexIndex, vertices, uvs, indices, normals);
	    /**
	     * Creates a new object group.
	     * @param trunk The data block containing the object tag and its parameters
	     */
	    private createObject(trunk);
	    /**
	     * Creates a new group.
	     * @param trunk The data block containing the group tag and its parameters
	     */
	    private createGroup(trunk);
	    /**
	     * Creates a new material group.
	     * @param trunk The data block containing the material tag and its parameters
	     */
	    private createMaterialGroup(trunk);
	    /**
	     * Reads the next vertex coordinates.
	     * @param trunk The data block containing the vertex tag and its parameters
	     */
	    private parseVertex(trunk);
	    /**
	     * Reads the next uv coordinates.
	     * @param trunk The data block containing the uv tag and its parameters
	     */
	    private parseUV(trunk);
	    /**
	     * Reads the next vertex normal coordinates.
	     * @param trunk The data block containing the vertex normal tag and its parameters
	     */
	    private parseVertexNormal(trunk);
	    /**
	     * Reads the next face's indices.
	     * @param trunk The data block containing the face tag and its parameters
	     */
	    private parseFace(trunk);
	    /**
	     * This is a hack around negative face coords
	     */
	    private parseIndex(index, length);
	    private parseMtl(data);
	    private parseMapKdString(trunk);
	    private loadMtl(mtlurl);
	    private applyMaterial(lm);
	    private applyMaterials();
	}
	export = OBJParser;
	
}
declare module "awayjs-parsers/lib/Parsers" {
	/**
	 *
	 */
	class Parsers {
	    /**
	     * A list of all parsers that come bundled with Away3D. Use this to quickly
	     * enable support for all bundled parsers to the file format auto-detection
	     * feature, using any of the enableParsers() methods on loaders, e.g.:
	     *
	     * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>
	     *
	     * Beware however that this requires all parser classes to be included in the
	     * SWF file, which will add 50-100 kb to the file. When only a limited set of
	     * file formats are used, SWF file size can be saved by adding the parsers
	     * individually using AssetLibrary.enableParser()
	     *
	     * A third way is to specify a parser for each loaded file, thereby bypassing
	     * the auto-detection mechanisms altogether, while at the same time allowing
	     * any properties that are unique to that parser to be set for that load.
	     *
	     * The bundled parsers are:
	     *
	     * <ul>
	     * <li>AC3D (.ac)</li>
	     * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>
	     * <li>3DMax (.3ds)</li>
	     * <li>DXF (.dxf)</li>
	     * <li>Quake 2 MD2 models (.md2)</li>
	     * <li>Doom 3 MD5 animation clips (.md5anim)</li>
	     * <li>Doom 3 MD5 meshes (.md5mesh)</li>
	     * <li>Wavefront OBJ (.obj)</li>
	     * <li>Collada (.dae)</li>
	     * <li>Images (.jpg, .png)</li>
	     * </ul>
	     *
	     * @see away.library.AssetLibrary.enableParser
	     */
	    static ALL_BUNDLED: Object[];
	    /**
	     * Short-hand function to enable all bundled parsers for auto-detection. In practice,
	     * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the
	     * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.
	     *
	     * See notes about file size in the documentation for the ALL_BUNDLED constant.
	     *
	     * @see away.parsers.Parsers.ALL_BUNDLED
	     */
	    static enableAllBundled(): void;
	}
	export = Parsers;
	
}
declare module "awayjs-renderergl/lib/errors/AnimationSetError" {
	import Error = require("awayjs-core/lib/errors/Error");
	class AnimationSetError extends Error {
	    constructor(message: string);
	}
	export = AnimationSetError;
	
}
declare module "awayjs-renderergl/lib/animators/states/IAnimationState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	interface IAnimationState {
	    positionDelta: Vector3D;
	    offset(startTime: number): any;
	    update(time: number): any;
	    /**
	     * Sets the animation phase of the node.
	     *
	     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.
	     */
	    phase(value: number): any;
	}
	export = IAnimationState;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderRegisterElement" {
	/**
	 * A single register element (an entire register or a single register's component) used by the RegisterPool.
	 */
	class ShaderRegisterElement {
	    private _regName;
	    private _index;
	    private _toStr;
	    private static COMPONENTS;
	    _component: number;
	    /**
	     * Creates a new ShaderRegisterElement object.
	     *
	     * @param regName The name of the register.
	     * @param index The index of the register.
	     * @param component The register's component, if not the entire register is represented.
	     */
	    constructor(regName: string, index: number, component?: number);
	    /**
	     * Converts the register or the components AGAL string representation.
	     */
	    toString(): string;
	    /**
	     * The register's name.
	     */
	    regName: string;
	    /**
	     * The register's index.
	     */
	    index: number;
	}
	export = ShaderRegisterElement;
	
}
declare module "awayjs-renderergl/lib/compilation/RegisterPool" {
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	/**
	 * RegisterPool is used by the shader compilation process to keep track of which registers of a certain type are
	 * currently used and should not be allowed to be written to. Either entire registers can be requested and locked,
	 * or single components (x, y, z, w) of a single register.
	 * It is used by ShaderRegisterCache to track usages of individual register types.
	 *
	 * @see away.materials.ShaderRegisterCache
	 */
	class RegisterPool {
	    private static _regPool;
	    private static _regCompsPool;
	    private _vectorRegisters;
	    private _registerComponents;
	    private _regName;
	    private _usedSingleCount;
	    private _usedVectorCount;
	    private _regCount;
	    private _persistent;
	    /**
	     * Creates a new RegisterPool object.
	     * @param regName The base name of the register type ("ft" for fragment temporaries, "vc" for vertex constants, etc)
	     * @param regCount The amount of available registers of this type.
	     * @param persistent Whether or not registers, once reserved, can be freed again. For example, temporaries are not persistent, but constants are.
	     */
	    constructor(regName: string, regCount: number, persistent?: boolean);
	    /**
	     * Retrieve an entire vector register that's still available.
	     */
	    requestFreeVectorReg(): ShaderRegisterElement;
	    /**
	     * Retrieve a single vector component that's still available.
	     */
	    requestFreeRegComponent(): ShaderRegisterElement;
	    /**
	     * Marks a register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage
	     * has been called usageCount times again.
	     * @param register The register to mark as used.
	     * @param usageCount The amount of usages to add.
	     */
	    addUsage(register: ShaderRegisterElement, usageCount: number): void;
	    /**
	     * Removes a usage from a register. When usages reach 0, the register is freed again.
	     * @param register The register for which to remove a usage.
	     */
	    removeUsage(register: ShaderRegisterElement): void;
	    /**
	     * Disposes any resources used by the current RegisterPool object.
	     */
	    dispose(): void;
	    /**
	     * Indicates whether or not any registers are in use.
	     */
	    hasRegisteredRegs(): boolean;
	    /**
	     * Initializes all registers.
	     */
	    private initRegisters(regName, regCount);
	    private static _initPool(regName, regCount);
	    /**
	     * Check if the temp register is either used for single or vector use
	     */
	    private isRegisterUsed(index);
	    private _initArray(a, val);
	}
	export = RegisterPool;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderRegisterCache" {
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	/**
	 * ShaderRegister Cache provides the usage management system for all registers during shading compilation.
	 */
	class ShaderRegisterCache {
	    private _fragmentTempCache;
	    private _vertexTempCache;
	    private _varyingCache;
	    private _fragmentConstantsCache;
	    private _vertexConstantsCache;
	    private _textureCache;
	    private _vertexAttributesCache;
	    private _vertexConstantOffset;
	    private _vertexAttributesOffset;
	    private _varyingsOffset;
	    private _fragmentConstantOffset;
	    private _fragmentOutputRegister;
	    private _vertexOutputRegister;
	    private _numUsedVertexConstants;
	    private _numUsedFragmentConstants;
	    private _numUsedStreams;
	    private _numUsedTextures;
	    private _numUsedVaryings;
	    private _profile;
	    /**
	     * Create a new ShaderRegisterCache object.
	     *
	     * @param profile The compatibility profile used by the renderer.
	     */
	    constructor(profile: string);
	    /**
	     * Resets all registers.
	     */
	    reset(): void;
	    /**
	     * Disposes all resources used.
	     */
	    dispose(): void;
	    /**
	     * Marks a fragment temporary register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage
	     * has been called usageCount times again.
	     * @param register The register to mark as used.
	     * @param usageCount The amount of usages to add.
	     */
	    addFragmentTempUsages(register: ShaderRegisterElement, usageCount: number): void;
	    /**
	     * Removes a usage from a fragment temporary register. When usages reach 0, the register is freed again.
	     * @param register The register for which to remove a usage.
	     */
	    removeFragmentTempUsage(register: ShaderRegisterElement): void;
	    /**
	     * Marks a vertex temporary register as used, so it cannot be retrieved. The register won't be able to be used
	     * until removeUsage has been called usageCount times again.
	     * @param register The register to mark as used.
	     * @param usageCount The amount of usages to add.
	     */
	    addVertexTempUsages(register: ShaderRegisterElement, usageCount: number): void;
	    /**
	     * Removes a usage from a vertex temporary register. When usages reach 0, the register is freed again.
	     * @param register The register for which to remove a usage.
	     */
	    removeVertexTempUsage(register: ShaderRegisterElement): void;
	    /**
	     * Retrieve an entire fragment temporary register that's still available. The register won't be able to be used until removeUsage
	     * has been called usageCount times again.
	     */
	    getFreeFragmentVectorTemp(): ShaderRegisterElement;
	    /**
	     * Retrieve a single component from a fragment temporary register that's still available.
	     */
	    getFreeFragmentSingleTemp(): ShaderRegisterElement;
	    /**
	     * Retrieve an available varying register
	     */
	    getFreeVarying(): ShaderRegisterElement;
	    /**
	     * Retrieve an available fragment constant register
	     */
	    getFreeFragmentConstant(): ShaderRegisterElement;
	    /**
	     * Retrieve an available vertex constant register
	     */
	    getFreeVertexConstant(): ShaderRegisterElement;
	    /**
	     * Retrieve an entire vertex temporary register that's still available.
	     */
	    getFreeVertexVectorTemp(): ShaderRegisterElement;
	    /**
	     * Retrieve a single component from a vertex temporary register that's still available.
	     */
	    getFreeVertexSingleTemp(): ShaderRegisterElement;
	    /**
	     * Retrieve an available vertex attribute register
	     */
	    getFreeVertexAttribute(): ShaderRegisterElement;
	    /**
	     * Retrieve an available texture register
	     */
	    getFreeTextureReg(): ShaderRegisterElement;
	    /**
	     * Indicates the start index from which to retrieve vertex constants.
	     */
	    vertexConstantOffset: number;
	    /**
	     * Indicates the start index from which to retrieve vertex attributes.
	     */
	    vertexAttributesOffset: number;
	    /**
	     * Indicates the start index from which to retrieve varying registers.
	     */
	    varyingsOffset: number;
	    /**
	     * Indicates the start index from which to retrieve fragment constants.
	     */
	    fragmentConstantOffset: number;
	    /**
	     * The fragment output register.
	     */
	    fragmentOutputRegister: ShaderRegisterElement;
	    /**
	     * The amount of used vertex constant registers.
	     */
	    numUsedVertexConstants: number;
	    /**
	     * The amount of used fragment constant registers.
	     */
	    numUsedFragmentConstants: number;
	    /**
	     * The amount of used vertex streams.
	     */
	    numUsedStreams: number;
	    /**
	     * The amount of used texture slots.
	     */
	    numUsedTextures: number;
	    /**
	     * The amount of used varying registers.
	     */
	    numUsedVaryings: number;
	}
	export = ShaderRegisterCache;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderRegisterData" {
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	/**
	 * ShaderRegisterData contains the "named" registers, generated by the compiler and to be passed on to the methods.
	 */
	class ShaderRegisterData {
	    normalVarying: ShaderRegisterElement;
	    tangentVarying: ShaderRegisterElement;
	    bitangentVarying: ShaderRegisterElement;
	    uvVarying: ShaderRegisterElement;
	    secondaryUVVarying: ShaderRegisterElement;
	    viewDirVarying: ShaderRegisterElement;
	    shadowTarget: ShaderRegisterElement;
	    shadedTarget: ShaderRegisterElement;
	    globalPositionVertex: ShaderRegisterElement;
	    globalPositionVarying: ShaderRegisterElement;
	    localPosition: ShaderRegisterElement;
	    normalInput: ShaderRegisterElement;
	    tangentInput: ShaderRegisterElement;
	    animatedNormal: ShaderRegisterElement;
	    animatedTangent: ShaderRegisterElement;
	    commons: ShaderRegisterElement;
	    projectionFragment: ShaderRegisterElement;
	    normalFragment: ShaderRegisterElement;
	    viewDirFragment: ShaderRegisterElement;
	    bitangent: ShaderRegisterElement;
	    constructor();
	}
	export = ShaderRegisterData;
	
}
declare module "awayjs-renderergl/lib/materials/MaterialGLBase" {
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	class MaterialGLBase extends MaterialBase {
	    _iGetVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = MaterialGLBase;
	
}
declare module "awayjs-renderergl/lib/pool/RenderableBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import IRenderable = require("awayjs-display/lib/pool/IRenderable");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import IEntity = require("awayjs-display/lib/entities/IEntity");
	import IndexData = require("awayjs-stagegl/lib/pool/IndexData");
	import VertexData = require("awayjs-stagegl/lib/pool/VertexData");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	/**
	 * @class RenderableListItem
	 */
	class RenderableBase implements IRenderable {
	    private _onIndicesUpdatedDelegate;
	    private _onVerticesUpdatedDelegate;
	    private _subGeometry;
	    private _geometryDirty;
	    private _indexData;
	    private _indexDataDirty;
	    private _vertexData;
	    _pVertexDataDirty: Object;
	    private _vertexOffset;
	    private _level;
	    private _indexOffset;
	    private _overflow;
	    private _numTriangles;
	    private _concatenateArrays;
	    JOINT_INDEX_FORMAT: string;
	    JOINT_WEIGHT_FORMAT: string;
	    /**
	     *
	     */
	    _pool: RenderablePool;
	    /**
	     *
	     */
	    overflow: RenderableBase;
	    /**
	     *
	     */
	    numTriangles: number;
	    /**
	     *
	     */
	    next: RenderableBase;
	    /**
	     *
	     */
	    materialId: number;
	    /**
	     *
	     */
	    renderOrderId: number;
	    /**
	     *
	     */
	    zIndex: number;
	    /**
	     *
	     */
	    cascaded: boolean;
	    /**
	     *
	     */
	    renderSceneTransform: Matrix3D;
	    /**
	     *
	     */
	    sourceEntity: IEntity;
	    /**
	     *
	     */
	    materialOwner: IMaterialOwner;
	    /**
	     *
	     */
	    material: MaterialGLBase;
	    /**
	     *
	     */
	    getIndexData(): IndexData;
	    /**
	     *
	     */
	    getVertexData(dataType: string): VertexData;
	    /**
	     *
	     */
	    getVertexOffset(dataType: string): number;
	    /**
	     *
	     * @param sourceEntity
	     * @param materialOwner
	     * @param subGeometry
	     * @param animationSubGeometry
	     */
	    constructor(pool: RenderablePool, sourceEntity: IEntity, materialOwner: IMaterialOwner, level?: number, indexOffset?: number);
	    dispose(): void;
	    invalidateGeometry(): void;
	    /**
	     *
	     */
	    invalidateIndexData(): void;
	    /**
	     * //TODO
	     *
	     * @param dataType
	     */
	    invalidateVertexData(dataType: string): void;
	    _pGetSubGeometry(): SubGeometryBase;
	    /**
	     * //TODO
	     *
	     * @param subGeometry
	     * @param offset
	     * @internal
	     */
	    _iFillIndexData(indexOffset: number): void;
	    _pGetOverflowRenderable(pool: RenderablePool, materialOwner: IMaterialOwner, level: number, indexOffset: number): RenderableBase;
	    /**
	     * //TODO
	     *
	     * @private
	     */
	    private _updateGeometry();
	    /**
	     * //TODO
	     *
	     * @private
	     */
	    private _updateIndexData();
	    /**
	     * //TODO
	     *
	     * @param dataType
	     * @private
	     */
	    private _updateVertexData(dataType);
	    /**
	     * //TODO
	     *
	     * @param event
	     * @private
	     */
	    private _onIndicesUpdated(event);
	    /**
	     * //TODO
	     *
	     * @param event
	     * @private
	     */
	    private _onVerticesUpdated(event);
	}
	export = RenderableBase;
	
}
declare module "awayjs-renderergl/lib/pool/TriangleSubMeshRenderable" {
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import TriangleSubMesh = require("awayjs-display/lib/base/TriangleSubMesh");
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * @class away.pool.TriangleSubMeshRenderable
	 */
	class TriangleSubMeshRenderable extends RenderableBase {
	    /**
	     *
	     */
	    static id: string;
	    /**
	     *
	     */
	    subMesh: TriangleSubMesh;
	    /**
	     * //TODO
	     *
	     * @param pool
	     * @param subMesh
	     * @param level
	     * @param indexOffset
	     */
	    constructor(pool: RenderablePool, subMesh: TriangleSubMesh, level?: number, indexOffset?: number);
	    /**
	     *
	     * @returns {SubGeometryBase}
	     * @protected
	     */
	    _pGetSubGeometry(): TriangleSubGeometry;
	    /**
	     * //TODO
	     *
	     * @param pool
	     * @param materialOwner
	     * @param level
	     * @param indexOffset
	     * @returns {away.pool.TriangleSubMeshRenderable}
	     * @protected
	     */
	    _pGetOverflowRenderable(pool: RenderablePool, materialOwner: IMaterialOwner, level: number, indexOffset: number): RenderableBase;
	}
	export = TriangleSubMeshRenderable;
	
}
declare module "awayjs-renderergl/lib/events/AnimatorEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	/**
	 * Dispatched to notify changes in an animator's state.
	 */
	class AnimatorEvent extends Event {
	    /**
	     * Defines the value of the type property of a start event object.
	     */
	    static START: string;
	    /**
	     * Defines the value of the type property of a stop event object.
	     */
	    static STOP: string;
	    /**
	     * Defines the value of the type property of a cycle complete event object.
	     */
	    static CYCLE_COMPLETE: string;
	    private _animator;
	    /**
	     * Create a new <code>AnimatorEvent</code> object.
	     *
	     * @param type The event type.
	     * @param animator The animator object that is the subject of this event.
	     */
	    constructor(type: string, animator: AnimatorBase);
	    animator: AnimatorBase;
	    /**
	     * Clones the event.
	     *
	     * @return An exact duplicate of the current event object.
	     */
	    clone(): Event;
	}
	export = AnimatorEvent;
	
}
declare module "awayjs-renderergl/lib/animators/AnimatorBase" {
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import IAnimationSet = require("awayjs-display/lib/animators/IAnimationSet");
	import IAnimator = require("awayjs-display/lib/animators/IAnimator");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import IAnimationState = require("awayjs-renderergl/lib/animators/states/IAnimationState");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 * Dispatched when playback of an animation inside the animator object starts.
	 *
	 * @eventType away3d.events.AnimatorEvent
	 */
	/**
	 * Dispatched when playback of an animation inside the animator object stops.
	 *
	 * @eventType away3d.events.AnimatorEvent
	 */
	/**
	 * Dispatched when playback of an animation reaches the end of an animation.
	 *
	 * @eventType away3d.events.AnimatorEvent
	 */
	/**
	 * Provides an abstract base class for animator classes that control animation output from a data set subtype of <code>AnimationSetBase</code>.
	 *
	 * @see away.animators.AnimationSetBase
	 */
	class AnimatorBase extends NamedAssetBase implements IAnimator {
	    private _broadcaster;
	    private _isPlaying;
	    private _autoUpdate;
	    private _startEvent;
	    private _stopEvent;
	    private _cycleEvent;
	    private _time;
	    private _playbackSpeed;
	    _pAnimationSet: IAnimationSet;
	    _pOwners: Mesh[];
	    _pActiveNode: AnimationNodeBase;
	    _pActiveState: IAnimationState;
	    _pActiveAnimationName: string;
	    _pAbsoluteTime: number;
	    private _animationStates;
	    /**
	     * Enables translation of the animated mesh from data returned per frame via the positionDelta property of the active animation node. Defaults to true.
	     *
	     * @see away.animators.IAnimationState#positionDelta
	     */
	    updatePosition: boolean;
	    getAnimationState(node: AnimationNodeBase): IAnimationState;
	    getAnimationStateByName(name: string): IAnimationState;
	    /**
	     * Returns the internal absolute time of the animator, calculated by the current time and the playback speed.
	     *
	     * @see #time
	     * @see #playbackSpeed
	     */
	    absoluteTime: number;
	    /**
	     * Returns the animation data set in use by the animator.
	     */
	    animationSet: IAnimationSet;
	    /**
	     * Returns the current active animation state.
	     */
	    activeState: IAnimationState;
	    /**
	     * Returns the current active animation node.
	     */
	    activeAnimation: AnimationNodeBase;
	    /**
	     * Returns the current active animation node.
	     */
	    activeAnimationName: string;
	    /**
	     * Determines whether the animators internal update mechanisms are active. Used in cases
	     * where manual updates are required either via the <code>time</code> property or <code>update()</code> method.
	     * Defaults to true.
	     *
	     * @see #time
	     * @see #update()
	     */
	    autoUpdate: boolean;
	    /**
	     * Gets and sets the internal time clock of the animator.
	     */
	    time: number;
	    /**
	     * Sets the animation phase of the current active state's animation clip(s).
	     *
	     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.
	     */
	    phase(value: number): void;
	    /**
	     * Creates a new <code>AnimatorBase</code> object.
	     *
	     * @param animationSet The animation data set to be used by the animator object.
	     */
	    constructor(animationSet: IAnimationSet);
	    /**
	     * The amount by which passed time should be scaled. Used to slow down or speed up animations. Defaults to 1.
	     */
	    playbackSpeed: number;
	    setRenderState(shaderObject: ShaderObjectBase, renderable: RenderableBase, stage: Stage, camera: Camera, vertexConstantOffset: number, vertexStreamOffset: number): void;
	    /**
	     * Resumes the automatic playback clock controling the active state of the animator.
	     */
	    start(): void;
	    /**
	     * Pauses the automatic playback clock of the animator, in case manual updates are required via the
	     * <code>time</code> property or <code>update()</code> method.
	     *
	     * @see #time
	     * @see #update()
	     */
	    stop(): void;
	    /**
	     * Provides a way to manually update the active state of the animator when automatic
	     * updates are disabled.
	     *
	     * @see #stop()
	     * @see #autoUpdate
	     */
	    update(time: number): void;
	    reset(name: string, offset?: number): void;
	    /**
	     * Used by the mesh object to which the animator is applied, registers the owner for internal use.
	     *
	     * @private
	     */
	    addOwner(mesh: Mesh): void;
	    /**
	     * Used by the mesh object from which the animator is removed, unregisters the owner for internal use.
	     *
	     * @private
	     */
	    removeOwner(mesh: Mesh): void;
	    /**
	     * Internal abstract method called when the time delta property of the animator's contents requires updating.
	     *
	     * @private
	     */
	    _pUpdateDeltaTime(dt: number): void;
	    /**
	     * Enter frame event handler for automatically updating the active state of the animator.
	     */
	    private onEnterFrame(event?);
	    private applyPositionDelta();
	    /**
	     *  for internal use.
	     *
	     * @private
	     */
	    dispatchCycleEvent(): void;
	    /**
	     * @inheritDoc
	     */
	    clone(): AnimatorBase;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    testGPUCompatibility(shaderObject: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    getRenderableSubGeometry(renderable: TriangleSubMeshRenderable, sourceSubGeometry: TriangleSubGeometry): TriangleSubGeometry;
	}
	export = AnimatorBase;
	
}
declare module "awayjs-renderergl/lib/animators/data/AnimationRegisterCache" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	/**
	 * ...
	 */
	class AnimationRegisterCache extends ShaderRegisterCache {
	    positionAttribute: ShaderRegisterElement;
	    uvAttribute: ShaderRegisterElement;
	    positionTarget: ShaderRegisterElement;
	    scaleAndRotateTarget: ShaderRegisterElement;
	    velocityTarget: ShaderRegisterElement;
	    vertexTime: ShaderRegisterElement;
	    vertexLife: ShaderRegisterElement;
	    vertexZeroConst: ShaderRegisterElement;
	    vertexOneConst: ShaderRegisterElement;
	    vertexTwoConst: ShaderRegisterElement;
	    uvTarget: ShaderRegisterElement;
	    colorAddTarget: ShaderRegisterElement;
	    colorMulTarget: ShaderRegisterElement;
	    colorAddVary: ShaderRegisterElement;
	    colorMulVary: ShaderRegisterElement;
	    uvVar: ShaderRegisterElement;
	    rotationRegisters: ShaderRegisterElement[];
	    needFragmentAnimation: boolean;
	    needUVAnimation: boolean;
	    sourceRegisters: string[];
	    targetRegisters: string[];
	    private indexDictionary;
	    hasUVNode: boolean;
	    needVelocity: boolean;
	    hasBillboard: boolean;
	    hasColorMulNode: boolean;
	    hasColorAddNode: boolean;
	    constructor(profile: string);
	    reset(): void;
	    setUVSourceAndTarget(UVAttribute: string, UVVaring: string): void;
	    setRegisterIndex(node: AnimationNodeBase, parameterIndex: number, registerIndex: number): void;
	    getRegisterIndex(node: AnimationNodeBase, parameterIndex: number): number;
	    getInitCode(): string;
	    getCombinationCode(): string;
	    initColorRegisters(): string;
	    getColorPassCode(): string;
	    getColorCombinationCode(shadedTarget: string): string;
	    private getRegisterFromString(code);
	    vertexConstantData: number[];
	    fragmentConstantData: number[];
	    private _numVertexConstant;
	    private _numFragmentConstant;
	    numVertexConstant: number;
	    numFragmentConstant: number;
	    setDataLength(): void;
	    setVertexConst(index: number, x?: number, y?: number, z?: number, w?: number): void;
	    setVertexConstFromArray(index: number, data: number[]): void;
	    setVertexConstFromMatrix(index: number, matrix: Matrix3D): void;
	    setFragmentConst(index: number, x?: number, y?: number, z?: number, w?: number): void;
	}
	export = AnimationRegisterCache;
	
}
declare module "awayjs-renderergl/lib/pool/MaterialPassDataPool" {
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * @class away.pool.MaterialPassDataPool
	 */
	class MaterialPassDataPool {
	    private _pool;
	    private _material;
	    /**
	     * //TODO
	     *
	     * @param textureDataClass
	     */
	    constructor(material: MaterialGLBase);
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     * @returns ITexture
	     */
	    getItem(materialPass: MaterialPassGLBase): MaterialPassData;
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     */
	    disposeItem(materialPass: MaterialPassGLBase): void;
	    disposePool(): void;
	}
	export = MaterialPassDataPool;
	
}
declare module "awayjs-renderergl/lib/pool/MaterialPassData" {
	import IMaterialPassData = require("awayjs-display/lib/pool/IMaterialPassData");
	import ProgramData = require("awayjs-stagegl/lib/pool/ProgramData");
	import MaterialPassDataPool = require("awayjs-renderergl/lib/pool/MaterialPassDataPool");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 *
	 * @class away.pool.MaterialPassData
	 */
	class MaterialPassData implements IMaterialPassData {
	    private _pool;
	    material: MaterialGLBase;
	    shaderObject: ShaderObjectBase;
	    materialPass: MaterialPassGLBase;
	    programData: ProgramData;
	    shadedTarget: string;
	    vertexCode: string;
	    postAnimationFragmentCode: string;
	    fragmentCode: string;
	    animationVertexCode: string;
	    animationFragmentCode: string;
	    key: string;
	    invalid: boolean;
	    usesAnimation: boolean;
	    constructor(pool: MaterialPassDataPool, material: MaterialGLBase, materialPass: MaterialPassGLBase);
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    invalidate(): void;
	}
	export = MaterialPassData;
	
}
declare module "awayjs-renderergl/lib/passes/MaterialPassGLBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import LightPickerBase = require("awayjs-display/lib/materials/lightpickers/LightPickerBase");
	import IMaterialPass = require("awayjs-display/lib/materials/passes/IMaterialPass");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	/**
	 * MaterialPassGLBase provides an abstract base class for material shader passes. A material pass constitutes at least
	 * a render call per required renderable.
	 */
	class MaterialPassGLBase extends NamedAssetBase implements IMaterialPass {
	    private _materialPassData;
	    private _preserveAlpha;
	    private _forceSeparateMVP;
	    private _depthCompareMode;
	    private _blendFactorSource;
	    private _blendFactorDest;
	    _pEnableBlending: boolean;
	    _pLightPicker: LightPickerBase;
	    private _writeDepth;
	    private _onLightsChangeDelegate;
	    /**
	     * Indicates whether the output alpha value should remain unchanged compared to the material's original alpha.
	     */
	    preserveAlpha: boolean;
	    /**
	     * Indicates whether the screen projection should be calculated by forcing a separate scene matrix and
	     * view-projection matrix. This is used to prevent rounding errors when using multiple passes with different
	     * projection code.
	     */
	    forceSeparateMVP: boolean;
	    /**
	     * Creates a new MaterialPassGLBase object.
	     */
	    constructor();
	    /**
	     * Factory method to create a concrete shader object for this pass.
	     *
	     * @param profile The compatibility profile used by the renderer.
	     */
	    createShaderObject(profile: string): ShaderObjectBase;
	    /**
	     * Indicate whether this pass should write to the depth buffer or not. Ignored when blending is enabled.
	     */
	    writeDepth: boolean;
	    /**
	     * The depth compare mode used to render the renderables using this material.
	     *
	     * @see away.stagegl.ContextGLCompareMode
	     */
	    depthCompareMode: string;
	    /**
	     * Cleans up any resources used by the current object.
	     * @param deep Indicates whether other resources should be cleaned up, that could potentially be shared across different instances.
	     */
	    dispose(): void;
	    /**
	     * Renders an object to the current render target.
	     *
	     * @private
	     */
	    _iRender(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     *
	     *
	     * @param renderable
	     * @param stage
	     * @param camera
	     */
	    setRenderState(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     * The blend mode to use when drawing this renderable. The following blend modes are supported:
	     * <ul>
	     * <li>BlendMode.NORMAL: No blending, unless the material inherently needs it</li>
	     * <li>BlendMode.LAYER: Force blending. This will draw the object the same as NORMAL, but without writing depth writes.</li>
	     * <li>BlendMode.MULTIPLY</li>
	     * <li>BlendMode.ADD</li>
	     * <li>BlendMode.ALPHA</li>
	     * </ul>
	     */
	    setBlendMode(value: string): void;
	    /**
	     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before
	     * calling renderPass. Before activating a pass, the previously used pass needs to be deactivated.
	     * @param stage The Stage object which is currently used for rendering.
	     * @param camera The camera from which the scene is viewed.
	     * @private
	     */
	    _iActivate(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	    /**
	     * Clears the render state for the pass. This needs to be called before activating another pass.
	     * @param stage The Stage used for rendering
	     *
	     * @private
	     */
	    _iDeactivate(pass: MaterialPassData, renderer: RendererBase): void;
	    /**
	     * Marks the shader program as invalid, so it will be recompiled before the next render.
	     *
	     * @param updateMaterial Indicates whether the invalidation should be performed on the entire material. Should always pass "true" unless it's called from the material itself.
	     */
	    _pInvalidatePass(): void;
	    /**
	     * The light picker used by the material to provide lights to the material if it supports lighting.
	     *
	     * @see away.materials.LightPickerBase
	     * @see away.materials.StaticLightPicker
	     */
	    lightPicker: LightPickerBase;
	    /**
	     * Called when the light picker's configuration changes.
	     */
	    private onLightsChange(event);
	    /**
	     * Implemented by subclasses if the pass uses lights to update the shader.
	     */
	    pUpdateLights(): void;
	    _iIncludeDependencies(shaderObject: ShaderObjectBase): void;
	    _iInitConstantData(shaderObject: ShaderObjectBase): void;
	    _iGetPreLightingVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPreLightingFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetNormalVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetNormalFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * Indicates whether or not normals are calculated at all.
	     */
	    _pOutputsNormals(shaderObject: ShaderObjectBase): boolean;
	    /**
	     * Indicates whether or not normals are calculated in tangent space.
	     */
	    _pOutputsTangentNormals(shaderObject: ShaderObjectBase): boolean;
	    /**
	     * Indicates whether or not normals are allowed in tangent space. This is only the case if no object-space
	     * dependencies exist.
	     */
	    _pUsesTangentSpace(shaderObject: ShaderObjectBase): boolean;
	    _iAddMaterialPassData(materialPassData: MaterialPassData): MaterialPassData;
	    _iRemoveMaterialPassData(materialPassData: MaterialPassData): MaterialPassData;
	}
	export = MaterialPassGLBase;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderCompilerBase" {
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * ShaderCompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a
	 * material. Concrete subclasses are used by the default materials.
	 *
	 * @see away.materials.ShadingMethodBase
	 */
	class ShaderCompilerBase {
	    _pShaderObject: ShaderObjectBase;
	    _pSharedRegisters: ShaderRegisterData;
	    _pRegisterCache: ShaderRegisterCache;
	    _pMaterialPass: MaterialPassGLBase;
	    _pMaterial: MaterialGLBase;
	    _pVertexCode: string;
	    _pFragmentCode: string;
	    _pPostAnimationFragmentCode: string;
	    _pAnimatableAttributes: string[];
	    _pAnimationTargetRegisters: string[];
	    private _uvTarget;
	    private _uvSource;
	    _pProfile: string;
	    /**
	     * Creates a new ShaderCompilerBase object.
	     * @param profile The compatibility profile of the renderer.
	     */
	    constructor(material: MaterialGLBase, materialPass: MaterialPassGLBase, shaderObject: ShaderObjectBase);
	    /**
	     * Compiles the code after all setup on the compiler has finished.
	     */
	    compile(): void;
	    /**
	     * Compile the code for the methods.
	     */
	    pCompileDependencies(): void;
	    private compileGlobalPositionCode();
	    /**
	     * Calculate the (possibly animated) UV coordinates.
	     */
	    private compileUVCode();
	    /**
	     * Provide the secondary UV coordinates.
	     */
	    private compileSecondaryUVCode();
	    /**
	     * Calculate the view direction.
	     */
	    compileViewDirCode(): void;
	    /**
	     * Calculate the normal.
	     */
	    compileNormalCode(): void;
	    /**
	     * Reset all the indices to "unused".
	     */
	    pInitRegisterIndices(): void;
	    /**
	     * Figure out which named registers are required, and how often.
	     */
	    pCalculateDependencies(): void;
	    /**
	     * Disposes all resources used by the compiler.
	     */
	    dispose(): void;
	    /**
	     * The generated vertex code.
	     */
	    vertexCode: string;
	    /**
	     * The generated fragment code.
	     */
	    fragmentCode: string;
	    /**
	     * The generated fragment code.
	     */
	    postAnimationFragmentCode: string;
	    /**
	     * The register name containing the final shaded colour.
	     */
	    shadedTarget: string;
	}
	export = ShaderCompilerBase;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderObjectBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import ShaderCompilerBase = require("awayjs-renderergl/lib/compilation/ShaderCompilerBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * ShaderObjectBase keeps track of the number of dependencies for "named registers" used across a pass.
	 * Named registers are that are not necessarily limited to a single method. They are created by the compiler and
	 * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed
	 * each time a method has been compiled into the shader.
	 *
	 * @see RegisterPool.addUsage
	 */
	class ShaderObjectBase {
	    private _defaultCulling;
	    _pInverseSceneMatrix: number[];
	    animationRegisterCache: AnimationRegisterCache;
	    profile: string;
	    /**
	     * The amount of used vertex constants in the vertex code. Used by the animation code generation to know from which index on registers are available.
	     */
	    numUsedVertexConstants: number;
	    /**
	     * The amount of used fragment constants in the fragment code. Used by the animation code generation to know from which index on registers are available.
	     */
	    numUsedFragmentConstants: number;
	    /**
	     * The amount of used vertex streams in the vertex code. Used by the animation code generation to know from which index on streams are available.
	     */
	    numUsedStreams: number;
	    /**
	     *
	     */
	    numUsedTextures: number;
	    /**
	     *
	     */
	    numUsedVaryings: number;
	    animatableAttributes: string[];
	    animationTargetRegisters: string[];
	    uvSource: string;
	    uvTarget: string;
	    useAlphaPremultiplied: boolean;
	    useBothSides: boolean;
	    useMipmapping: boolean;
	    useSmoothTextures: boolean;
	    repeatTextures: boolean;
	    usesUVTransform: boolean;
	    alphaThreshold: number;
	    texture: Texture2DBase;
	    color: number;
	    ambientR: number;
	    ambientG: number;
	    ambientB: number;
	    /**
	     * Indicates whether the pass requires any fragment animation code.
	     */
	    usesFragmentAnimation: boolean;
	    /**
	     * The amount of dependencies on the projected position.
	     */
	    projectionDependencies: number;
	    /**
	     * The amount of dependencies on the normal vector.
	     */
	    normalDependencies: number;
	    /**
	     * The amount of dependencies on the view direction.
	     */
	    viewDirDependencies: number;
	    /**
	     * The amount of dependencies on the primary UV coordinates.
	     */
	    uvDependencies: number;
	    /**
	     * The amount of dependencies on the secondary UV coordinates.
	     */
	    secondaryUVDependencies: number;
	    /**
	     * The amount of dependencies on the local position. This can be 0 while hasGlobalPosDependencies is true when
	     * the global position is used as a temporary value (fe to calculate the view direction)
	     */
	    localPosDependencies: number;
	    /**
	     * The amount of dependencies on the global position. This can be 0 while hasGlobalPosDependencies is true when
	     * the global position is used as a temporary value (fe to calculate the view direction)
	     */
	    globalPosDependencies: number;
	    /**
	     * The amount of tangent vector dependencies (fragment shader).
	     */
	    tangentDependencies: number;
	    /**
	     *
	     */
	    outputsNormals: boolean;
	    /**
	     * Indicates whether or not normal calculations are expected in tangent space. This is only the case if no world-space
	     * dependencies exist.
	     */
	    usesTangentSpace: boolean;
	    /**
	     * Indicates whether or not normal calculations are output in tangent space.
	     */
	    outputsTangentNormals: boolean;
	    /**
	     * Indicates whether there are any dependencies on the world-space position vector.
	     */
	    usesGlobalPosFragment: boolean;
	    vertexConstantData: number[];
	    fragmentConstantData: number[];
	    /**
	     * The index for the common data register.
	     */
	    commonsDataIndex: number;
	    /**
	     * The index for the UV vertex attribute stream.
	     */
	    uvBufferIndex: number;
	    /**
	     * The index for the secondary UV vertex attribute stream.
	     */
	    secondaryUVBufferIndex: number;
	    /**
	     * The index for the vertex normal attribute stream.
	     */
	    normalBufferIndex: number;
	    /**
	     * The index for the vertex tangent attribute stream.
	     */
	    tangentBufferIndex: number;
	    /**
	     * The index of the vertex constant containing the view matrix.
	     */
	    viewMatrixIndex: number;
	    /**
	     * The index of the vertex constant containing the scene matrix.
	     */
	    sceneMatrixIndex: number;
	    /**
	     * The index of the vertex constant containing the uniform scene matrix (the inverse transpose).
	     */
	    sceneNormalMatrixIndex: number;
	    /**
	     * The index of the vertex constant containing the camera position.
	     */
	    cameraPositionIndex: number;
	    /**
	     * The index for the UV transformation matrix vertex constant.
	     */
	    uvTransformIndex: number;
	    /**
	     * Creates a new MethodCompilerVO object.
	     */
	    constructor(profile: any);
	    /**
	     * Factory method to create a concrete compiler object for this object
	     *
	     * @param materialPassVO
	     * @returns {away.materials.ShaderCompilerBase}
	     */
	    createCompiler(material: MaterialGLBase, materialPass: MaterialPassGLBase): ShaderCompilerBase;
	    /**
	     * Clears dependency counts for all registers. Called when recompiling a pass.
	     */
	    reset(): void;
	    pInitRegisterIndices(): void;
	    /**
	     * Initializes the unchanging constant data for this shader object.
	     */
	    initConstantData(registerCache: ShaderRegisterCache, animatableAttributes: string[], animationTargetRegisters: string[], uvSource: string, uvTarget: string): void;
	    /**
	     * @inheritDoc
	     */
	    iActivate(stage: Stage, camera: Camera): void;
	    /**
	     * @inheritDoc
	     */
	    iDeactivate(stage: Stage): void;
	    /**
	     *
	     *
	     * @param renderable
	     * @param stage
	     * @param camera
	     */
	    setRenderState(renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    dispose(): void;
	}
	export = ShaderObjectBase;
	
}
declare module "awayjs-renderergl/lib/animators/AnimationSetBase" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 * Provides an abstract base class for data set classes that hold animation data for use in animator classes.
	 *
	 * @see away.animators.AnimatorBase
	 */
	class AnimationSetBase extends NamedAssetBase implements IAsset {
	    private _usesCPU;
	    private _animations;
	    private _animationNames;
	    private _animationDictionary;
	    constructor();
	    /**
	     * Retrieves a temporary GPU register that's still free.
	     *
	     * @param exclude An array of non-free temporary registers.
	     * @param excludeAnother An additional register that's not free.
	     * @return A temporary register that can be used.
	     */
	    _pFindTempReg(exclude: string[], excludeAnother?: string): string;
	    /**
	     * Indicates whether the properties of the animation data contained within the set combined with
	     * the vertex registers already in use on shading materials allows the animation data to utilise
	     * GPU calls.
	     */
	    usesCPU: boolean;
	    /**
	     * Called by the material to reset the GPU indicator before testing whether register space in the shader
	     * is available for running GPU-based animation code.
	     *
	     * @private
	     */
	    resetGPUCompatibility(): void;
	    cancelGPUCompatibility(): void;
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    activate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    deactivate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    getAGALFragmentCode(shaderObject: ShaderObjectBase, shadedTarget: string): string;
	    /**
	     * @inheritDoc
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    doneAGALCode(shaderObject: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    /**
	     * Returns a vector of animation state objects that make up the contents of the animation data set.
	     */
	    animations: AnimationNodeBase[];
	    /**
	     * Returns a vector of animation state objects that make up the contents of the animation data set.
	     */
	    animationNames: string[];
	    /**
	     * Check to determine whether a state is registered in the animation set under the given name.
	     *
	     * @param stateName The name of the animation state object to be checked.
	     */
	    hasAnimation(name: string): boolean;
	    /**
	     * Retrieves the animation state object registered in the animation data set under the given name.
	     *
	     * @param stateName The name of the animation state object to be retrieved.
	     */
	    getAnimation(name: string): AnimationNodeBase;
	    /**
	     * Adds an animation state object to the aniamtion data set under the given name.
	     *
	     * @param stateName The name under which the animation state object will be stored.
	     * @param animationState The animation state object to be staored in the set.
	     */
	    addAnimation(node: AnimationNodeBase): void;
	    /**
	     * Cleans up any resources used by the current object.
	     */
	    dispose(): void;
	}
	export = AnimationSetBase;
	
}
declare module "awayjs-renderergl/lib/pool/BillboardRenderable" {
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import Billboard = require("awayjs-display/lib/entities/Billboard");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * @class away.pool.RenderableListItem
	 */
	class BillboardRenderable extends RenderableBase {
	    private static _materialGeometry;
	    /**
	     *
	     */
	    static id: string;
	    /**
	     *
	     */
	    private _billboard;
	    /**
	     * //TODO
	     *
	     * @param pool
	     * @param billboard
	     */
	    constructor(pool: RenderablePool, billboard: Billboard);
	    /**
	     * //TODO
	     *
	     * @returns {away.base.TriangleSubGeometry}
	     */
	    _pGetSubGeometry(): SubGeometryBase;
	}
	export = BillboardRenderable;
	
}
declare module "awayjs-renderergl/lib/pool/LineSubMeshRenderable" {
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import LineSubMesh = require("awayjs-display/lib/base/LineSubMesh");
	import LineSubGeometry = require("awayjs-display/lib/base/LineSubGeometry");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * @class away.pool.LineSubMeshRenderable
	 */
	class LineSubMeshRenderable extends RenderableBase {
	    /**
	     *
	     */
	    static id: string;
	    /**
	     *
	     */
	    subMesh: LineSubMesh;
	    /**
	     * //TODO
	     *
	     * @param pool
	     * @param subMesh
	     * @param level
	     * @param dataOffset
	     */
	    constructor(pool: RenderablePool, subMesh: LineSubMesh, level?: number, indexOffset?: number);
	    /**
	     * //TODO
	     *
	     * @returns {base.LineSubGeometry}
	     * @protected
	     */
	    _pGetSubGeometry(): LineSubGeometry;
	    /**
	     * //TODO
	     *
	     * @param pool
	     * @param materialOwner
	     * @param level
	     * @param indexOffset
	     * @returns {away.pool.LineSubMeshRenderable}
	     * @private
	     */
	    _pGetOverflowRenderable(pool: RenderablePool, materialOwner: IMaterialOwner, level: number, indexOffset: number): RenderableBase;
	}
	export = LineSubMeshRenderable;
	
}
declare module "awayjs-renderergl/lib/pool/MaterialDataPool" {
	import MaterialData = require("awayjs-renderergl/lib/pool/MaterialData");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	/**
	 * @class away.pool.MaterialDataPool
	 */
	class MaterialDataPool {
	    private _pool;
	    /**
	     * //TODO
	     *
	     * @param textureDataClass
	     */
	    constructor();
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     * @returns ITexture
	     */
	    getItem(material: MaterialGLBase): MaterialData;
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     */
	    disposeItem(material: MaterialGLBase): void;
	}
	export = MaterialDataPool;
	
}
declare module "awayjs-renderergl/lib/pool/MaterialData" {
	import IMaterialData = require("awayjs-display/lib/pool/IMaterialData");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	import MaterialDataPool = require("awayjs-renderergl/lib/pool/MaterialDataPool");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	/**
	 *
	 * @class away.pool.MaterialData
	 */
	class MaterialData implements IMaterialData {
	    private _pool;
	    private _materialPassDataPool;
	    private _passes;
	    material: MaterialGLBase;
	    renderOrderId: number;
	    invalidAnimation: boolean;
	    constructor(pool: MaterialDataPool, material: MaterialGLBase);
	    getMaterialPass(materialPass: MaterialPassGLBase, profile: string): MaterialPassData;
	    getMaterialPasses(profile: string): MaterialPassData[];
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    invalidateMaterial(): void;
	    /**
	     *
	     */
	    invalidateAnimation(): void;
	}
	export = MaterialData;
	
}
declare module "awayjs-renderergl/lib/managers/RTTBufferManager" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import IIndexBuffer = require("awayjs-stagegl/lib/base/IIndexBuffer");
	import IVertexBuffer = require("awayjs-stagegl/lib/base/IVertexBuffer");
	class RTTBufferManager extends EventDispatcher {
	    private static _instances;
	    private _renderToTextureVertexBuffer;
	    private _renderToScreenVertexBuffer;
	    private _indexBuffer;
	    private _stage;
	    private _viewWidth;
	    private _viewHeight;
	    private _textureWidth;
	    private _textureHeight;
	    private _renderToTextureRect;
	    private _buffersInvalid;
	    private _textureRatioX;
	    private _textureRatioY;
	    constructor(stage: Stage);
	    static getInstance(stage: Stage): RTTBufferManager;
	    private static getRTTBufferManagerFromStage(stage);
	    private static deleteRTTBufferManager(stage);
	    textureRatioX: number;
	    textureRatioY: number;
	    viewWidth: number;
	    viewHeight: number;
	    renderToTextureVertexBuffer: IVertexBuffer;
	    renderToScreenVertexBuffer: IVertexBuffer;
	    indexBuffer: IIndexBuffer;
	    renderToTextureRect: Rectangle;
	    textureWidth: number;
	    textureHeight: number;
	    dispose(): void;
	    private updateRTTBuffers();
	}
	export = RTTBufferManager;
	
}
declare module "awayjs-renderergl/lib/passes/LineBasicPass" {
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * LineBasicPass is a material pass that draws wireframe segments.
	 */
	class LineBasicPass extends MaterialPassGLBase {
	    /**
	     * Creates a new SegmentPass object.
	     *
	     * @param material The material to which this pass belongs.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, regCache: ShaderRegisterCache, sharedReg: ShaderRegisterData): string;
	}
	export = LineBasicPass;
	
}
declare module "awayjs-renderergl/lib/materials/LineBasicMaterial" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	/**
	 * LineMaterial is a material exclusively used to render wireframe objects
	 *
	 * @see away.entities.Lines
	 */
	class LineBasicMaterial extends MaterialGLBase {
	    static pONE_VECTOR: number[];
	    static pFRONT_VECTOR: number[];
	    private _constants;
	    private _calcMatrix;
	    private _thickness;
	    private _screenPass;
	    /**
	     * Creates a new LineMaterial object.
	     *
	     * @param thickness The thickness of the wireframe lines.
	     */
	    constructor(thickness?: number);
	    /**
	     * @inheritDoc
	     */
	    _iGetVertexCode(shaderObject: ShaderObjectBase, regCache: ShaderRegisterCache, sharedReg: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iActivatePass(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	    /**
	     * @inheritDoc
	     */
	    _iRenderPass(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	}
	export = LineBasicMaterial;
	
}
declare module "awayjs-renderergl/lib/materials/TriangleMaterialBase" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	/**
	 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
	 * using material methods to define their appearance.
	 */
	class TriangleMaterialBase extends MaterialGLBase {
	    _iGetVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iRenderPass(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	}
	export = TriangleMaterialBase;
	
}
declare module "awayjs-renderergl/lib/events/ShadingMethodEvent" {
	import Event = require("awayjs-core/lib/events/Event");
	class ShadingMethodEvent extends Event {
	    static SHADER_INVALIDATED: string;
	    constructor(type: string);
	}
	export = ShadingMethodEvent;
	
}
declare module "awayjs-renderergl/lib/utils/ShaderCompilerHelper" {
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	class ShaderCompilerHelper {
	    /**
	     * A helper method that generates standard code for sampling from a texture using the normal uv coordinates.
	     * @param vo The MethodVO object linking this method with the pass currently being compiled.
	     * @param sharedReg The shared register object for the shader.
	     * @param inputReg The texture stream register.
	     * @param texture The texture which will be assigned to the given slot.
	     * @param uvReg An optional uv register if coordinates different from the primary uv coordinates are to be used.
	     * @param forceWrap If true, texture wrapping is enabled regardless of the material setting.
	     * @return The fragment code that performs the sampling.
	     *
	     * @protected
	     */
	    static getTex2DSampleCode(targetReg: ShaderRegisterElement, sharedReg: ShaderRegisterData, inputReg: ShaderRegisterElement, texture: TextureProxyBase, smooth: boolean, repeat: boolean, mipmaps: boolean, uvReg?: ShaderRegisterElement, forceWrap?: string): string;
	    /**
	     * A helper method that generates standard code for sampling from a cube texture.
	     * @param vo The MethodVO object linking this method with the pass currently being compiled.
	     * @param targetReg The register in which to store the sampled colour.
	     * @param inputReg The texture stream register.
	     * @param texture The cube map which will be assigned to the given slot.
	     * @param uvReg The direction vector with which to sample the cube map.
	     *
	     * @protected
	     */
	    static getTexCubeSampleCode(targetReg: ShaderRegisterElement, inputReg: ShaderRegisterElement, texture: TextureProxyBase, smooth: boolean, mipmaps: boolean, uvReg: ShaderRegisterElement): string;
	    /**
	     * Generates a texture format string for the sample instruction.
	     * @param texture The texture for which to get the format string.
	     * @return
	     *
	     * @protected
	     */
	    static getFormatStringForTexture(texture: TextureProxyBase): string;
	}
	export = ShaderCompilerHelper;
	
}
declare module "awayjs-renderergl/lib/passes/TriangleBasicPass" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
	 * using material methods to define their appearance.
	 */
	class TriangleBasicPass extends MaterialPassGLBase {
	    private _diffuseColor;
	    private _diffuseR;
	    private _diffuseG;
	    private _diffuseB;
	    private _diffuseA;
	    private _fragmentConstantsIndex;
	    private _texturesIndex;
	    /**
	     * The alpha component of the diffuse reflection.
	     */
	    diffuseAlpha: number;
	    /**
	     * The color of the diffuse reflection when not using a texture.
	     */
	    diffuseColor: number;
	    /**
	     * Creates a new CompiledPass object.
	     *
	     * @param material The material to which this pass belongs.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, regCache: ShaderRegisterCache, sharedReg: ShaderRegisterData): string;
	    _iIncludeDependencies(dependencyCounter: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    _iActivate(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	}
	export = TriangleBasicPass;
	
}
declare module "awayjs-renderergl/lib/materials/TriangleBasicMaterial" {
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import TriangleMaterialBase = require("awayjs-renderergl/lib/materials/TriangleMaterialBase");
	/**
	 * TriangleMaterial forms an abstract base class for the default shaded materials provided by Stage,
	 * using material methods to define their appearance.
	 */
	class TriangleBasicMaterial extends TriangleMaterialBase {
	    private _screenPass;
	    private _alphaBlending;
	    private _alpha;
	    private _depthCompareMode;
	    /**
	     * Creates a new TriangleMaterial object.
	     *
	     * @param texture The texture used for the material's albedo color.
	     * @param smooth Indicates whether the texture should be filtered when sampled. Defaults to true.
	     * @param repeat Indicates whether the texture should be tiled when sampled. Defaults to false.
	     * @param mipmap Indicates whether or not any used textures should use mipmapping. Defaults to false.
	     */
	    constructor(texture?: Texture2DBase, smooth?: boolean, repeat?: boolean, mipmap?: boolean);
	    constructor(color?: number, alpha?: number);
	    /**
	     * The depth compare mode used to render the renderables using this material.
	     *
	     * @see away.stagegl.ContextGLCompareMode
	     */
	    depthCompareMode: string;
	    /**
	     * The alpha of the surface.
	     */
	    alpha: number;
	    /**
	     * Indicates whether or not the material has transparency. If binary transparency is sufficient, for
	     * example when using textures of foliage, consider using alphaThreshold instead.
	     */
	    alphaBlending: boolean;
	    /**
	     * @inheritDoc
	     */
	    _iUpdateMaterial(): void;
	    /**
	     * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.
	     */
	    private setBlendAndCompareModes();
	}
	export = TriangleBasicMaterial;
	
}
declare module "awayjs-renderergl/lib/managers/DefaultMaterialManager" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
	import IMaterialOwner = require("awayjs-display/lib/base/IMaterialOwner");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	class DefaultMaterialManager {
	    private static _defaultBitmapData;
	    private static _defaultTriangleMaterial;
	    private static _defaultLineMaterial;
	    private static _defaultTexture;
	    static getDefaultMaterial(materialOwner?: IMaterialOwner): MaterialGLBase;
	    static getDefaultTexture(materialOwner?: IMaterialOwner): BitmapTexture;
	    private static createDefaultTexture();
	    static createCheckeredBitmapData(): BitmapData;
	    private static createDefaultTriangleMaterial();
	    private static createDefaultLineMaterial();
	}
	export = DefaultMaterialManager;
	
}
declare module "awayjs-renderergl/lib/base/RendererBase" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import LineSubMesh = require("awayjs-display/lib/base/LineSubMesh");
	import TriangleSubMesh = require("awayjs-display/lib/base/TriangleSubMesh");
	import IEntitySorter = require("awayjs-display/lib/sort/IEntitySorter");
	import Billboard = require("awayjs-display/lib/entities/Billboard");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import StageEvent = require("awayjs-display/lib/events/StageEvent");
	import MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import ShadowCasterCollector = require("awayjs-display/lib/traverse/ShadowCasterCollector");
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ProgramData = require("awayjs-stagegl/lib/pool/ProgramData");
	import MaterialData = require("awayjs-renderergl/lib/pool/MaterialData");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import RTTBufferManager = require("awayjs-renderergl/lib/managers/RTTBufferManager");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	/**
	 * RendererBase forms an abstract base class for classes that are used in the rendering pipeline to render the
	 * contents of a partition
	 *
	 * @class away.render.RendererBase
	 */
	class RendererBase extends EventDispatcher {
	    private _numUsedStreams;
	    private _numUsedTextures;
	    private _materialDataPool;
	    private _billboardRenderablePool;
	    private _triangleSubMeshRenderablePool;
	    private _lineSubMeshRenderablePool;
	    _pContext: IContextGL;
	    _pStage: Stage;
	    _pCamera: Camera;
	    _iEntryPoint: Vector3D;
	    _pCameraForward: Vector3D;
	    _pRttBufferManager: RTTBufferManager;
	    private _viewPort;
	    private _viewportDirty;
	    private _scissorDirty;
	    _pBackBufferInvalid: boolean;
	    _pDepthTextureInvalid: boolean;
	    _depthPrepass: boolean;
	    private _backgroundR;
	    private _backgroundG;
	    private _backgroundB;
	    private _backgroundAlpha;
	    _shareContext: boolean;
	    _width: number;
	    _height: number;
	    textureRatioX: number;
	    textureRatioY: number;
	    private _snapshotBitmapData;
	    private _snapshotRequired;
	    _pRttViewProjectionMatrix: Matrix3D;
	    private _localPos;
	    private _globalPos;
	    _pScissorRect: Rectangle;
	    private _scissorUpdated;
	    private _viewPortUpdated;
	    private _onContextUpdateDelegate;
	    private _onViewportUpdatedDelegate;
	    _pNumTriangles: number;
	    _pOpaqueRenderableHead: RenderableBase;
	    _pBlendedRenderableHead: RenderableBase;
	    /**
	     *
	     */
	    numTriangles: number;
	    /**
	     *
	     */
	    renderableSorter: IEntitySorter;
	    /**
	     * A viewPort rectangle equivalent of the Stage size and position.
	     */
	    viewPort: Rectangle;
	    /**
	     * A scissor rectangle equivalent of the view size and position.
	     */
	    scissorRect: Rectangle;
	    /**
	     *
	     */
	    x: number;
	    /**
	     *
	     */
	    y: number;
	    /**
	     *
	     */
	    width: number;
	    /**
	     *
	     */
	    height: number;
	    /**
	     * Creates a new RendererBase object.
	     */
	    constructor();
	    getProgram(materialPassData: MaterialPassData): ProgramData;
	    /**
	     *
	     * @param material
	     */
	    getMaterial(material: MaterialGLBase, profile: string): MaterialData;
	    activateMaterialPass(materialPassData: MaterialPassData, camera: Camera): void;
	    deactivateMaterialPass(materialPassData: MaterialPassData): void;
	    _iCreateEntityCollector(): ICollector;
	    /**
	     * The background color's red component, used when clearing.
	     *
	     * @private
	     */
	    _iBackgroundR: number;
	    /**
	     * The background color's green component, used when clearing.
	     *
	     * @private
	     */
	    _iBackgroundG: number;
	    /**
	     * The background color's blue component, used when clearing.
	     *
	     * @private
	     */
	    _iBackgroundB: number;
	    context: IContextGL;
	    /**
	     * The Stage that will provide the ContextGL used for rendering.
	     */
	    stage: Stage;
	    iSetStage(value: Stage): void;
	    /**
	     * Defers control of ContextGL clear() and present() calls to Stage, enabling multiple Stage frameworks
	     * to share the same ContextGL object.
	     */
	    shareContext: boolean;
	    /**
	     * Disposes the resources used by the RendererBase.
	     */
	    dispose(): void;
	    render(entityCollector: ICollector): void;
	    /**
	     * Renders the potentially visible geometry to the back buffer or texture.
	     * @param entityCollector The EntityCollector object containing the potentially visible geometry.
	     * @param target An option target texture to render to.
	     * @param surfaceSelector The index of a CubeTexture's face to render to.
	     * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.
	     */
	    _iRender(entityCollector: ICollector, target?: TextureProxyBase, scissorRect?: Rectangle, surfaceSelector?: number): void;
	    _iRenderCascades(entityCollector: ShadowCasterCollector, target: TextureProxyBase, numCascades: number, scissorRects: Rectangle[], cameras: Camera[]): void;
	    pCollectRenderables(entityCollector: ICollector): void;
	    /**
	     * Renders the potentially visible geometry to the back buffer or texture. Only executed if everything is set up.
	     *
	     * @param entityCollector The EntityCollector object containing the potentially visible geometry.
	     * @param target An option target texture to render to.
	     * @param surfaceSelector The index of a CubeTexture's face to render to.
	     * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.
	     */
	    pExecuteRender(entityCollector: ICollector, target?: TextureProxyBase, scissorRect?: Rectangle, surfaceSelector?: number): void;
	    queueSnapshot(bmd: BitmapData): void;
	    /**
	     * Performs the actual drawing of geometry to the target.
	     * @param entityCollector The EntityCollector object containing the potentially visible geometry.
	     */
	    pDraw(entityCollector: ICollector, target: TextureProxyBase): void;
	    /**
	     * Assign the context once retrieved
	     */
	    private onContextUpdate(event);
	    _iBackgroundAlpha: number;
	    /**
	     * @private
	     */
	    private notifyScissorUpdate();
	    /**
	     * @private
	     */
	    private notifyViewportUpdate();
	    /**
	     *
	     */
	    onViewportUpdated(event: StageEvent): void;
	    /**
	     *
	     */
	    updateGlobalPos(): void;
	    /**
	     *
	     * @param billboard
	     * @protected
	     */
	    applyBillboard(billboard: Billboard): void;
	    /**
	     *
	     * @param triangleSubMesh
	     */
	    applyTriangleSubMesh(triangleSubMesh: TriangleSubMesh): void;
	    /**
	     *
	     * @param lineSubMesh
	     */
	    applyLineSubMesh(lineSubMesh: LineSubMesh): void;
	    /**
	     *
	     * @param renderable
	     * @protected
	     */
	    private _applyRenderable(renderable);
	    /**
	     * test if animation will be able to run on gpu BEFORE compiling materials
	     * test if the shader objects supports animating the animation set in the vertex shader
	     * if any object using this material fails to support accelerated animations for any of the shader objects,
	     * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)
	     */
	    private getEnabledGPUAnimation(material, materialDataPasses);
	    calcAnimationCode(material: MaterialBase, materialPassData: MaterialPassData): void;
	}
	export = RendererBase;
	
}
declare module "awayjs-renderergl/lib/DepthRenderer" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import EntityCollector = require("awayjs-display/lib/traverse/EntityCollector");
	import ShadowCasterCollector = require("awayjs-display/lib/traverse/ShadowCasterCollector");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * The DepthRenderer class renders 32-bit depth information encoded as RGBA
	 *
	 * @class away.render.DepthRenderer
	 */
	class DepthRenderer extends RendererBase {
	    private _pass;
	    private _renderBlended;
	    private _disableColor;
	    /**
	     * Creates a new DepthRenderer object.
	     * @param renderBlended Indicates whether semi-transparent objects should be rendered.
	     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based
	     */
	    constructor(pass: MaterialPassGLBase, renderBlended?: boolean);
	    disableColor: boolean;
	    _iRenderCascades(entityCollector: ShadowCasterCollector, target: TextureProxyBase, numCascades: number, scissorRects: Rectangle[], cameras: Camera[]): void;
	    private drawCascadeRenderables(renderable, camera, cullPlanes);
	    /**
	     * @inheritDoc
	     */
	    pDraw(entityCollector: EntityCollector, target: TextureProxyBase): void;
	    /**
	     * Draw a list of renderables.
	     * @param renderables The renderables to draw.
	     * @param entityCollector The EntityCollector containing all potentially visible information.
	     */
	    private drawRenderables(renderable, entityCollector);
	}
	export = DepthRenderer;
	
}
declare module "awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import IProgram = require("awayjs-stagegl/lib/base/IProgram");
	import ITexture = require("awayjs-stagegl/lib/base/ITexture");
	class Filter3DTaskBase {
	    private _mainInputTexture;
	    private _scaledTextureWidth;
	    private _scaledTextureHeight;
	    private _textureWidth;
	    private _textureHeight;
	    private _textureDimensionsInvalid;
	    private _program3DInvalid;
	    private _program3D;
	    private _target;
	    private _requireDepthRender;
	    private _textureScale;
	    constructor(requireDepthRender?: boolean);
	    /**
	     * The texture scale for the input of this texture. This will define the output of the previous entry in the chain
	     */
	    textureScale: number;
	    target: ITexture;
	    textureWidth: number;
	    textureHeight: number;
	    getMainInputTexture(stage: Stage): ITexture;
	    dispose(): void;
	    pInvalidateProgram(): void;
	    pUpdateProgram(stage: Stage): void;
	    pGetVertexCode(): string;
	    pGetFragmentCode(): string;
	    pUpdateTextures(stage: Stage): void;
	    getProgram(stage: Stage): IProgram;
	    activate(stage: Stage, camera: Camera, depthTexture: ITexture): void;
	    deactivate(stage: Stage): void;
	    requireDepthRender: boolean;
	}
	export = Filter3DTaskBase;
	
}
declare module "awayjs-renderergl/lib/filters/Filter3DBase" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ITexture = require("awayjs-stagegl/lib/base/ITexture");
	import Filter3DTaskBase = require("awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase");
	class Filter3DBase {
	    private _tasks;
	    private _requireDepthRender;
	    private _textureWidth;
	    private _textureHeight;
	    constructor();
	    requireDepthRender: boolean;
	    pAddTask(filter: Filter3DTaskBase): void;
	    tasks: Filter3DTaskBase[];
	    getMainInputTexture(stage: Stage): ITexture;
	    textureWidth: number;
	    textureHeight: number;
	    setRenderTargets(mainTarget: ITexture, stage: Stage): void;
	    dispose(): void;
	    update(stage: Stage, camera: Camera): void;
	}
	export = Filter3DBase;
	
}
declare module "awayjs-renderergl/lib/Filter3DRenderer" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ITexture = require("awayjs-stagegl/lib/base/ITexture");
	import Filter3DBase = require("awayjs-renderergl/lib/filters/Filter3DBase");
	/**
	 * @class away.render.Filter3DRenderer
	 */
	class Filter3DRenderer {
	    private _filters;
	    private _tasks;
	    private _filterTasksInvalid;
	    private _mainInputTexture;
	    private _requireDepthRender;
	    private _rttManager;
	    private _stage;
	    private _filterSizesInvalid;
	    private _onRTTResizeDelegate;
	    constructor(stage: Stage);
	    private onRTTResize(event);
	    requireDepthRender: boolean;
	    getMainInputTexture(stage: Stage): ITexture;
	    filters: Filter3DBase[];
	    private updateFilterTasks(stage);
	    render(stage: Stage, camera: Camera, depthTexture: ITexture): void;
	    private updateFilterSizes();
	    dispose(): void;
	}
	export = Filter3DRenderer;
	
}
declare module "awayjs-renderergl/lib/pool/SkyboxRenderable" {
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	import RenderablePool = require("awayjs-display/lib/pool/RenderablePool");
	import Skybox = require("awayjs-display/lib/entities/Skybox");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * @class away.pool.SkyboxRenderable
	 */
	class SkyboxRenderable extends RenderableBase {
	    /**
	     *
	     */
	    static id: string;
	    /**
	     *
	     */
	    private static _geometry;
	    /**
	     * //TODO
	     *
	     * @param pool
	     * @param skybox
	     */
	    constructor(pool: RenderablePool, skybox: Skybox);
	    /**
	     * //TODO
	     *
	     * @returns {away.base.TriangleSubGeometry}
	     * @private
	     */
	    _pGetSubGeometry(): TriangleSubGeometry;
	}
	export = SkyboxRenderable;
	
}
declare module "awayjs-renderergl/lib/passes/DepthMapPass" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * DepthMapPass is a pass that writes depth values to a depth map as a 32-bit value exploded over the 4 texture channels.
	 * This is used to render shadow maps, depth maps, etc.
	 */
	class DepthMapPass extends MaterialPassGLBase {
	    private _fragmentConstantsIndex;
	    private _texturesIndex;
	    /**
	     * Creates a new DepthMapPass object.
	     *
	     * @param material The material to which this pass belongs.
	     */
	    constructor();
	    /**
	     * Initializes the unchanging constant data for this material.
	     */
	    _iInitConstantData(shaderObject: ShaderObjectBase): void;
	    _iIncludeDependencies(shaderObject: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iRender(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     * @inheritDoc
	     */
	    _iActivate(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	}
	export = DepthMapPass;
	
}
declare module "awayjs-renderergl/lib/passes/DistanceMapPass" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * DistanceMapPass is a pass that writes distance values to a depth map as a 32-bit value exploded over the 4 texture channels.
	 * This is used to render omnidirectional shadow maps.
	 */
	class DistanceMapPass extends MaterialPassGLBase {
	    private _fragmentConstantsIndex;
	    private _texturesIndex;
	    /**
	     * Creates a new DistanceMapPass object.
	     *
	     * @param material The material to which this pass belongs.
	     */
	    constructor();
	    /**
	     * Initializes the unchanging constant data for this material.
	     */
	    _iInitConstantData(shaderObject: ShaderObjectBase): void;
	    _iIncludeDependencies(shaderObject: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iActivate(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	}
	export = DistanceMapPass;
	
}
declare module "awayjs-renderergl/lib/DefaultRenderer" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import IRenderer = require("awayjs-display/lib/render/IRenderer");
	import EntityCollector = require("awayjs-display/lib/traverse/EntityCollector");
	import ICollector = require("awayjs-display/lib/traverse/ICollector");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import Filter3DRenderer = require("awayjs-renderergl/lib/Filter3DRenderer");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import Filter3DBase = require("awayjs-renderergl/lib/filters/Filter3DBase");
	/**
	 * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the
	 * materials assigned to them.
	 *
	 * @class away.render.DefaultRenderer
	 */
	class DefaultRenderer extends RendererBase implements IRenderer {
	    _pRequireDepthRender: boolean;
	    private _skyboxRenderablePool;
	    private _pDistanceRenderer;
	    private _pDepthRenderer;
	    private _skyboxProjection;
	    _pFilter3DRenderer: Filter3DRenderer;
	    _pDepthRender: TextureProxyBase;
	    private _antiAlias;
	    antiAlias: number;
	    /**
	     *
	     */
	    depthPrepass: boolean;
	    /**
	     *
	     * @returns {*}
	     */
	    filters3d: Filter3DBase[];
	    /**
	     * Creates a new DefaultRenderer object.
	     *
	     * @param antiAlias The amount of anti-aliasing to use.
	     * @param renderMode The render mode to use.
	     */
	    constructor(forceSoftware?: boolean, profile?: string, mode?: string);
	    render(entityCollector: ICollector): void;
	    pExecuteRender(entityCollector: EntityCollector, target?: TextureProxyBase, scissorRect?: Rectangle, surfaceSelector?: number): void;
	    private updateLights(entityCollector);
	    /**
	     * @inheritDoc
	     */
	    pDraw(entityCollector: EntityCollector, target: TextureProxyBase): void;
	    /**
	     * Draw the skybox if present.
	     *
	     * @param entityCollector The EntityCollector containing all potentially visible information.
	     */
	    private drawSkybox(entityCollector);
	    private updateSkyboxProjection(camera);
	    /**
	     * Draw a list of renderables.
	     *
	     * @param renderables The renderables to draw.
	     * @param entityCollector The EntityCollector containing all potentially visible information.
	     */
	    private drawRenderables(renderable, entityCollector);
	    dispose(): void;
	    /**
	     *
	     */
	    pRenderDepthPrepass(entityCollector: EntityCollector): void;
	    /**
	     *
	     */
	    pRenderSceneDepthToTexture(entityCollector: EntityCollector): void;
	    /**
	     * Updates the backbuffer dimensions.
	     */
	    pUpdateBackBuffer(): void;
	    iSetStage(value: Stage): void;
	    /**
	     *
	     */
	    private initDepthTexture(context);
	}
	export = DefaultRenderer;
	
}
declare module "awayjs-renderergl/lib/animators/data/ParticleData" {
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	class ParticleData {
	    particleIndex: number;
	    numVertices: number;
	    startVertexIndex: number;
	    subGeometry: TriangleSubGeometry;
	}
	export = ParticleData;
	
}
declare module "awayjs-renderergl/lib/base/ParticleGeometry" {
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import ParticleData = require("awayjs-renderergl/lib/animators/data/ParticleData");
	/**
	 * @class away.base.ParticleGeometry
	 */
	class ParticleGeometry extends Geometry {
	    particles: ParticleData[];
	    numParticles: number;
	}
	export = ParticleGeometry;
	
}
declare module "awayjs-renderergl/lib/animators/data/ParticleAnimationData" {
	import ParticleData = require("awayjs-renderergl/lib/animators/data/ParticleData");
	/**
	 * ...
	 */
	class ParticleAnimationData {
	    index: number;
	    startTime: number;
	    totalTime: number;
	    duration: number;
	    delay: number;
	    startVertexIndex: number;
	    numVertices: number;
	    constructor(index: number, startTime: number, duration: number, delay: number, particle: ParticleData);
	}
	export = ParticleAnimationData;
	
}
declare module "awayjs-renderergl/lib/animators/data/AnimationSubGeometry" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import IVertexBuffer = require("awayjs-stagegl/lib/base/IVertexBuffer");
	import ParticleAnimationData = require("awayjs-renderergl/lib/animators/data/ParticleAnimationData");
	/**
	 * ...
	 */
	class AnimationSubGeometry {
	    static SUBGEOM_ID_COUNT: number;
	    _pVertexData: number[];
	    _pVertexBuffer: IVertexBuffer[];
	    _pBufferContext: IContextGL[];
	    _pBufferDirty: boolean[];
	    private _numVertices;
	    private _totalLenOfOneVertex;
	    numProcessedVertices: number;
	    previousTime: number;
	    animationParticles: ParticleAnimationData[];
	    /**
	     * An id for this animation subgeometry, used to identify animation subgeometries when using animation sets.
	     *
	     * @private
	     */
	    _iUniqueId: number;
	    constructor();
	    createVertexData(numVertices: number, totalLenOfOneVertex: number): void;
	    activateVertexBuffer(index: number, bufferOffset: number, stage: Stage, format: string): void;
	    dispose(): void;
	    invalidateBuffer(): void;
	    vertexData: number[];
	    numVertices: number;
	    totalLenOfOneVertex: number;
	}
	export = AnimationSubGeometry;
	
}
declare module "awayjs-renderergl/lib/animators/data/ParticleProperties" {
	/**
	 * Dynamic class for holding the local properties of a particle, used for processing the static properties
	 * of particles in the particle animation set before beginning upload to the GPU.
	 */
	class ParticleProperties {
	    /**
	     * The index of the current particle being set.
	     */
	    index: number;
	    /**
	     * The total number of particles being processed by the particle animation set.
	     */
	    total: number;
	    /**
	     * The start time of the particle.
	     */
	    startTime: number;
	    /**
	     * The duration of the particle, an optional value used when the particle aniamtion set settings for <code>useDuration</code> are enabled in the constructor.
	     *
	     * @see away.animators.ParticleAnimationSet
	     */
	    duration: number;
	    /**
	     * The delay between cycles of the particle, an optional value used when the particle aniamtion set settings for <code>useLooping</code> and  <code>useDelay</code> are enabled in the constructor.
	     *
	     * @see away.animators.ParticleAnimationSet
	     */
	    delay: number;
	}
	export = ParticleProperties;
	
}
declare module "awayjs-renderergl/lib/animators/data/ParticlePropertiesMode" {
	/**
	 * Options for setting the properties mode of a particle animation node.
	 */
	class ParticlePropertiesMode {
	    /**
	     * Mode that defines the particle node as acting on global properties (ie. the properties set in the node constructor or the corresponding animation state).
	     */
	    static GLOBAL: number;
	    /**
	     * Mode that defines the particle node as acting on local static properties (ie. the properties of particles set in the initialising on the animation set).
	     */
	    static LOCAL_STATIC: number;
	    /**
	     * Mode that defines the particle node as acting on local dynamic properties (ie. the properties of the particles set in the corresponding animation state).
	     */
	    static LOCAL_DYNAMIC: number;
	}
	export = ParticlePropertiesMode;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleNodeBase" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	/**
	 * Provides an abstract base class for particle animation nodes.
	 */
	class ParticleNodeBase extends AnimationNodeBase {
	    private _priority;
	    _pMode: number;
	    _pDataLength: number;
	    _pOneData: number[];
	    _iDataOffset: number;
	    private static GLOBAL;
	    private static LOCAL_STATIC;
	    private static LOCAL_DYNAMIC;
	    private static MODES;
	    /**
	     * Returns the property mode of the particle animation node. Typically set in the node constructor
	     *
	     * @see away.animators.ParticlePropertiesMode
	     */
	    mode: number;
	    /**
	     * Returns the priority of the particle animation node, used to order the agal generated in a particle animation set. Set automatically on instantiation.
	     *
	     * @see away.animators.ParticleAnimationSet
	     * @see #getAGALVertexCode
	     */
	    priority: number;
	    /**
	     * Returns the length of the data used by the node when in <code>LOCAL_STATIC</code> mode. Used to generate the local static data of the particle animation set.
	     *
	     * @see away.animators.ParticleAnimationSet
	     * @see #getAGALVertexCode
	     */
	    dataLength: number;
	    /**
	     * Returns the generated data vector of the node after one particle pass during the generation of all local static data of the particle animation set.
	     *
	     * @see away.animators.ParticleAnimationSet
	     * @see #generatePropertyOfOneParticle
	     */
	    oneData: number[];
	    /**
	     * Creates a new <code>ParticleNodeBase</code> object.
	     *
	     * @param               name            Defines the generic name of the particle animation node.
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param               dataLength      Defines the length of the data used by the node when in <code>LOCAL_STATIC</code> mode.
	     * @param    [optional] priority        the priority of the particle animation node, used to order the agal generated in a particle animation set. Defaults to 1.
	     */
	    constructor(name: string, mode: number, dataLength: number, priority?: number);
	    /**
	     * Returns the AGAL code of the particle animation node for use in the vertex shader.
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * Returns the AGAL code of the particle animation node for use in the fragment shader.
	     */
	    getAGALFragmentCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * Returns the AGAL code of the particle animation node for use in the fragment shader when UV coordinates are required.
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * Called internally by the particle animation set when assigning the set of static properties originally defined by the initParticleFunc of the set.
	     *
	     * @see away.animators.ParticleAnimationSet#initParticleFunc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	    /**
	     * Called internally by the particle animation set when determining the requirements of the particle animation node AGAL.
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	}
	export = ParticleNodeBase;
	
}
declare module "awayjs-renderergl/lib/events/AnimationStateEvent" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import Event = require("awayjs-core/lib/events/Event");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import IAnimationState = require("awayjs-renderergl/lib/animators/states/IAnimationState");
	/**
	 * Dispatched to notify changes in an animation state's state.
	 */
	class AnimationStateEvent extends Event {
	    /**
	     * Dispatched when a non-looping clip node inside an animation state reaches the end of its timeline.
	     */
	    static PLAYBACK_COMPLETE: string;
	    static TRANSITION_COMPLETE: string;
	    private _animator;
	    private _animationState;
	    private _animationNode;
	    /**
	     * Create a new <code>AnimatonStateEvent</code>
	     *
	     * @param type The event type.
	     * @param animator The animation state object that is the subject of this event.
	     * @param animationNode The animation node inside the animation state from which the event originated.
	     */
	    constructor(type: string, animator: AnimatorBase, animationState: IAnimationState, animationNode: AnimationNodeBase);
	    /**
	     * The animator object that is the subject of this event.
	     */
	    animator: AnimatorBase;
	    /**
	     * The animation state object that is the subject of this event.
	     */
	    animationState: IAnimationState;
	    /**
	     * The animation node inside the animation state from which the event originated.
	     */
	    animationNode: AnimationNodeBase;
	    /**
	     * Clones the event.
	     *
	     * @return An exact duplicate of the current object.
	     */
	    clone(): Event;
	}
	export = AnimationStateEvent;
	
}
declare module "awayjs-renderergl/lib/animators/states/AnimationStateBase" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import IAnimationState = require("awayjs-renderergl/lib/animators/states/IAnimationState");
	/**
	 *
	 */
	class AnimationStateBase implements IAnimationState {
	    _pAnimationNode: AnimationNodeBase;
	    _pRootDelta: Vector3D;
	    _pPositionDeltaDirty: boolean;
	    _pTime: number;
	    _pStartTime: number;
	    _pAnimator: AnimatorBase;
	    /**
	     * Returns a 3d vector representing the translation delta of the animating entity for the current timestep of animation
	     */
	    positionDelta: Vector3D;
	    constructor(animator: AnimatorBase, animationNode: AnimationNodeBase);
	    /**
	     * Resets the start time of the node to a  new value.
	     *
	     * @param startTime The absolute start time (in milliseconds) of the node's starting time.
	     */
	    offset(startTime: number): void;
	    /**
	     * Updates the configuration of the node to its current state.
	     *
	     * @param time The absolute time (in milliseconds) of the animator's play head position.
	     *
	     * @see AnimatorBase#update()
	     */
	    update(time: number): void;
	    /**
	     * Sets the animation phase of the node.
	     *
	     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.
	     */
	    phase(value: number): void;
	    /**
	     * Updates the node's internal playhead position.
	     *
	     * @param time The local time (in milliseconds) of the node's playhead position.
	     */
	    _pUpdateTime(time: number): void;
	    /**
	     * Updates the node's root delta position
	     */
	    _pUpdatePositionDelta(): void;
	}
	export = AnimationStateBase;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleStateBase" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleStateBase extends AnimationStateBase {
	    private _particleNode;
	    _pDynamicProperties: Vector3D[];
	    _pDynamicPropertiesDirty: Object;
	    _pNeedUpdateTime: boolean;
	    constructor(animator: ParticleAnimator, particleNode: ParticleNodeBase, needUpdateTime?: boolean);
	    needUpdateTime: boolean;
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    _pUpdateDynamicProperties(animationSubGeometry: AnimationSubGeometry): void;
	}
	export = ParticleStateBase;
	
}
declare module "awayjs-renderergl/lib/animators/ParticleAnimator" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * Provides an interface for assigning paricle-based animation data sets to mesh-based entity objects
	 * and controlling the various available states of animation through an interative playhead that can be
	 * automatically updated or manually triggered.
	 *
	 * Requires that the containing geometry of the parent mesh is particle geometry
	 *
	 * @see away.base.ParticleGeometry
	 */
	class ParticleAnimator extends AnimatorBase {
	    private _particleAnimationSet;
	    private _animationParticleStates;
	    private _animatorParticleStates;
	    private _timeParticleStates;
	    private _totalLenOfOneVertex;
	    private _animatorSubGeometries;
	    /**
	     * Creates a new <code>ParticleAnimator</code> object.
	     *
	     * @param particleAnimationSet The animation data set containing the particle animations used by the animator.
	     */
	    constructor(particleAnimationSet: ParticleAnimationSet);
	    /**
	     * @inheritDoc
	     */
	    clone(): AnimatorBase;
	    /**
	     * @inheritDoc
	     */
	    setRenderState(shaderObject: ShaderObjectBase, renderable: RenderableBase, stage: Stage, camera: Camera, vertexConstantOffset: number, vertexStreamOffset: number): void;
	    /**
	     * @inheritDoc
	     */
	    testGPUCompatibility(shaderObject: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    start(): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateDeltaTime(dt: number): void;
	    /**
	     * @inheritDoc
	     */
	    resetTime(offset?: number): void;
	    dispose(): void;
	    private getAnimatorSubGeometry(subMesh);
	}
	export = ParticleAnimator;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleTimeState" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleTimeNode = require("awayjs-renderergl/lib/animators/nodes/ParticleTimeNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleTimeState extends ParticleStateBase {
	    /** @private */
	    static TIME_STREAM_INDEX: number;
	    /** @private */
	    static TIME_CONSTANT_INDEX: number;
	    private _particleTimeNode;
	    constructor(animator: ParticleAnimator, particleTimeNode: ParticleTimeNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticleTimeState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleTimeNode" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleTimeState = require("awayjs-renderergl/lib/animators/states/ParticleTimeState");
	/**
	 * A particle animation node used as the base node for timekeeping inside a particle. Automatically added to a particle animation set on instatiation.
	 */
	class ParticleTimeNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesDuration: boolean;
	    /** @private */
	    _iUsesDelay: boolean;
	    /** @private */
	    _iUsesLooping: boolean;
	    /**
	     * Creates a new <code>ParticleTimeNode</code>
	     *
	     * @param    [optional] usesDuration    Defines whether the node uses the <code>duration</code> data in the static properties to determine how long a particle is visible for. Defaults to false.
	     * @param    [optional] usesDelay       Defines whether the node uses the <code>delay</code> data in the static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesDuration</code> to be true.
	     * @param    [optional] usesLooping     Defines whether the node creates a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in the static properties function. Defaults to false. Requires <code>usesLooping</code> to be true.
	     */
	    constructor(usesDuration?: boolean, usesLooping?: boolean, usesDelay?: boolean);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleTimeState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleTimeNode;
	
}
declare module "awayjs-renderergl/lib/animators/ParticleAnimationSet" {
	import IAnimationSet = require("awayjs-display/lib/animators/IAnimationSet");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import ISubMesh = require("awayjs-display/lib/base/ISubMesh");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimationSetBase = require("awayjs-renderergl/lib/animators/AnimationSetBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 * The animation data set used by particle-based animators, containing particle animation data.
	 *
	 * @see away.animators.ParticleAnimator
	 */
	class ParticleAnimationSet extends AnimationSetBase implements IAnimationSet {
	    /** @private */
	    _iAnimationRegisterCache: AnimationRegisterCache;
	    private _timeNode;
	    /**
	     * Property used by particle nodes that require compilation at the end of the shader
	     */
	    static POST_PRIORITY: number;
	    /**
	     * Property used by particle nodes that require color compilation
	     */
	    static COLOR_PRIORITY: number;
	    private _animationSubGeometries;
	    private _particleNodes;
	    private _localDynamicNodes;
	    private _localStaticNodes;
	    private _totalLenOfOneVertex;
	    hasUVNode: boolean;
	    needVelocity: boolean;
	    hasBillboard: boolean;
	    hasColorMulNode: boolean;
	    hasColorAddNode: boolean;
	    /**
	     * Initialiser function for static particle properties. Needs to reference a with the following format
	     *
	     * <code>
	     * initParticleFunc(prop:ParticleProperties)
	     * {
	     * 		//code for settings local properties
	     * }
	     * </code>
	     *
	     * Aside from setting any properties required in particle animation nodes using local static properties, the initParticleFunc function
	     * is required to time node requirements as they may be needed. These properties on the ParticleProperties object can include
	     * <code>startTime</code>, <code>duration</code> and <code>delay</code>. The use of these properties is determined by the setting
	     * arguments passed in the constructor of the particle animation set. By default, only the <code>startTime</code> property is required.
	     */
	    initParticleFunc: Function;
	    /**
	     * Initialiser function scope for static particle properties
	     */
	    initParticleScope: Object;
	    /**
	     * Creates a new <code>ParticleAnimationSet</code>
	     *
	     * @param    [optional] usesDuration    Defines whether the animation set uses the <code>duration</code> data in its static properties to determine how long a particle is visible for. Defaults to false.
	     * @param    [optional] usesLooping     Defines whether the animation set uses a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in its static properties function. Defaults to false. Requires <code>usesDuration</code> to be true.
	     * @param    [optional] usesDelay       Defines whether the animation set uses the <code>delay</code> data in its static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesLooping</code> to be true.
	     */
	    constructor(usesDuration?: boolean, usesLooping?: boolean, usesDelay?: boolean);
	    /**
	     * Returns a vector of the particle animation nodes contained within the set.
	     */
	    particleNodes: ParticleNodeBase[];
	    /**
	     * @inheritDoc
	     */
	    addAnimation(node: AnimationNodeBase): void;
	    /**
	     * @inheritDoc
	     */
	    activate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    deactivate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    getAGALFragmentCode(shaderObject: ShaderObjectBase, shadedTarget: string): string;
	    /**
	     * @inheritDoc
	     */
	    doneAGALCode(shaderObject: ShaderObjectBase): void;
	    /**
	     * @inheritDoc
	     */
	    usesCPU: boolean;
	    /**
	     * @inheritDoc
	     */
	    cancelGPUCompatibility(): void;
	    dispose(): void;
	    getAnimationSubGeometry(subMesh: ISubMesh): any;
	    /** @private */
	    _iGenerateAnimationSubGeometries(mesh: Mesh): void;
	}
	export = ParticleAnimationSet;
	
}
declare module "awayjs-renderergl/lib/animators/SkeletonAnimationSet" {
	import IAnimationSet = require("awayjs-display/lib/animators/IAnimationSet");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimationSetBase = require("awayjs-renderergl/lib/animators/AnimationSetBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 * The animation data set used by skeleton-based animators, containing skeleton animation data.
	 *
	 * @see away.animators.SkeletonAnimator
	 */
	class SkeletonAnimationSet extends AnimationSetBase implements IAnimationSet {
	    private _jointsPerVertex;
	    /**
	     * Returns the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the
	     * maximum allowed value is 4.
	     */
	    jointsPerVertex: number;
	    /**
	     * Creates a new <code>SkeletonAnimationSet</code> object.
	     *
	     * @param jointsPerVertex Sets the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the maximum allowed value is 4. Defaults to 4.
	     */
	    constructor(jointsPerVertex?: number);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    activate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    deactivate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    getAGALFragmentCode(shaderObject: ShaderObjectBase, shadedTarget: string): string;
	    /**
	     * @inheritDoc
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    doneAGALCode(shaderObject: ShaderObjectBase): void;
	}
	export = SkeletonAnimationSet;
	
}
declare module "awayjs-renderergl/lib/animators/data/JointPose" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Quaternion = require("awayjs-core/lib/geom/Quaternion");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	/**
	 * Contains transformation data for a skeleton joint, used for skeleton animation.
	 *
	 * @see away.animation.Skeleton
	 * @see away.animation.SkeletonJoint
	 *
	 * todo: support (uniform) scale
	 */
	class JointPose {
	    /**
	     * The name of the joint to which the pose is associated
	     */
	    name: string;
	    /**
	     * The rotation of the pose stored as a quaternion
	     */
	    orientation: Quaternion;
	    /**
	     * The translation of the pose
	     */
	    translation: Vector3D;
	    constructor();
	    /**
	     * Converts the transformation to a Matrix3D representation.
	     *
	     * @param target An optional target matrix to store the transformation. If not provided, it will create a new instance.
	     * @return The transformation matrix of the pose.
	     */
	    toMatrix3D(target?: Matrix3D): Matrix3D;
	    /**
	     * Copies the transformation data from a source pose object into the existing pose object.
	     *
	     * @param pose The source pose to copy from.
	     */
	    copyFrom(pose: JointPose): void;
	}
	export = JointPose;
	
}
declare module "awayjs-renderergl/lib/animators/data/SkeletonJoint" {
	/**
	 * A value obect representing a single joint in a skeleton object.
	 *
	 * @see away.animators.Skeleton
	 */
	class SkeletonJoint {
	    /**
	     * The index of the parent joint in the skeleton's joints vector.
	     *
	     * @see away.animators.Skeleton#joints
	     */
	    parentIndex: number;
	    /**
	     * The name of the joint
	     */
	    name: string;
	    /**
	     * The inverse bind pose matrix, as raw data, used to transform vertices to bind joint space in preparation for transformation using the joint matrix.
	     */
	    inverseBindPose: number[];
	    /**
	     * Creates a new <code>SkeletonJoint</code> object
	     */
	    constructor();
	}
	export = SkeletonJoint;
	
}
declare module "awayjs-renderergl/lib/animators/data/Skeleton" {
	import SkeletonJoint = require("awayjs-renderergl/lib/animators/data/SkeletonJoint");
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	/**
	 * A Skeleton object is a hierarchical grouping of joint objects that can be used for skeletal animation.
	 *
	 * @see away.animators.SkeletonJoint
	 */
	class Skeleton extends NamedAssetBase implements IAsset {
	    /**
	     * A flat list of joint objects that comprise the skeleton. Every joint except for the root has a parentIndex
	     * property that is an index into this list.
	     * A child joint should always have a higher index than its parent.
	     */
	    joints: SkeletonJoint[];
	    /**
	     * The total number of joints in the skeleton.
	     */
	    numJoints: number;
	    /**
	     * Creates a new <code>Skeleton</code> object
	     */
	    constructor();
	    /**
	     * Returns the joint object in the skeleton with the given name, otherwise returns a null object.
	     *
	     * @param jointName The name of the joint object to be found.
	     * @return The joint object with the given name.
	     *
	     * @see #joints
	     */
	    jointFromName(jointName: string): SkeletonJoint;
	    /**
	     * Returns the joint index, given the joint name. -1 is returned if the joint name is not found.
	     *
	     * @param jointName The name of the joint object to be found.
	     * @return The index of the joint object in the joints Array
	     *
	     * @see #joints
	     */
	    jointIndexFromName(jointName: string): number;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	}
	export = Skeleton;
	
}
declare module "awayjs-renderergl/lib/animators/data/SkeletonPose" {
	import IAsset = require("awayjs-core/lib/library/IAsset");
	import NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
	import JointPose = require("awayjs-renderergl/lib/animators/data/JointPose");
	/**
	 * A collection of pose objects, determining the pose for an entire skeleton.
	 * The <code>jointPoses</code> vector object corresponds to a skeleton's <code>joints</code> vector object, however, there is no
	 * reference to a skeleton's instance, since several skeletons can be influenced by the same pose (eg: animation
	 * clips are added to any animator with a valid skeleton)
	 *
	 * @see away.animators.Skeleton
	 * @see away.animators.JointPose
	 */
	class SkeletonPose extends NamedAssetBase implements IAsset {
	    /**
	     * A flat list of pose objects that comprise the skeleton pose. The pose indices correspond to the target skeleton's joint indices.
	     *
	     * @see away.animators.Skeleton#joints
	     */
	    jointPoses: JointPose[];
	    /**
	     * The total number of joint poses in the skeleton pose.
	     */
	    numJointPoses: number;
	    /**
	     * Creates a new <code>SkeletonPose</code> object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    assetType: string;
	    /**
	     * Returns the joint pose object with the given joint name, otherwise returns a null object.
	     *
	     * @param jointName The name of the joint object whose pose is to be found.
	     * @return The pose object with the given joint name.
	     */
	    jointPoseFromName(jointName: string): JointPose;
	    /**
	     * Returns the pose index, given the joint name. -1 is returned if the joint name is not found in the pose.
	     *
	     * @param The name of the joint object whose pose is to be found.
	     * @return The index of the pose object in the jointPoses Array
	     *
	     * @see #jointPoses
	     */
	    jointPoseIndexFromName(jointName: string): number;
	    /**
	     * Creates a copy of the <code>SkeletonPose</code> object, with a dulpicate of its component joint poses.
	     *
	     * @return SkeletonPose
	     */
	    clone(): SkeletonPose;
	    /**
	     * @inheritDoc
	     */
	    dispose(): void;
	}
	export = SkeletonPose;
	
}
declare module "awayjs-renderergl/lib/animators/states/ISkeletonAnimationState" {
	import IAnimationState = require("awayjs-renderergl/lib/animators/states/IAnimationState");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	interface ISkeletonAnimationState extends IAnimationState {
	    /**
	     * Returns the output skeleton pose of the animation node.
	     */
	    getSkeletonPose(skeleton: Skeleton): SkeletonPose;
	}
	export = ISkeletonAnimationState;
	
}
declare module "awayjs-renderergl/lib/animators/transitions/IAnimationTransition" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	/**
	 *
	 */
	interface IAnimationTransition {
	    getAnimationNode(animator: AnimatorBase, startNode: AnimationNodeBase, endNode: AnimationNodeBase, startTime: number): AnimationNodeBase;
	}
	export = IAnimationTransition;
	
}
declare module "awayjs-renderergl/lib/animators/SkeletonAnimator" {
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonAnimationSet = require("awayjs-renderergl/lib/animators/SkeletonAnimationSet");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import IAnimationTransition = require("awayjs-renderergl/lib/animators/transitions/IAnimationTransition");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
	/**
	 * Provides an interface for assigning skeleton-based animation data sets to mesh-based entity objects
	 * and controlling the various available states of animation through an interative playhead that can be
	 * automatically updated or manually triggered.
	 */
	class SkeletonAnimator extends AnimatorBase {
	    private _globalMatrices;
	    private _globalPose;
	    private _globalPropertiesDirty;
	    private _numJoints;
	    private _morphedSubGeometry;
	    private _morphedSubGeometryDirty;
	    private _condensedMatrices;
	    private _skeleton;
	    private _forceCPU;
	    private _useCondensedIndices;
	    private _jointsPerVertex;
	    private _activeSkeletonState;
	    private _onTransitionCompleteDelegate;
	    private _onIndicesUpdateDelegate;
	    private _onVerticesUpdateDelegate;
	    /**
	     * returns the calculated global matrices of the current skeleton pose.
	     *
	     * @see #globalPose
	     */
	    globalMatrices: number[];
	    /**
	     * returns the current skeleton pose output from the animator.
	     *
	     * @see away.animators.data.SkeletonPose
	     */
	    globalPose: SkeletonPose;
	    /**
	     * Returns the skeleton object in use by the animator - this defines the number and heirarchy of joints used by the
	     * skinned geoemtry to which skeleon animator is applied.
	     */
	    skeleton: Skeleton;
	    /**
	     * Indicates whether the skeleton animator is disabled by default for GPU rendering, something that allows the animator to perform calculation on the GPU.
	     * Defaults to false.
	     */
	    forceCPU: boolean;
	    /**
	     * Offers the option of enabling GPU accelerated animation on skeletons larger than 32 joints
	     * by condensing the number of joint index values required per mesh. Only applicable to
	     * skeleton animations that utilise more than one mesh object. Defaults to false.
	     */
	    useCondensedIndices: boolean;
	    /**
	     * Creates a new <code>SkeletonAnimator</code> object.
	     *
	     * @param skeletonAnimationSet The animation data set containing the skeleton animations used by the animator.
	     * @param skeleton The skeleton object used for calculating the resulting global matrices for transforming skinned mesh data.
	     * @param forceCPU Optional value that only allows the animator to perform calculation on the CPU. Defaults to false.
	     */
	    constructor(animationSet: SkeletonAnimationSet, skeleton: Skeleton, forceCPU?: boolean);
	    /**
	     * @inheritDoc
	     */
	    clone(): AnimatorBase;
	    /**
	     * Plays an animation state registered with the given name in the animation data set.
	     *
	     * @param name The data set name of the animation state to be played.
	     * @param transition An optional transition object that determines how the animator will transition from the currently active animation state.
	     * @param offset An option offset time (in milliseconds) that resets the state's internal clock to the absolute time of the animator plus the offset value. Required for non-looping animation states.
	     */
	    play(name: string, transition?: IAnimationTransition, offset?: number): void;
	    /**
	     * @inheritDoc
	     */
	    setRenderState(shaderObject: ShaderObjectBase, renderable: RenderableBase, stage: Stage, camera: Camera, vertexConstantOffset: number, vertexStreamOffset: number): void;
	    /**
	     * @inheritDoc
	     */
	    testGPUCompatibility(shaderObject: ShaderObjectBase): void;
	    /**
	     * Applies the calculated time delta to the active animation state node or state transition object.
	     */
	    _pUpdateDeltaTime(dt: number): void;
	    private updateCondensedMatrices(condensedIndexLookUp, numJoints);
	    private updateGlobalProperties();
	    getRenderableSubGeometry(renderable: TriangleSubMeshRenderable, sourceSubGeometry: TriangleSubGeometry): TriangleSubGeometry;
	    /**
	     * If the animation can't be performed on GPU, transform vertices manually
	     * @param subGeom The subgeometry containing the weights and joint index data per vertex.
	     * @param pass The material pass for which we need to transform the vertices
	     */
	    morphSubGeometry(renderable: TriangleSubMeshRenderable, sourceSubGeometry: TriangleSubGeometry): void;
	    /**
	     * Converts a local hierarchical skeleton pose to a global pose
	     * @param targetPose The SkeletonPose object that will contain the global pose.
	     * @param skeleton The skeleton containing the joints, and as such, the hierarchical data to transform to global poses.
	     */
	    private localToGlobalPose(sourcePose, targetPose, skeleton);
	    private onTransitionComplete(event);
	    private onIndicesUpdate(event);
	    private onVerticesUpdate(event);
	}
	export = SkeletonAnimator;
	
}
declare module "awayjs-renderergl/lib/animators/data/VertexAnimationMode" {
	/**
	 * Options for setting the animation mode of a vertex animator object.
	 *
	 * @see away.animators.VertexAnimator
	 */
	class VertexAnimationMode {
	    /**
	     * Animation mode that adds all outputs from active vertex animation state to form the current vertex animation pose.
	     */
	    static ADDITIVE: string;
	    /**
	     * Animation mode that picks the output from a single vertex animation state to form the current vertex animation pose.
	     */
	    static ABSOLUTE: string;
	}
	export = VertexAnimationMode;
	
}
declare module "awayjs-renderergl/lib/animators/VertexAnimationSet" {
	import IAnimationSet = require("awayjs-display/lib/animators/IAnimationSet");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimationSetBase = require("awayjs-renderergl/lib/animators/AnimationSetBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 * The animation data set used by vertex-based animators, containing vertex animation state data.
	 *
	 * @see VertexAnimator
	 */
	class VertexAnimationSet extends AnimationSetBase implements IAnimationSet {
	    private _numPoses;
	    private _blendMode;
	    /**
	     * Returns the number of poses made available at once to the GPU animation code.
	     */
	    numPoses: number;
	    /**
	     * Returns the active blend mode of the vertex animator object.
	     */
	    blendMode: string;
	    /**
	     * Returns whether or not normal data is used in last set GPU pass of the vertex shader.
	     */
	    /**
	     * Creates a new <code>VertexAnimationSet</code> object.
	     *
	     * @param numPoses The number of poses made available at once to the GPU animation code.
	     * @param blendMode Optional value for setting the animation mode of the vertex animator object.
	     *
	     * @see away3d.animators.data.VertexAnimationMode
	     */
	    constructor(numPoses?: number, blendMode?: string);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    activate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    deactivate(shaderObject: ShaderObjectBase, stage: Stage): void;
	    /**
	     * @inheritDoc
	     */
	    getAGALFragmentCode(shaderObject: ShaderObjectBase, shadedTarget: string): string;
	    /**
	     * @inheritDoc
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase): string;
	    /**
	     * @inheritDoc
	     */
	    doneAGALCode(shaderObject: ShaderObjectBase): void;
	    /**
	     * Generates the vertex AGAL code for absolute blending.
	     */
	    private getAbsoluteAGALCode(shaderObject);
	    /**
	     * Generates the vertex AGAL code for additive blending.
	     */
	    private getAdditiveAGALCode(shaderObject);
	}
	export = VertexAnimationSet;
	
}
declare module "awayjs-renderergl/lib/animators/states/IVertexAnimationState" {
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import IAnimationState = require("awayjs-renderergl/lib/animators/states/IAnimationState");
	/**
	 * Provides an interface for animation node classes that hold animation data for use in the Vertex animator class.
	 *
	 * @see away.animators.VertexAnimator
	 */
	interface IVertexAnimationState extends IAnimationState {
	    /**
	     * Returns the current geometry frame of animation in the clip based on the internal playhead position.
	     */
	    currentGeometry: Geometry;
	    /**
	     * Returns the current geometry frame of animation in the clip based on the internal playhead position.
	     */
	    nextGeometry: Geometry;
	    /**
	     * Returns a fractional value between 0 and 1 representing the blending ratio of the current playhead position
	     * between the current geometry frame (0) and next geometry frame (1) of the animation.
	     */
	    blendWeight: number;
	}
	export = IVertexAnimationState;
	
}
declare module "awayjs-renderergl/lib/animators/VertexAnimator" {
	import TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import VertexAnimationSet = require("awayjs-renderergl/lib/animators/VertexAnimationSet");
	import IAnimationTransition = require("awayjs-renderergl/lib/animators/transitions/IAnimationTransition");
	import TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	/**
	 * Provides an interface for assigning vertex-based animation data sets to mesh-based entity objects
	 * and controlling the various available states of animation through an interative playhead that can be
	 * automatically updated or manually triggered.
	 */
	class VertexAnimator extends AnimatorBase {
	    private _vertexAnimationSet;
	    private _poses;
	    private _weights;
	    private _numPoses;
	    private _blendMode;
	    private _activeVertexState;
	    /**
	     * Creates a new <code>VertexAnimator</code> object.
	     *
	     * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.
	     */
	    constructor(vertexAnimationSet: VertexAnimationSet);
	    /**
	     * @inheritDoc
	     */
	    clone(): AnimatorBase;
	    /**
	     * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.
	     * @param sequenceName The name of the clip to be played.
	     */
	    play(name: string, transition?: IAnimationTransition, offset?: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateDeltaTime(dt: number): void;
	    /**
	     * @inheritDoc
	     */
	    setRenderState(shaderObject: ShaderObjectBase, renderable: RenderableBase, stage: Stage, camera: Camera, vertexConstantOffset: number, vertexStreamOffset: number): void;
	    private setNullPose(shaderObject, renderable, stage, vertexConstantOffset, vertexStreamOffset);
	    /**
	     * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.
	     * Needs to be called if gpu code is potentially required.
	     */
	    testGPUCompatibility(shaderObject: ShaderObjectBase): void;
	    getRenderableSubGeometry(renderable: TriangleSubMeshRenderable, sourceSubGeometry: TriangleSubGeometry): TriangleSubGeometry;
	}
	export = VertexAnimator;
	
}
declare module "awayjs-renderergl/lib/passes/LightingPassGLBase" {
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
	 * using material methods to define their appearance.
	 */
	class LightingPassGLBase extends MaterialPassGLBase {
	    _pNumPointLights: number;
	    _pNumDirectionalLights: number;
	    _pNumLightProbes: number;
	    private _directionalLightsOffset;
	    private _pointLightsOffset;
	    private _lightProbesOffset;
	    /**
	     * Indicates the offset in the light picker's directional light vector for which to start including lights.
	     * This needs to be set before the light picker is assigned.
	     */
	    directionalLightsOffset: number;
	    /**
	     * Indicates the offset in the light picker's point light vector for which to start including lights.
	     * This needs to be set before the light picker is assigned.
	     */
	    pointLightsOffset: number;
	    /**
	     * Indicates the offset in the light picker's light probes vector for which to start including lights.
	     * This needs to be set before the light picker is assigned.
	     */
	    lightProbesOffset: number;
	    /**
	     * The amount of point lights that need to be supported.
	     */
	    iNumPointLights: number;
	    /**
	     * The amount of directional lights that need to be supported.
	     */
	    iNumDirectionalLights: number;
	    /**
	     * The amount of light probes that need to be supported.
	     */
	    iNumLightProbes: number;
	    /**
	     *
	     */
	    constructor();
	    _iUsesSpecular(): boolean;
	    _iUsesShadows(): boolean;
	    _iGetPreLightingVertexCode(shaderObject: ShaderLightingObject, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPreLightingFragmentCode(shaderObject: ShaderLightingObject, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerLightDiffuseFragmentCode(shaderObject: ShaderLightingObject, lightDirReg: ShaderRegisterElement, diffuseColorReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerLightSpecularFragmentCode(shaderObject: ShaderLightingObject, lightDirReg: ShaderRegisterElement, specularColorReg: ShaderRegisterElement, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerProbeDiffuseFragmentCode(shaderObject: ShaderLightingObject, texReg: ShaderRegisterElement, weightReg: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPerProbeSpecularFragmentCode(shaderObject: ShaderLightingObject, texReg: ShaderRegisterElement, weightReg: string, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPostLightingVertexCode(shaderObject: ShaderLightingObject, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    _iGetPostLightingFragmentCode(shaderObject: ShaderLightingObject, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	}
	export = LightingPassGLBase;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderLightingObject" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import LightPickerBase = require("awayjs-display/lib/materials/lightpickers/LightPickerBase");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import ShaderCompilerBase = require("awayjs-renderergl/lib/compilation/ShaderCompilerBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import LightingPassGLBase = require("awayjs-renderergl/lib/passes/LightingPassGLBase");
	/**
	 * ShaderObjectBase keeps track of the number of dependencies for "named registers" used across a pass.
	 * Named registers are that are not necessarily limited to a single method. They are created by the compiler and
	 * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed
	 * each time a method has been compiled into the shader.
	 *
	 * @see RegisterPool.addUsage
	 */
	class ShaderLightingObject extends ShaderObjectBase {
	    /**
	     * The first index for the fragment constants containing the light data.
	     */
	    lightFragmentConstantIndex: number;
	    /**
	     * The starting index if the vertex constant to which light data needs to be uploaded.
	     */
	    lightVertexConstantIndex: number;
	    /**
	     * Indices for the light probe diffuse textures.
	     */
	    lightProbeDiffuseIndices: number[];
	    /**
	     * Indices for the light probe specular textures.
	     */
	    lightProbeSpecularIndices: number[];
	    /**
	     * The index of the fragment constant containing the weights for the light probes.
	     */
	    probeWeightsIndex: number;
	    numLights: number;
	    usesLightFallOff: boolean;
	    usesShadows: boolean;
	    numPointLights: number;
	    numDirectionalLights: number;
	    numLightProbes: number;
	    pointLightsOffset: number;
	    directionalLightsOffset: number;
	    lightProbesOffset: number;
	    lightPicker: LightPickerBase;
	    /**
	     * Indicates whether the shader uses any lights.
	     */
	    usesLights: boolean;
	    /**
	     * Indicates whether the shader uses any light probes.
	     */
	    usesProbes: boolean;
	    /**
	     * Indicates whether the lights uses any specular components.
	     */
	    usesLightsForSpecular: boolean;
	    /**
	     * Indicates whether the probes uses any specular components.
	     */
	    usesProbesForSpecular: boolean;
	    /**
	     * Indicates whether the lights uses any diffuse components.
	     */
	    usesLightsForDiffuse: boolean;
	    /**
	     * Indicates whether the probes uses any diffuse components.
	     */
	    usesProbesForDiffuse: boolean;
	    /**
	     * Creates a new MethodCompilerVO object.
	     */
	    constructor(profile: any);
	    /**
	     * Factory method to create a concrete compiler object for this object
	     *
	     * @param materialPassVO
	     * @returns {away.materials.ShaderLightingCompiler}
	     */
	    createCompiler(material: MaterialGLBase, materialPass: LightingPassGLBase): ShaderCompilerBase;
	    /**
	     * Clears dependency counts for all registers. Called when recompiling a pass.
	     */
	    reset(): void;
	    /**
	     *
	     *
	     * @param renderable
	     * @param stage
	     * @param camera
	     */
	    setRenderState(renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	    /**
	     * Updates constant data render state used by the lights. This method is optional for subclasses to implement.
	     */
	    private updateLights();
	    /**
	     * Updates constant data render state used by the light probes. This method is optional for subclasses to implement.
	     */
	    private updateProbes(stage);
	}
	export = ShaderLightingObject;
	
}
declare module "awayjs-renderergl/lib/compilation/ShaderLightingCompiler" {
	import ShaderLightingObject = require("awayjs-renderergl/lib/compilation/ShaderLightingObject");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import ShaderCompilerBase = require("awayjs-renderergl/lib/compilation/ShaderCompilerBase");
	import ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
	import LightingPassGLBase = require("awayjs-renderergl/lib/passes/LightingPassGLBase");
	/**
	 * ShaderCompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a
	 * material. Concrete subclasses are used by the default materials.
	 *
	 * @see away.materials.ShadingMethodBase
	 */
	class ShaderLightingCompiler extends ShaderCompilerBase {
	    private _materialLightingPass;
	    private _shaderLightingObject;
	    _pointLightFragmentConstants: ShaderRegisterElement[];
	    _pointLightVertexConstants: ShaderRegisterElement[];
	    _dirLightFragmentConstants: ShaderRegisterElement[];
	    _dirLightVertexConstants: ShaderRegisterElement[];
	    _pNumProbeRegisters: number;
	    /**
	     * Creates a new ShaderCompilerBase object.
	     * @param profile The compatibility profile of the renderer.
	     */
	    constructor(material: MaterialGLBase, materialPass: LightingPassGLBase, shaderObject: ShaderLightingObject);
	    /**
	     * Compile the code for the methods.
	     */
	    pCompileDependencies(): void;
	    /**
	     * Provides the code to provide shadow mapping.
	     */
	    pCompileShadowCode(): void;
	    /**
	     * Initializes constant registers to contain light data.
	     */
	    private initLightRegisters();
	    /**
	     * Compiles the shading code for directional and point lights.
	     */
	    private compileLightCode();
	    /**
	     * Compiles shading code for light probes.
	     */
	    private compileLightProbeCode();
	    /**
	     * Reset all the indices to "unused".
	     */
	    pInitRegisterIndices(): void;
	    /**
	     * Figure out which named registers are required, and how often.
	     */
	    pCalculateDependencies(): void;
	}
	export = ShaderLightingCompiler;
	
}
declare module "awayjs-renderergl/lib/passes/SkyboxPass" {
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
	/**
	 * SkyboxPass provides a material pass exclusively used to render sky boxes from a cube texture.
	 */
	class SkyboxPass extends MaterialPassGLBase {
	    /**
	     * Creates a new SkyboxPass object.
	     *
	     * @param material The material to which this pass belongs.
	     */
	    constructor();
	    _iIncludeDependencies(shaderObject: ShaderObjectBase): void;
	}
	export = SkyboxPass;
	
}
declare module "awayjs-renderergl/lib/materials/SkyboxMaterial" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
	import MaterialPassData = require("awayjs-renderergl/lib/pool/MaterialPassData");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	import MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ShaderRegisterCache = require("awayjs-renderergl/lib/compilation/ShaderRegisterCache");
	import ShaderRegisterData = require("awayjs-renderergl/lib/compilation/ShaderRegisterData");
	/**
	 * SkyboxMaterial is a material exclusively used to render skyboxes
	 *
	 * @see away3d.primitives.Skybox
	 */
	class SkyboxMaterial extends MaterialGLBase {
	    private _vertexData;
	    private _cubeMap;
	    private _skyboxPass;
	    /**
	     * Creates a new SkyboxMaterial object.
	     * @param cubeMap The CubeMap to use as the skybox.
	     */
	    constructor(cubeMap: CubeTextureBase, smooth?: boolean, repeat?: boolean, mipmap?: boolean);
	    /**
	     * The cube texture to use as the skybox.
	     */
	    cubeMap: CubeTextureBase;
	    /**
	     * @inheritDoc
	     */
	    _iGetVertexCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iGetFragmentCode(shaderObject: ShaderObjectBase, registerCache: ShaderRegisterCache, sharedRegisters: ShaderRegisterData): string;
	    /**
	     * @inheritDoc
	     */
	    _iActivatePass(pass: MaterialPassData, renderer: RendererBase, camera: Camera): void;
	    /**
	     * @inheritDoc
	     */
	    _iRenderPass(pass: MaterialPassData, renderable: RenderableBase, stage: Stage, camera: Camera, viewProjection: Matrix3D): void;
	}
	export = SkyboxMaterial;
	
}
declare module "awayjs-renderergl/lib/pick/PickingColliderBase" {
	import Point = require("awayjs-core/lib/geom/Point");
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	import Billboard = require("awayjs-display/lib/entities/Billboard");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * An abstract base class for all picking collider classes. It should not be instantiated directly.
	 *
	 * @class away.pick.PickingColliderBase
	 */
	class PickingColliderBase {
	    private _billboardRenderablePool;
	    private _subMeshRenderablePool;
	    rayPosition: Vector3D;
	    rayDirection: Vector3D;
	    constructor();
	    _pPetCollisionNormal(indexData: number[], vertexData: number[], triangleIndex: number): Vector3D;
	    _pGetCollisionUV(indexData: number[], uvData: number[], triangleIndex: number, v: number, w: number, u: number, uvOffset: number, uvStride: number): Point;
	    /**
	     * @inheritDoc
	     */
	    _pTestRenderableCollision(renderable: RenderableBase, pickingCollisionVO: PickingCollisionVO, shortestCollisionDistance: number): boolean;
	    /**
	     * @inheritDoc
	     */
	    setLocalRay(localPosition: Vector3D, localDirection: Vector3D): void;
	    /**
	     * Tests a <code>Billboard</code> object for a collision with the picking ray.
	     *
	     * @param billboard The billboard instance to be tested.
	     * @param pickingCollisionVO The collision object used to store the collision results
	     * @param shortestCollisionDistance The current value of the shortest distance to a detected collision along the ray.
	     * @param findClosest
	     */
	    testBillboardCollision(billboard: Billboard, pickingCollisionVO: PickingCollisionVO, shortestCollisionDistance: number): boolean;
	    /**
	     * Tests a <code>Mesh</code> object for a collision with the picking ray.
	     *
	     * @param mesh The mesh instance to be tested.
	     * @param pickingCollisionVO The collision object used to store the collision results
	     * @param shortestCollisionDistance The current value of the shortest distance to a detected collision along the ray.
	     * @param findClosest
	     */
	    testMeshCollision(mesh: Mesh, pickingCollisionVO: PickingCollisionVO, shortestCollisionDistance: number, findClosest: boolean): boolean;
	}
	export = PickingColliderBase;
	
}
declare module "awayjs-renderergl/lib/pick/JSPickingCollider" {
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	import IPickingCollider = require("awayjs-display/lib/pick/IPickingCollider");
	import PickingColliderBase = require("awayjs-renderergl/lib/pick/PickingColliderBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * Pure JS picking collider for display objects. Used with the <code>RaycastPicker</code> picking object.
	 *
	 * @see away.base.DisplayObject#pickingCollider
	 * @see away.pick.RaycastPicker
	 *
	 * @class away.pick.JSPickingCollider
	 */
	class JSPickingCollider extends PickingColliderBase implements IPickingCollider {
	    private _findClosestCollision;
	    /**
	     * Creates a new <code>JSPickingCollider</code> object.
	     *
	     * @param findClosestCollision Determines whether the picking collider searches for the closest collision along the ray. Defaults to false.
	     */
	    constructor(findClosestCollision?: boolean);
	    /**
	     * @inheritDoc
	     */
	    _pTestRenderableCollision(renderable: RenderableBase, pickingCollisionVO: PickingCollisionVO, shortestCollisionDistance: number): boolean;
	}
	export = JSPickingCollider;
	
}
declare module "awayjs-renderergl/lib/pick/ShaderPicker" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Scene = require("awayjs-display/lib/containers/Scene");
	import View = require("awayjs-display/lib/containers/View");
	import IPicker = require("awayjs-display/lib/pick/IPicker");
	import PickingCollisionVO = require("awayjs-display/lib/pick/PickingCollisionVO");
	import EntityCollector = require("awayjs-display/lib/traverse/EntityCollector");
	import ITextureBase = require("awayjs-stagegl/lib/base/ITextureBase");
	/**
	 * Picks a 3d object from a view or scene by performing a separate render pass on the scene around the area being picked using key color values,
	 * then reading back the color value of the pixel in the render representing the picking ray. Requires multiple passes and readbacks for retriving details
	 * on an entity that has its shaderPickingDetails property set to true.
	 *
	 * A read-back operation from any GPU is not a very efficient process, and the amount of processing used can vary significantly between different hardware.
	 *
	 * @see away.entities.Entity#shaderPickingDetails
	 *
	 * @class away.pick.ShaderPicker
	 */
	class ShaderPicker implements IPicker {
	    private _opaqueRenderableHead;
	    private _blendedRenderableHead;
	    private _stage;
	    private _context;
	    private _onlyMouseEnabled;
	    private _objectProgram;
	    private _triangleProgram;
	    private _bitmapData;
	    private _viewportData;
	    private _boundOffsetScale;
	    private _id;
	    private _interactives;
	    private _interactiveId;
	    private _hitColor;
	    private _projX;
	    private _projY;
	    private _hitRenderable;
	    private _hitEntity;
	    private _localHitPosition;
	    private _hitUV;
	    private _faceIndex;
	    private _subGeometryIndex;
	    private _localHitNormal;
	    private _rayPos;
	    private _rayDir;
	    private _potentialFound;
	    private static MOUSE_SCISSOR_RECT;
	    private _shaderPickingDetails;
	    /**
	     * @inheritDoc
	     */
	    onlyMouseEnabled: boolean;
	    /**
	     * Creates a new <code>ShaderPicker</code> object.
	     *
	     * @param shaderPickingDetails Determines whether the picker includes a second pass to calculate extra
	     * properties such as uv and normal coordinates.
	     */
	    constructor(shaderPickingDetails?: boolean);
	    /**
	     * @inheritDoc
	     */
	    getViewCollision(x: number, y: number, view: View): PickingCollisionVO;
	    /**
	     * @inheritDoc
	     */
	    getSceneCollision(position: Vector3D, direction: Vector3D, scene: Scene): PickingCollisionVO;
	    /**
	     * @inheritDoc
	     */
	    pDraw(entityCollector: EntityCollector, target: ITextureBase): void;
	    /**
	     * Draw a list of renderables.
	     * @param renderables The renderables to draw.
	     * @param camera The camera for which to render.
	     */
	    private drawRenderables(renderable, camera);
	    private updateRay(camera);
	    /**
	     * Creates the Program that color-codes objects.
	     */
	    private initObjectProgram();
	    /**
	     * Creates the Program that renders positions.
	     */
	    private initTriangleProgram();
	    /**
	     * Gets more detailed information about the hir position, if required.
	     * @param camera The camera used to view the hit object.
	     */
	    private getHitDetails(camera);
	    /**
	     * Finds a first-guess approximate position about the hit position.
	     *
	     * @param camera The camera used to view the hit object.
	     */
	    private getApproximatePosition(camera);
	    /**
	     * Use the approximate position info to find the face under the mouse position from which we can derive the precise
	     * ray-face intersection point, then use barycentric coordinates to figure out the uv coordinates, etc.
	     * @param camera The camera used to view the hit object.
	     */
	    private getPreciseDetails(camera);
	    /**
	     * Finds the precise hit position by unprojecting the screen coordinate back unto the hit face's plane and
	     * calculating the intersection point.
	     * @param camera The camera used to render the object.
	     * @param invSceneTransform The inverse scene transformation of the hit object.
	     * @param nx The x-coordinate of the face's plane normal.
	     * @param ny The y-coordinate of the face plane normal.
	     * @param nz The z-coordinate of the face plane normal.
	     * @param px The x-coordinate of a point on the face's plane (ie a face vertex)
	     * @param py The y-coordinate of a point on the face's plane (ie a face vertex)
	     * @param pz The z-coordinate of a point on the face's plane (ie a face vertex)
	     */
	    private getPrecisePosition(invSceneTransform, nx, ny, nz, px, py, pz);
	    dispose(): void;
	}
	export = ShaderPicker;
	
}
declare module "awayjs-renderergl/lib/tools/data/ParticleGeometryTransform" {
	import Matrix = require("awayjs-core/lib/geom/Matrix");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	/**
	 * ...
	 */
	class ParticleGeometryTransform {
	    private _defaultVertexTransform;
	    private _defaultInvVertexTransform;
	    private _defaultUVTransform;
	    vertexTransform: Matrix3D;
	    UVTransform: Matrix;
	    invVertexTransform: Matrix3D;
	}
	export = ParticleGeometryTransform;
	
}
declare module "awayjs-renderergl/lib/utils/ParticleGeometryHelper" {
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import ParticleGeometry = require("awayjs-renderergl/lib/base/ParticleGeometry");
	import ParticleGeometryTransform = require("awayjs-renderergl/lib/tools/data/ParticleGeometryTransform");
	/**
	 * ...
	 */
	class ParticleGeometryHelper {
	    static MAX_VERTEX: number;
	    static generateGeometry(geometries: Geometry[], transforms?: ParticleGeometryTransform[]): ParticleGeometry;
	}
	export = ParticleGeometryHelper;
	
}
declare module "awayjs-renderergl/lib/utils/PerspectiveMatrix3D" {
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	/**
	 *
	 */
	class PerspectiveMatrix3D extends Matrix3D {
	    constructor(v?: number[]);
	    perspectiveFieldOfViewLH(fieldOfViewY: number, aspectRatio: number, zNear: number, zFar: number): void;
	}
	export = PerspectiveMatrix3D;
	
}
declare module "awayjs-renderergl/lib/animators/data/ColorSegmentPoint" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	class ColorSegmentPoint {
	    private _color;
	    private _life;
	    constructor(life: number, color: ColorTransform);
	    color: ColorTransform;
	    life: number;
	}
	export = ColorSegmentPoint;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	/**
	 * Provides an abstract base class for nodes with time-based animation data in an animation blend tree.
	 */
	class AnimationClipNodeBase extends AnimationNodeBase {
	    _pLooping: boolean;
	    _pTotalDuration: number;
	    _pLastFrame: number;
	    _pStitchDirty: boolean;
	    _pStitchFinalFrame: boolean;
	    _pNumFrames: number;
	    _pDurations: number[];
	    _pTotalDelta: Vector3D;
	    fixedFrameRate: boolean;
	    /**
	     * Determines whether the contents of the animation node have looping characteristics enabled.
	     */
	    looping: boolean;
	    /**
	     * Defines if looping content blends the final frame of animation data with the first (true) or works on the
	     * assumption that both first and last frames are identical (false). Defaults to false.
	     */
	    stitchFinalFrame: boolean;
	    totalDuration: number;
	    totalDelta: Vector3D;
	    lastFrame: number;
	    /**
	     * Returns a vector of time values representing the duration (in milliseconds) of each animation frame in the clip.
	     */
	    durations: number[];
	    /**
	     * Creates a new <code>AnimationClipNodeBase</code> object.
	     */
	    constructor();
	    /**
	     * Updates the node's final frame stitch state.
	     *
	     * @see #stitchFinalFrame
	     */
	    _pUpdateStitch(): void;
	}
	export = AnimationClipNodeBase;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleAccelerationState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleAccelerationNode = require("awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleAccelerationState extends ParticleStateBase {
	    /** @private */
	    static ACCELERATION_INDEX: number;
	    private _particleAccelerationNode;
	    private _acceleration;
	    private _halfAcceleration;
	    /**
	     * Defines the acceleration vector of the state, used when in global mode.
	     */
	    acceleration: Vector3D;
	    constructor(animator: ParticleAnimator, particleAccelerationNode: ParticleAccelerationNode);
	    /**
	     * @inheritDoc
	     */
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateAccelerationData();
	}
	export = ParticleAccelerationState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleAccelerationState = require("awayjs-renderergl/lib/animators/states/ParticleAccelerationState");
	/**
	 * A particle animation node used to apply a constant acceleration vector to the motion of a particle.
	 */
	class ParticleAccelerationNode extends ParticleNodeBase {
	    /** @private */
	    _acceleration: Vector3D;
	    /**
	     * Reference for acceleration node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the direction of acceleration on the particle.
	     */
	    static ACCELERATION_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleAccelerationNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] acceleration    Defines the default acceleration vector of the node, used when in global mode.
	     */
	    constructor(mode: number, acceleration?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    pGetAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleAccelerationState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleAccelerationNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleBezierCurveState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleBezierCurveNode = require("awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleBezierCurveState extends ParticleStateBase {
	    /** @private */
	    static BEZIER_CONTROL_INDEX: number;
	    /** @private */
	    static BEZIER_END_INDEX: number;
	    private _particleBezierCurveNode;
	    private _controlPoint;
	    private _endPoint;
	    /**
	     * Defines the default control point of the node, used when in global mode.
	     */
	    controlPoint: Vector3D;
	    /**
	     * Defines the default end point of the node, used when in global mode.
	     */
	    endPoint: Vector3D;
	    constructor(animator: ParticleAnimator, particleBezierCurveNode: ParticleBezierCurveNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticleBezierCurveState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleBezierCurveState = require("awayjs-renderergl/lib/animators/states/ParticleBezierCurveState");
	/**
	 * A particle animation node used to control the position of a particle over time along a bezier curve.
	 */
	class ParticleBezierCurveNode extends ParticleNodeBase {
	    /** @private */
	    _iControlPoint: Vector3D;
	    /** @private */
	    _iEndPoint: Vector3D;
	    /**
	     * Reference for bezier curve node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the control point position (0, 1, 2) of the curve.
	     */
	    static BEZIER_CONTROL_VECTOR3D: string;
	    /**
	     * Reference for bezier curve node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the end point position (0, 1, 2) of the curve.
	     */
	    static BEZIER_END_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleBezierCurveNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] controlPoint    Defines the default control point of the node, used when in global mode.
	     * @param    [optional] endPoint        Defines the default end point of the node, used when in global mode.
	     */
	    constructor(mode: number, controlPoint?: Vector3D, endPoint?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleBezierCurveState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleBezierCurveNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleBillboardState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleBillboardNode = require("awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleBillboardState extends ParticleStateBase {
	    /** @private */
	    static MATRIX_INDEX: number;
	    private _matrix;
	    private _billboardAxis;
	    /**
	     *
	     */
	    constructor(animator: ParticleAnimator, particleNode: ParticleBillboardNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    /**
	     * Defines the billboard axis.
	     */
	    billboardAxis: Vector3D;
	}
	export = ParticleBillboardState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleBillboardState = require("awayjs-renderergl/lib/animators/states/ParticleBillboardState");
	/**
	 * A particle animation node that controls the rotation of a particle to always face the camera.
	 */
	class ParticleBillboardNode extends ParticleNodeBase {
	    /** @private */
	    _iBillboardAxis: Vector3D;
	    /**
	     * Creates a new <code>ParticleBillboardNode</code>
	     */
	    constructor(billboardAxis?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleBillboardState;
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	}
	export = ParticleBillboardNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleColorState" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleColorNode = require("awayjs-renderergl/lib/animators/nodes/ParticleColorNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 * @author ...
	 */
	class ParticleColorState extends ParticleStateBase {
	    /** @private */
	    static START_MULTIPLIER_INDEX: number;
	    /** @private */
	    static DELTA_MULTIPLIER_INDEX: number;
	    /** @private */
	    static START_OFFSET_INDEX: number;
	    /** @private */
	    static DELTA_OFFSET_INDEX: number;
	    /** @private */
	    static CYCLE_INDEX: number;
	    private _particleColorNode;
	    private _usesMultiplier;
	    private _usesOffset;
	    private _usesCycle;
	    private _usesPhase;
	    private _startColor;
	    private _endColor;
	    private _cycleDuration;
	    private _cyclePhase;
	    private _cycleData;
	    private _startMultiplierData;
	    private _deltaMultiplierData;
	    private _startOffsetData;
	    private _deltaOffsetData;
	    /**
	     * Defines the start color transform of the state, when in global mode.
	     */
	    startColor: ColorTransform;
	    /**
	     * Defines the end color transform of the state, when in global mode.
	     */
	    endColor: ColorTransform;
	    /**
	     * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
	     */
	    cycleDuration: number;
	    /**
	     * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
	     */
	    cyclePhase: number;
	    constructor(animator: ParticleAnimator, particleColorNode: ParticleColorNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateColorData();
	}
	export = ParticleColorState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleColorNode" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleColorState = require("awayjs-renderergl/lib/animators/states/ParticleColorState");
	/**
	 * A particle animation node used to control the color variation of a particle over time.
	 */
	class ParticleColorNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesMultiplier: boolean;
	    /** @private */
	    _iUsesOffset: boolean;
	    /** @private */
	    _iUsesCycle: boolean;
	    /** @private */
	    _iUsesPhase: boolean;
	    /** @private */
	    _iStartColor: ColorTransform;
	    /** @private */
	    _iEndColor: ColorTransform;
	    /** @private */
	    _iCycleDuration: number;
	    /** @private */
	    _iCyclePhase: number;
	    /**
	     * Reference for color node properties on a single particle (when in local property mode).
	     * Expects a <code>ColorTransform</code> object representing the start color transform applied to the particle.
	     */
	    static COLOR_START_COLORTRANSFORM: string;
	    /**
	     * Reference for color node properties on a single particle (when in local property mode).
	     * Expects a <code>ColorTransform</code> object representing the end color transform applied to the particle.
	     */
	    static COLOR_END_COLORTRANSFORM: string;
	    /**
	     * Creates a new <code>ParticleColorNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] usesMultiplier  Defines whether the node uses multiplier data in the shader for its color transformations. Defaults to true.
	     * @param    [optional] usesOffset      Defines whether the node uses offset data in the shader for its color transformations. Defaults to true.
	     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the animation independent of particle duration. Defaults to false.
	     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.
	     * @param    [optional] startColor      Defines the default start color transform of the node, when in global mode.
	     * @param    [optional] endColor        Defines the default end color transform of the node, when in global mode.
	     * @param    [optional] cycleDuration   Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
	     * @param    [optional] cyclePhase      Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
	     */
	    constructor(mode: number, usesMultiplier?: boolean, usesOffset?: boolean, usesCycle?: boolean, usesPhase?: boolean, startColor?: ColorTransform, endColor?: ColorTransform, cycleDuration?: number, cyclePhase?: number);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleColorState;
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleColorNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleFollowState" {
	import DisplayObject = require("awayjs-display/lib/base/DisplayObject");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleFollowNode = require("awayjs-renderergl/lib/animators/nodes/ParticleFollowNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleFollowState extends ParticleStateBase {
	    /** @private */
	    static FOLLOW_POSITION_INDEX: number;
	    /** @private */
	    static FOLLOW_ROTATION_INDEX: number;
	    private _particleFollowNode;
	    private _followTarget;
	    private _targetPos;
	    private _targetEuler;
	    private _prePos;
	    private _preEuler;
	    private _smooth;
	    private _temp;
	    constructor(animator: ParticleAnimator, particleFollowNode: ParticleFollowNode);
	    followTarget: DisplayObject;
	    smooth: boolean;
	    /**
	     * @inheritDoc
	     */
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private processPosition(currentTime, deltaTime, animationSubGeometry);
	    private precessRotation(currentTime, deltaTime, animationSubGeometry);
	    private processPositionAndRotation(currentTime, deltaTime, animationSubGeometry);
	}
	export = ParticleFollowState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleFollowNode" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleFollowState = require("awayjs-renderergl/lib/animators/states/ParticleFollowState");
	/**
	 * A particle animation node used to create a follow behaviour on a particle system.
	 */
	class ParticleFollowNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesPosition: boolean;
	    /** @private */
	    _iUsesRotation: boolean;
	    /** @private */
	    _iSmooth: boolean;
	    /**
	     * Creates a new <code>ParticleFollowNode</code>
	     *
	     * @param    [optional] usesPosition     Defines wehether the individual particle reacts to the position of the target.
	     * @param    [optional] usesRotation     Defines wehether the individual particle reacts to the rotation of the target.
	     * @param    [optional] smooth     Defines wehether the state calculate the interpolated value.
	     */
	    constructor(usesPosition?: boolean, usesRotation?: boolean, smooth?: boolean);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleFollowState;
	}
	export = ParticleFollowNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleInitialColorState" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleInitialColorNode = require("awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	*
	*/
	class ParticleInitialColorState extends ParticleStateBase {
	    /** @private */
	    static MULTIPLIER_INDEX: number;
	    /** @private */
	    static OFFSET_INDEX: number;
	    private _particleInitialColorNode;
	    private _usesMultiplier;
	    private _usesOffset;
	    private _initialColor;
	    private _multiplierData;
	    private _offsetData;
	    constructor(animator: ParticleAnimator, particleInitialColorNode: ParticleInitialColorNode);
	    /**
	     * Defines the initial color transform of the state, when in global mode.
	     */
	    initialColor: ColorTransform;
	    /**
	     * @inheritDoc
	     */
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateColorData();
	}
	export = ParticleInitialColorState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	/**
	 *
	 */
	class ParticleInitialColorNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesMultiplier: boolean;
	    /** @private */
	    _iUsesOffset: boolean;
	    /** @private */
	    _iInitialColor: ColorTransform;
	    /**
	     * Reference for color node properties on a single particle (when in local property mode).
	     * Expects a <code>ColorTransform</code> object representing the color transform applied to the particle.
	     */
	    static COLOR_INITIAL_COLORTRANSFORM: string;
	    constructor(mode: number, usesMultiplier?: boolean, usesOffset?: boolean, initialColor?: ColorTransform);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleInitialColorNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleOrbitState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleOrbitNode = require("awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleOrbitState extends ParticleStateBase {
	    /** @private */
	    static ORBIT_INDEX: number;
	    /** @private */
	    static EULERS_INDEX: number;
	    private _particleOrbitNode;
	    private _usesEulers;
	    private _usesCycle;
	    private _usesPhase;
	    private _radius;
	    private _cycleDuration;
	    private _cyclePhase;
	    private _eulers;
	    private _orbitData;
	    private _eulersMatrix;
	    /**
	     * Defines the radius of the orbit when in global mode. Defaults to 100.
	     */
	    radius: number;
	    /**
	     * Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
	     */
	    cycleDuration: number;
	    /**
	     * Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
	     */
	    cyclePhase: number;
	    /**
	     * Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.
	     */
	    eulers: Vector3D;
	    constructor(animator: ParticleAnimator, particleOrbitNode: ParticleOrbitNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateOrbitData();
	}
	export = ParticleOrbitState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleOrbitState = require("awayjs-renderergl/lib/animators/states/ParticleOrbitState");
	/**
	 * A particle animation node used to control the position of a particle over time around a circular orbit.
	 */
	class ParticleOrbitNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesEulers: boolean;
	    /** @private */
	    _iUsesCycle: boolean;
	    /** @private */
	    _iUsesPhase: boolean;
	    /** @private */
	    _iRadius: number;
	    /** @private */
	    _iCycleDuration: number;
	    /** @private */
	    _iCyclePhase: number;
	    /** @private */
	    _iEulers: Vector3D;
	    /**
	     * Reference for orbit node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the radius (x), cycle speed (y) and cycle phase (z) of the motion on the particle.
	     */
	    static ORBIT_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleOrbitNode</code> object.
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] usesEulers      Defines whether the node uses the <code>eulers</code> property in the shader to calculate a rotation on the orbit. Defaults to true.
	     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the orbit independent of particle duration. Defaults to false.
	     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.
	     * @param    [optional] radius          Defines the radius of the orbit when in global mode. Defaults to 100.
	     * @param    [optional] cycleDuration   Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
	     * @param    [optional] cyclePhase      Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
	     * @param    [optional] eulers          Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.
	     */
	    constructor(mode: number, usesEulers?: boolean, usesCycle?: boolean, usesPhase?: boolean, radius?: number, cycleDuration?: number, cyclePhase?: number, eulers?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleOrbitState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleOrbitNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleOscillatorState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleOscillatorNode = require("awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleOscillatorState extends ParticleStateBase {
	    /** @private */
	    static OSCILLATOR_INDEX: number;
	    private _particleOscillatorNode;
	    private _oscillator;
	    private _oscillatorData;
	    /**
	     * Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the state, used when in global mode.
	     */
	    oscillator: Vector3D;
	    constructor(animator: ParticleAnimator, particleOscillatorNode: ParticleOscillatorNode);
	    /**
	     * @inheritDoc
	     */
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateOscillatorData();
	}
	export = ParticleOscillatorState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleOscillatorState = require("awayjs-renderergl/lib/animators/states/ParticleOscillatorState");
	/**
	 * A particle animation node used to control the position of a particle over time using simple harmonic motion.
	 */
	class ParticleOscillatorNode extends ParticleNodeBase {
	    /** @private */
	    _iOscillator: Vector3D;
	    /**
	     * Reference for ocsillator node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the axis (x,y,z) and cycle speed (w) of the motion on the particle.
	     */
	    static OSCILLATOR_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleOscillatorNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] oscillator      Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the node, used when in global mode.
	     */
	    constructor(mode: number, oscillator?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleOscillatorState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleOscillatorNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticlePositionState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticlePositionNode = require("awayjs-renderergl/lib/animators/nodes/ParticlePositionNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 * @author ...
	 */
	class ParticlePositionState extends ParticleStateBase {
	    /** @private */
	    static POSITION_INDEX: number;
	    private _particlePositionNode;
	    private _position;
	    /**
	     * Defines the position of the particle when in global mode. Defaults to 0,0,0.
	     */
	    position: Vector3D;
	    /**
	     *
	     */
	    getPositions(): Vector3D[];
	    setPositions(value: Vector3D[]): void;
	    constructor(animator: ParticleAnimator, particlePositionNode: ParticlePositionNode);
	    /**
	     * @inheritDoc
	     */
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticlePositionState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticlePositionNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticlePositionState = require("awayjs-renderergl/lib/animators/states/ParticlePositionState");
	/**
	 * A particle animation node used to set the starting position of a particle.
	 */
	class ParticlePositionNode extends ParticleNodeBase {
	    /** @private */
	    _iPosition: Vector3D;
	    /**
	     * Reference for position node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing position of the particle.
	     */
	    static POSITION_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticlePositionNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] position        Defines the default position of the particle when in global mode. Defaults to 0,0,0.
	     */
	    constructor(mode: number, position?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticlePositionState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticlePositionNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleRotateToHeadingState extends ParticleStateBase {
	    /** @private */
	    static MATRIX_INDEX: number;
	    private _matrix;
	    constructor(animator: ParticleAnimator, particleNode: ParticleNodeBase);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticleRotateToHeadingState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleRotateToHeadingState = require("awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState");
	/**
	 * A particle animation node used to control the rotation of a particle to match its heading vector.
	 */
	class ParticleRotateToHeadingNode extends ParticleNodeBase {
	    /**
	     * Creates a new <code>ParticleBillboardNode</code>
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleRotateToHeadingState;
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	}
	export = ParticleRotateToHeadingNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleRotateToPositionNode = require("awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleRotateToPositionState extends ParticleStateBase {
	    /** @private */
	    static MATRIX_INDEX: number;
	    /** @private */
	    static POSITION_INDEX: number;
	    private _particleRotateToPositionNode;
	    private _position;
	    private _matrix;
	    private _offset;
	    /**
	     * Defines the position of the point the particle will rotate to face when in global mode. Defaults to 0,0,0.
	     */
	    position: Vector3D;
	    constructor(animator: ParticleAnimator, particleRotateToPositionNode: ParticleRotateToPositionNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticleRotateToPositionState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleRotateToPositionState = require("awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState");
	/**
	 * A particle animation node used to control the rotation of a particle to face to a position
	 */
	class ParticleRotateToPositionNode extends ParticleNodeBase {
	    /** @private */
	    _iPosition: Vector3D;
	    /**
	     * Reference for the position the particle will rotate to face for a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the position that the particle must face.
	     */
	    static POSITION_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleRotateToPositionNode</code>
	     */
	    constructor(mode: number, position?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleRotateToPositionState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleRotateToPositionNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleRotationalVelocityNode = require("awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleRotationalVelocityState extends ParticleStateBase {
	    /** @private */
	    static ROTATIONALVELOCITY_INDEX: number;
	    private _particleRotationalVelocityNode;
	    private _rotationalVelocityData;
	    private _rotationalVelocity;
	    /**
	     * Defines the default rotationalVelocity of the state, used when in global mode.
	     */
	    rotationalVelocity: Vector3D;
	    /**
	     *
	     */
	    getRotationalVelocities(): Vector3D[];
	    setRotationalVelocities(value: Vector3D[]): void;
	    constructor(animator: ParticleAnimator, particleRotationNode: ParticleRotationalVelocityNode);
	    /**
	     * @inheritDoc
	     */
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateRotationalVelocityData();
	}
	export = ParticleRotationalVelocityState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleRotationalVelocityState = require("awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState");
	/**
	 * A particle animation node used to set the starting rotational velocity of a particle.
	 */
	class ParticleRotationalVelocityNode extends ParticleNodeBase {
	    /** @private */
	    _iRotationalVelocity: Vector3D;
	    /**
	     * Reference for rotational velocity node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the rotational velocity around an axis of the particle.
	     */
	    static ROTATIONALVELOCITY_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleRotationalVelocityNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     */
	    constructor(mode: number, rotationalVelocity?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleRotationalVelocityState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleRotationalVelocityNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleScaleState" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleScaleNode = require("awayjs-renderergl/lib/animators/nodes/ParticleScaleNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleScaleState extends ParticleStateBase {
	    /** @private */
	    static SCALE_INDEX: number;
	    private _particleScaleNode;
	    private _usesCycle;
	    private _usesPhase;
	    private _minScale;
	    private _maxScale;
	    private _cycleDuration;
	    private _cyclePhase;
	    private _scaleData;
	    /**
	     * Defines the end scale of the state, when in global mode. Defaults to 1.
	     */
	    minScale: number;
	    /**
	     * Defines the end scale of the state, when in global mode. Defaults to 1.
	     */
	    maxScale: number;
	    /**
	     * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
	     */
	    cycleDuration: number;
	    /**
	     * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
	     */
	    cyclePhase: number;
	    constructor(animator: ParticleAnimator, particleScaleNode: ParticleScaleNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateScaleData();
	}
	export = ParticleScaleState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleScaleNode" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleScaleState = require("awayjs-renderergl/lib/animators/states/ParticleScaleState");
	/**
	 * A particle animation node used to control the scale variation of a particle over time.
	 */
	class ParticleScaleNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesCycle: boolean;
	    /** @private */
	    _iUsesPhase: boolean;
	    /** @private */
	    _iMinScale: number;
	    /** @private */
	    _iMaxScale: number;
	    /** @private */
	    _iCycleDuration: number;
	    /** @private */
	    _iCyclePhase: number;
	    /**
	     * Reference for scale node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> representing the min scale (x), max scale(y), optional cycle speed (z) and phase offset (w) applied to the particle.
	     */
	    static SCALE_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleScaleNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of animation independent of particle duration. Defaults to false.
	     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the animation cycle. Defaults to false.
	     * @param    [optional] minScale        Defines the default min scale transform of the node, when in global mode. Defaults to 1.
	     * @param    [optional] maxScale        Defines the default max color transform of the node, when in global mode. Defaults to 1.
	     * @param    [optional] cycleDuration   Defines the default duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
	     * @param    [optional] cyclePhase      Defines the default phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
	     */
	    constructor(mode: number, usesCycle: boolean, usesPhase: boolean, minScale?: number, maxScale?: number, cycleDuration?: number, cyclePhase?: number);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleScaleState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleScaleNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ColorSegmentPoint = require("awayjs-renderergl/lib/animators/data/ColorSegmentPoint");
	import ParticleSegmentedColorNode = require("awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 *
	 */
	class ParticleSegmentedColorState extends ParticleStateBase {
	    /** @private */
	    static START_MULTIPLIER_INDEX: number;
	    /** @private */
	    static START_OFFSET_INDEX: number;
	    /** @private */
	    static TIME_DATA_INDEX: number;
	    private _usesMultiplier;
	    private _usesOffset;
	    private _startColor;
	    private _endColor;
	    private _segmentPoints;
	    private _numSegmentPoint;
	    private _timeLifeData;
	    private _multiplierData;
	    private _offsetData;
	    /**
	     * Defines the start color transform of the state, when in global mode.
	     */
	    startColor: ColorTransform;
	    /**
	     * Defines the end color transform of the state, when in global mode.
	     */
	    endColor: ColorTransform;
	    /**
	     * Defines the number of segments.
	     */
	    numSegmentPoint: number;
	    /**
	     * Defines the key points of color
	     */
	    segmentPoints: ColorSegmentPoint[];
	    usesMultiplier: boolean;
	    usesOffset: boolean;
	    constructor(animator: ParticleAnimator, particleSegmentedColorNode: ParticleSegmentedColorNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateColorData();
	}
	export = ParticleSegmentedColorState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode" {
	import ColorTransform = require("awayjs-core/lib/geom/ColorTransform");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ColorSegmentPoint = require("awayjs-renderergl/lib/animators/data/ColorSegmentPoint");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	/**
	 *
	 */
	class ParticleSegmentedColorNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesMultiplier: boolean;
	    /** @private */
	    _iUsesOffset: boolean;
	    /** @private */
	    _iStartColor: ColorTransform;
	    /** @private */
	    _iEndColor: ColorTransform;
	    /** @private */
	    _iNumSegmentPoint: number;
	    /** @private */
	    _iSegmentPoints: ColorSegmentPoint[];
	    constructor(usesMultiplier: boolean, usesOffset: boolean, numSegmentPoint: number, startColor: ColorTransform, endColor: ColorTransform, segmentPoints: ColorSegmentPoint[]);
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	}
	export = ParticleSegmentedColorNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleSpriteSheetNode = require("awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleSpriteSheetState extends ParticleStateBase {
	    /** @private */
	    static UV_INDEX_0: number;
	    /** @private */
	    static UV_INDEX_1: number;
	    private _particleSpriteSheetNode;
	    private _usesCycle;
	    private _usesPhase;
	    private _totalFrames;
	    private _numColumns;
	    private _numRows;
	    private _cycleDuration;
	    private _cyclePhase;
	    private _spriteSheetData;
	    /**
	     * Defines the cycle phase, when in global mode. Defaults to zero.
	     */
	    cyclePhase: number;
	    /**
	     * Defines the cycle duration in seconds, when in global mode. Defaults to 1.
	     */
	    cycleDuration: number;
	    constructor(animator: ParticleAnimator, particleSpriteSheetNode: ParticleSpriteSheetNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	    private updateSpriteSheetData();
	}
	export = ParticleSpriteSheetState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleSpriteSheetState = require("awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState");
	/**
	 * A particle animation node used when a spritesheet texture is required to animate the particle.
	 * NB: to enable use of this node, the <code>repeat</code> property on the material has to be set to true.
	 */
	class ParticleSpriteSheetNode extends ParticleNodeBase {
	    /** @private */
	    _iUsesCycle: boolean;
	    /** @private */
	    _iUsesPhase: boolean;
	    /** @private */
	    _iTotalFrames: number;
	    /** @private */
	    _iNumColumns: number;
	    /** @private */
	    _iNumRows: number;
	    /** @private */
	    _iCycleDuration: number;
	    /** @private */
	    _iCyclePhase: number;
	    /**
	     * Reference for spritesheet node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> representing the cycleDuration (x), optional phaseTime (y).
	     */
	    static UV_VECTOR3D: string;
	    /**
	     * Defines the number of columns in the spritesheet, when in global mode. Defaults to 1. Read only.
	     */
	    numColumns: number;
	    /**
	     * Defines the number of rows in the spritesheet, when in global mode. Defaults to 1. Read only.
	     */
	    numRows: number;
	    /**
	     * Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows. Read only.
	     */
	    totalFrames: number;
	    /**
	     * Creates a new <code>ParticleSpriteSheetNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] numColumns      Defines the number of columns in the spritesheet, when in global mode. Defaults to 1.
	     * @param    [optional] numRows         Defines the number of rows in the spritesheet, when in global mode. Defaults to 1.
	     * @param    [optional] cycleDuration   Defines the default cycle duration in seconds, when in global mode. Defaults to 1.
	     * @param    [optional] cyclePhase      Defines the default cycle phase, when in global mode. Defaults to 0.
	     * @param    [optional] totalFrames     Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows.
	     * @param    [optional] looping         Defines whether the spritesheet animation is set to loop indefinitely. Defaults to true.
	     */
	    constructor(mode: number, usesCycle: boolean, usesPhase: boolean, numColumns?: number, numRows?: number, cycleDuration?: number, cyclePhase?: number, totalFrames?: number);
	    /**
	     * @inheritDoc
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleSpriteSheetState;
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleSpriteSheetNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleUVState" {
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleUVNode = require("awayjs-renderergl/lib/animators/nodes/ParticleUVNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleUVState extends ParticleStateBase {
	    /** @private */
	    static UV_INDEX: number;
	    private _particleUVNode;
	    constructor(animator: ParticleAnimator, particleUVNode: ParticleUVNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticleUVState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleUVNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleUVState = require("awayjs-renderergl/lib/animators/states/ParticleUVState");
	/**
	 * A particle animation node used to control the UV offset and scale of a particle over time.
	 */
	class ParticleUVNode extends ParticleNodeBase {
	    /** @private */
	    _iUvData: Vector3D;
	    /**
	     *
	     */
	    static U_AXIS: string;
	    /**
	     *
	     */
	    static V_AXIS: string;
	    private _cycle;
	    private _scale;
	    private _axis;
	    /**
	     * Creates a new <code>ParticleTimeNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] cycle           Defines whether the time track is in loop mode. Defaults to false.
	     * @param    [optional] scale           Defines whether the time track is in loop mode. Defaults to false.
	     * @param    [optional] axis            Defines whether the time track is in loop mode. Defaults to false.
	     */
	    constructor(mode: number, cycle?: number, scale?: number, axis?: string);
	    /**
	     *
	     */
	    cycle: number;
	    /**
	     *
	     */
	    scale: number;
	    /**
	     *
	     */
	    axis: string;
	    /**
	     * @inheritDoc
	     */
	    getAGALUVCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleUVState;
	    private updateUVData();
	    /**
	     * @inheritDoc
	     */
	    _iProcessAnimationSetting(particleAnimationSet: ParticleAnimationSet): void;
	}
	export = ParticleUVNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/ParticleVelocityState" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Camera = require("awayjs-display/lib/entities/Camera");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ParticleAnimator = require("awayjs-renderergl/lib/animators/ParticleAnimator");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import AnimationSubGeometry = require("awayjs-renderergl/lib/animators/data/AnimationSubGeometry");
	import ParticleVelocityNode = require("awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode");
	import ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
	import RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
	/**
	 * ...
	 */
	class ParticleVelocityState extends ParticleStateBase {
	    /** @private */
	    static VELOCITY_INDEX: number;
	    private _particleVelocityNode;
	    private _velocity;
	    /**
	     * Defines the default velocity vector of the state, used when in global mode.
	     */
	    velocity: Vector3D;
	    /**
	     *
	     */
	    getVelocities(): Vector3D[];
	    setVelocities(value: Vector3D[]): void;
	    constructor(animator: ParticleAnimator, particleVelocityNode: ParticleVelocityNode);
	    setRenderState(stage: Stage, renderable: RenderableBase, animationSubGeometry: AnimationSubGeometry, animationRegisterCache: AnimationRegisterCache, camera: Camera): void;
	}
	export = ParticleVelocityState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationRegisterCache = require("awayjs-renderergl/lib/animators/data/AnimationRegisterCache");
	import ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
	import ParticleProperties = require("awayjs-renderergl/lib/animators/data/ParticleProperties");
	import ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
	import ParticleVelocityState = require("awayjs-renderergl/lib/animators/states/ParticleVelocityState");
	/**
	 * A particle animation node used to set the starting velocity of a particle.
	 */
	class ParticleVelocityNode extends ParticleNodeBase {
	    /** @private */
	    _iVelocity: Vector3D;
	    /**
	     * Reference for velocity node properties on a single particle (when in local property mode).
	     * Expects a <code>Vector3D</code> object representing the direction of movement on the particle.
	     */
	    static VELOCITY_VECTOR3D: string;
	    /**
	     * Creates a new <code>ParticleVelocityNode</code>
	     *
	     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
	     * @param    [optional] velocity        Defines the default velocity vector of the node, used when in global mode.
	     */
	    constructor(mode: number, velocity?: Vector3D);
	    /**
	     * @inheritDoc
	     */
	    getAGALVertexCode(shaderObject: ShaderObjectBase, animationRegisterCache: AnimationRegisterCache): string;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): ParticleVelocityState;
	    /**
	     * @inheritDoc
	     */
	    _iGeneratePropertyOfOneParticle(param: ParticleProperties): void;
	}
	export = ParticleVelocityNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import SkeletonBinaryLERPNode = require("awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode");
	import AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
	import ISkeletonAnimationState = require("awayjs-renderergl/lib/animators/states/ISkeletonAnimationState");
	/**
	 *
	 */
	class SkeletonBinaryLERPState extends AnimationStateBase implements ISkeletonAnimationState {
	    private _blendWeight;
	    private _skeletonAnimationNode;
	    private _skeletonPose;
	    private _skeletonPoseDirty;
	    private _inputA;
	    private _inputB;
	    /**
	     * Defines a fractional value between 0 and 1 representing the blending ratio between inputA (0) and inputB (1),
	     * used to produce the skeleton pose output.
	     *
	     * @see inputA
	     * @see inputB
	     */
	    blendWeight: number;
	    constructor(animator: AnimatorBase, skeletonAnimationNode: SkeletonBinaryLERPNode);
	    /**
	     * @inheritDoc
	     */
	    phase(value: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateTime(time: number): void;
	    /**
	     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
	     */
	    getSkeletonPose(skeleton: Skeleton): SkeletonPose;
	    /**
	     * @inheritDoc
	     */
	    _pUpdatePositionDelta(): void;
	    /**
	     * Updates the output skeleton pose of the node based on the blendWeight value between input nodes.
	     *
	     * @param skeleton The skeleton used by the animator requesting the ouput pose.
	     */
	    private updateSkeletonPose(skeleton);
	}
	export = SkeletonBinaryLERPState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonBinaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState");
	/**
	 * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.
	 */
	class SkeletonBinaryLERPNode extends AnimationNodeBase {
	    /**
	     * Defines input node A to use for the blended output.
	     */
	    inputA: AnimationNodeBase;
	    /**
	     * Defines input node B to use for the blended output.
	     */
	    inputB: AnimationNodeBase;
	    /**
	     * Creates a new <code>SkeletonBinaryLERPNode</code> object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): SkeletonBinaryLERPState;
	}
	export = SkeletonBinaryLERPNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/AnimationClipState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import AnimationClipNodeBase = require("awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase");
	import AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
	/**
	 *
	 */
	class AnimationClipState extends AnimationStateBase {
	    private _animationClipNode;
	    private _animationStatePlaybackComplete;
	    _pBlendWeight: number;
	    _pCurrentFrame: number;
	    _pNextFrame: number;
	    _pOldFrame: number;
	    _pTimeDir: number;
	    _pFramesDirty: boolean;
	    /**
	     * Returns a fractional value between 0 and 1 representing the blending ratio of the current playhead position
	     * between the current frame (0) and next frame (1) of the animation.
	     *
	     * @see #currentFrame
	     * @see #nextFrame
	     */
	    blendWeight: number;
	    /**
	     * Returns the current frame of animation in the clip based on the internal playhead position.
	     */
	    currentFrame: number;
	    /**
	     * Returns the next frame of animation in the clip based on the internal playhead position.
	     */
	    nextFrame: number;
	    constructor(animator: AnimatorBase, animationClipNode: AnimationClipNodeBase);
	    /**
	     * @inheritDoc
	     */
	    update(time: number): void;
	    /**
	     * @inheritDoc
	     */
	    phase(value: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateTime(time: number): void;
	    /**
	     * Updates the nodes internal playhead to determine the current and next animation frame, and the blendWeight between the two.
	     *
	     * @see #currentFrame
	     * @see #nextFrame
	     * @see #blendWeight
	     */
	    _pUpdateFrames(): void;
	    private notifyPlaybackComplete();
	}
	export = AnimationClipState;
	
}
declare module "awayjs-renderergl/lib/animators/states/SkeletonClipState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import SkeletonClipNode = require("awayjs-renderergl/lib/animators/nodes/SkeletonClipNode");
	import AnimationClipState = require("awayjs-renderergl/lib/animators/states/AnimationClipState");
	import ISkeletonAnimationState = require("awayjs-renderergl/lib/animators/states/ISkeletonAnimationState");
	/**
	 *
	 */
	class SkeletonClipState extends AnimationClipState implements ISkeletonAnimationState {
	    private _rootPos;
	    private _frames;
	    private _skeletonClipNode;
	    private _skeletonPose;
	    private _skeletonPoseDirty;
	    private _currentPose;
	    private _nextPose;
	    /**
	     * Returns the current skeleton pose frame of animation in the clip based on the internal playhead position.
	     */
	    currentPose: SkeletonPose;
	    /**
	     * Returns the next skeleton pose frame of animation in the clip based on the internal playhead position.
	     */
	    nextPose: SkeletonPose;
	    constructor(animator: AnimatorBase, skeletonClipNode: SkeletonClipNode);
	    /**
	     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
	     */
	    getSkeletonPose(skeleton: Skeleton): SkeletonPose;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateTime(time: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateFrames(): void;
	    /**
	     * Updates the output skeleton pose of the node based on the internal playhead position.
	     *
	     * @param skeleton The skeleton used by the animator requesting the ouput pose.
	     */
	    private updateSkeletonPose(skeleton);
	    /**
	     * @inheritDoc
	     */
	    _pUpdatePositionDelta(): void;
	}
	export = SkeletonClipState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import AnimationClipNodeBase = require("awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase");
	import SkeletonClipState = require("awayjs-renderergl/lib/animators/states/SkeletonClipState");
	/**
	 * A skeleton animation node containing time-based animation data as individual skeleton poses.
	 */
	class SkeletonClipNode extends AnimationClipNodeBase {
	    private _frames;
	    /**
	     * Determines whether to use SLERP equations (true) or LERP equations (false) in the calculation
	     * of the output skeleton pose. Defaults to false.
	     */
	    highQuality: boolean;
	    /**
	     * Returns a vector of skeleton poses representing the pose of each animation frame in the clip.
	     */
	    frames: SkeletonPose[];
	    /**
	     * Creates a new <code>SkeletonClipNode</code> object.
	     */
	    constructor();
	    /**
	     * Adds a skeleton pose frame to the internal timeline of the animation node.
	     *
	     * @param skeletonPose The skeleton pose object to add to the timeline of the node.
	     * @param duration The specified duration of the frame in milliseconds.
	     */
	    addFrame(skeletonPose: SkeletonPose, duration: number): void;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): SkeletonClipState;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateStitch(): void;
	}
	export = SkeletonClipNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/SkeletonDifferenceState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import SkeletonDifferenceNode = require("awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode");
	import AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
	import ISkeletonAnimationState = require("awayjs-renderergl/lib/animators/states/ISkeletonAnimationState");
	/**
	 *
	 */
	class SkeletonDifferenceState extends AnimationStateBase implements ISkeletonAnimationState {
	    private _blendWeight;
	    private static _tempQuat;
	    private _skeletonAnimationNode;
	    private _skeletonPose;
	    private _skeletonPoseDirty;
	    private _baseInput;
	    private _differenceInput;
	    /**
	     * Defines a fractional value between 0 and 1 representing the blending ratio between the base input (0) and difference input (1),
	     * used to produce the skeleton pose output.
	     *
	     * @see #baseInput
	     * @see #differenceInput
	     */
	    blendWeight: number;
	    constructor(animator: AnimatorBase, skeletonAnimationNode: SkeletonDifferenceNode);
	    /**
	     * @inheritDoc
	     */
	    phase(value: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateTime(time: number): void;
	    /**
	     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
	     */
	    getSkeletonPose(skeleton: Skeleton): SkeletonPose;
	    /**
	     * @inheritDoc
	     */
	    _pUpdatePositionDelta(): void;
	    /**
	     * Updates the output skeleton pose of the node based on the blendWeight value between base input and difference input nodes.
	     *
	     * @param skeleton The skeleton used by the animator requesting the ouput pose.
	     */
	    private updateSkeletonPose(skeleton);
	}
	export = SkeletonDifferenceState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonDifferenceState = require("awayjs-renderergl/lib/animators/states/SkeletonDifferenceState");
	/**
	 * A skeleton animation node that uses a difference input pose with a base input pose to blend a linearly interpolated output of a skeleton pose.
	 */
	class SkeletonDifferenceNode extends AnimationNodeBase {
	    /**
	     * Defines a base input node to use for the blended output.
	     */
	    baseInput: AnimationNodeBase;
	    /**
	     * Defines a difference input node to use for the blended output.
	     */
	    differenceInput: AnimationNodeBase;
	    /**
	     * Creates a new <code>SkeletonAdditiveNode</code> object.
	     */
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): SkeletonDifferenceState;
	}
	export = SkeletonDifferenceNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/SkeletonDirectionalState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import SkeletonDirectionalNode = require("awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode");
	import AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
	import ISkeletonAnimationState = require("awayjs-renderergl/lib/animators/states/ISkeletonAnimationState");
	/**
	 *
	 */
	class SkeletonDirectionalState extends AnimationStateBase implements ISkeletonAnimationState {
	    private _skeletonAnimationNode;
	    private _skeletonPose;
	    private _skeletonPoseDirty;
	    private _inputA;
	    private _inputB;
	    private _blendWeight;
	    private _direction;
	    private _blendDirty;
	    private _forward;
	    private _backward;
	    private _left;
	    private _right;
	    /**
	     * Defines the direction in degrees of the aniamtion between the forwards (0), right(90) backwards (180) and left(270) input nodes,
	     * used to produce the skeleton pose output.
	     */
	    direction: number;
	    constructor(animator: AnimatorBase, skeletonAnimationNode: SkeletonDirectionalNode);
	    /**
	     * @inheritDoc
	     */
	    phase(value: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUdateTime(time: number): void;
	    /**
	     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
	     */
	    getSkeletonPose(skeleton: Skeleton): SkeletonPose;
	    /**
	     * @inheritDoc
	     */
	    _pUpdatePositionDelta(): void;
	    /**
	     * Updates the output skeleton pose of the node based on the direction value between forward, backwards, left and right input nodes.
	     *
	     * @param skeleton The skeleton used by the animator requesting the ouput pose.
	     */
	    private updateSkeletonPose(skeleton);
	    /**
	     * Updates the blend value for the animation output based on the direction value between forward, backwards, left and right input nodes.
	     *
	     * @private
	     */
	    private updateBlend();
	}
	export = SkeletonDirectionalState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonDirectionalState = require("awayjs-renderergl/lib/animators/states/SkeletonDirectionalState");
	/**
	 * A skeleton animation node that uses four directional input poses with an input direction to blend a linearly interpolated output of a skeleton pose.
	 */
	class SkeletonDirectionalNode extends AnimationNodeBase {
	    /**
	     * Defines the forward configured input node to use for the blended output.
	     */
	    forward: AnimationNodeBase;
	    /**
	     * Defines the backwards configured input node to use for the blended output.
	     */
	    backward: AnimationNodeBase;
	    /**
	     * Defines the left configured input node to use for the blended output.
	     */
	    left: AnimationNodeBase;
	    /**
	     * Defines the right configured input node to use for the blended output.
	     */
	    right: AnimationNodeBase;
	    constructor();
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): SkeletonDirectionalState;
	}
	export = SkeletonDirectionalNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import Skeleton = require("awayjs-renderergl/lib/animators/data/Skeleton");
	import SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
	import SkeletonNaryLERPNode = require("awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode");
	import AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
	import ISkeletonAnimationState = require("awayjs-renderergl/lib/animators/states/ISkeletonAnimationState");
	/**
	 *
	 */
	class SkeletonNaryLERPState extends AnimationStateBase implements ISkeletonAnimationState {
	    private _skeletonAnimationNode;
	    private _skeletonPose;
	    private _skeletonPoseDirty;
	    private _blendWeights;
	    private _inputs;
	    constructor(animator: AnimatorBase, skeletonAnimationNode: SkeletonNaryLERPNode);
	    /**
	     * @inheritDoc
	     */
	    phase(value: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUdateTime(time: number): void;
	    /**
	     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
	     */
	    getSkeletonPose(skeleton: Skeleton): SkeletonPose;
	    /**
	     * Returns the blend weight of the skeleton aniamtion node that resides at the given input index.
	     *
	     * @param index The input index for which the skeleton animation node blend weight is requested.
	     */
	    getBlendWeightAt(index: number): number;
	    /**
	     * Sets the blend weight of the skeleton aniamtion node that resides at the given input index.
	     *
	     * @param index The input index on which the skeleton animation node blend weight is to be set.
	     * @param blendWeight The blend weight value to use for the given skeleton animation node index.
	     */
	    setBlendWeightAt(index: number, blendWeight: number): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdatePositionDelta(): void;
	    /**
	     * Updates the output skeleton pose of the node based on the blend weight values given to the input nodes.
	     *
	     * @param skeleton The skeleton used by the animator requesting the ouput pose.
	     */
	    private updateSkeletonPose(skeleton);
	}
	export = SkeletonNaryLERPState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonNaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState");
	/**
	 * A skeleton animation node that uses an n-dimensional array of animation node inputs to blend a lineraly interpolated output of a skeleton pose.
	 */
	class SkeletonNaryLERPNode extends AnimationNodeBase {
	    _iInputs: AnimationNodeBase[];
	    private _numInputs;
	    numInputs: number;
	    /**
	     * Creates a new <code>SkeletonNaryLERPNode</code> object.
	     */
	    constructor();
	    /**
	     * Returns an integer representing the input index of the given skeleton animation node.
	     *
	     * @param input The skeleton animation node for with the input index is requested.
	     */
	    getInputIndex(input: AnimationNodeBase): number;
	    /**
	     * Returns the skeleton animation node object that resides at the given input index.
	     *
	     * @param index The input index for which the skeleton animation node is requested.
	     */
	    getInputAt(index: number): AnimationNodeBase;
	    /**
	     * Adds a new skeleton animation node input to the animation node.
	     */
	    addInput(input: AnimationNodeBase): void;
	    /**
	     * @inheritDoc
	     */
	    getAnimationState(animator: AnimatorBase): SkeletonNaryLERPState;
	}
	export = SkeletonNaryLERPNode;
	
}
declare module "awayjs-renderergl/lib/animators/states/VertexClipState" {
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import VertexClipNode = require("awayjs-renderergl/lib/animators/nodes/VertexClipNode");
	import AnimationClipState = require("awayjs-renderergl/lib/animators/states/AnimationClipState");
	import IVertexAnimationState = require("awayjs-renderergl/lib/animators/states/IVertexAnimationState");
	/**
	 *
	 */
	class VertexClipState extends AnimationClipState implements IVertexAnimationState {
	    private _frames;
	    private _vertexClipNode;
	    private _currentGeometry;
	    private _nextGeometry;
	    /**
	     * @inheritDoc
	     */
	    currentGeometry: Geometry;
	    /**
	     * @inheritDoc
	     */
	    nextGeometry: Geometry;
	    constructor(animator: AnimatorBase, vertexClipNode: VertexClipNode);
	    /**
	     * @inheritDoc
	     */
	    _pUpdateFrames(): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdatePositionDelta(): void;
	}
	export = VertexClipState;
	
}
declare module "awayjs-renderergl/lib/animators/nodes/VertexClipNode" {
	import Vector3D = require("awayjs-core/lib/geom/Vector3D");
	import Geometry = require("awayjs-display/lib/base/Geometry");
	import AnimationClipNodeBase = require("awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase");
	/**
	 * A vertex animation node containing time-based animation data as individual geometry obejcts.
	 */
	class VertexClipNode extends AnimationClipNodeBase {
	    private _frames;
	    private _translations;
	    /**
	     * Returns a vector of geometry frames representing the vertex values of each animation frame in the clip.
	     */
	    frames: Geometry[];
	    /**
	     * Creates a new <code>VertexClipNode</code> object.
	     */
	    constructor();
	    /**
	     * Adds a geometry object to the internal timeline of the animation node.
	     *
	     * @param geometry The geometry object to add to the timeline of the node.
	     * @param duration The specified duration of the frame in milliseconds.
	     * @param translation The absolute translation of the frame, used in root delta calculations for mesh movement.
	     */
	    addFrame(geometry: Geometry, duration: number, translation?: Vector3D): void;
	    /**
	     * @inheritDoc
	     */
	    _pUpdateStitch(): void;
	}
	export = VertexClipNode;
	
}
declare module "awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState" {
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import SkeletonBinaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState");
	import CrossfadeTransitionNode = require("awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode");
	/**
	 *
	 */
	class CrossfadeTransitionState extends SkeletonBinaryLERPState {
	    private _crossfadeTransitionNode;
	    private _animationStateTransitionComplete;
	    constructor(animator: AnimatorBase, skeletonAnimationNode: CrossfadeTransitionNode);
	    /**
	     * @inheritDoc
	     */
	    _pUpdateTime(time: number): void;
	}
	export = CrossfadeTransitionState;
	
}
declare module "awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode" {
	import SkeletonBinaryLERPNode = require("awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode");
	/**
	 * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.
	 */
	class CrossfadeTransitionNode extends SkeletonBinaryLERPNode {
	    blendSpeed: number;
	    startBlend: number;
	    /**
	     * Creates a new <code>CrossfadeTransitionNode</code> object.
	     */
	    constructor();
	}
	export = CrossfadeTransitionNode;
	
}
declare module "awayjs-renderergl/lib/animators/transitions/CrossfadeTransition" {
	import AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
	import AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
	import IAnimationTransition = require("awayjs-renderergl/lib/animators/transitions/IAnimationTransition");
	/**
	 *
	 */
	class CrossfadeTransition implements IAnimationTransition {
	    blendSpeed: number;
	    constructor(blendSpeed: number);
	    getAnimationNode(animator: AnimatorBase, startNode: AnimationNodeBase, endNode: AnimationNodeBase, startBlend: number): AnimationNodeBase;
	}
	export = CrossfadeTransition;
	
}
declare module "awayjs-renderergl/lib/tools/commands/Merge" {
	import DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
	import Mesh = require("awayjs-display/lib/entities/Mesh");
	/**
	 *  Class Merge merges two or more static meshes into one.<code>Merge</code>
	 */
	class Merge {
	    private _objectSpace;
	    private _keepMaterial;
	    private _disposeSources;
	    private _geomVOs;
	    private _toDispose;
	    /**
	     * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier mesh material information or keeps its source material(s). Defaults to false.
	     * If false and receiver object has multiple materials, the last material found in receiver submeshes is applied to the merged submesh(es).
	     * @param    disposeSources  [optional]    Determines if the mesh and geometry source(s) used for the merging are disposed. Defaults to false.
	     * If true, only receiver geometry and resulting mesh are kept in  memory.
	     * @param    objectSpace     [optional]    Determines if source mesh(es) is/are merged using objectSpace or worldspace. Defaults to false.
	     */
	    constructor(keepMaterial?: boolean, disposeSources?: boolean, objectSpace?: boolean);
	    /**
	     * Determines if the mesh and geometry source(s) used for the merging are disposed. Defaults to false.
	     */
	    disposeSources: boolean;
	    /**
	     * Determines if the material source(s) used for the merging are disposed. Defaults to false.
	     */
	    keepMaterial: boolean;
	    /**
	     * Determines if source mesh(es) is/are merged using objectSpace or worldspace. Defaults to false.
	     */
	    objectSpace: boolean;
	    /**
	     * Merges all the children of a container into a single Mesh. If no Mesh object is found, method returns the receiver without modification.
	     *
	     * @param    receiver           The Mesh to receive the merged contents of the container.
	     * @param    objectContainer    The DisplayObjectContainer holding the meshes to be mergd.
	     *
	     * @return The merged Mesh instance.
	     */
	    applyToContainer(receiver: Mesh, objectContainer: DisplayObjectContainer): void;
	    /**
	     * Merges all the meshes found in the Array&lt;Mesh&gt; into a single Mesh.
	     *
	     * @param    receiver    The Mesh to receive the merged contents of the meshes.
	     * @param    meshes      A series of Meshes to be merged with the reciever mesh.
	     */
	    applyToMeshes(receiver: Mesh, meshes: Mesh[]): void;
	    /**
	     *  Merges 2 meshes into one. It is recommand to use apply when 2 meshes are to be merged. If more need to be merged, use either applyToMeshes or applyToContainer methods.
	     *
	     * @param    receiver    The Mesh to receive the merged contents of both meshes.
	     * @param    mesh        The Mesh to be merged with the receiver mesh
	     */
	    apply(receiver: Mesh, mesh: Mesh): void;
	    private reset();
	    private merge(destMesh, dispose);
	    private collect(mesh, dispose);
	    private getSubGeomData(material);
	    private parseContainer(receiver, object);
	}
	export = Merge;
	
}
declare module "awayjs-stagegl/lib/aglsl/Header" {
	class Header {
	    progid: number;
	    version: number;
	    type: string;
	    constructor();
	}
	export = Header;
	
}
declare module "awayjs-stagegl/lib/aglsl/Destination" {
	class Destination {
	    mask: number;
	    regnum: number;
	    regtype: number;
	    dim: number;
	    constructor();
	}
	export = Destination;
	
}
declare module "awayjs-stagegl/lib/aglsl/Token" {
	import Destination = require("awayjs-stagegl/lib/aglsl/Destination");
	class Token {
	    dest: Destination;
	    opcode: number;
	    a: Destination;
	    b: Destination;
	    constructor();
	}
	export = Token;
	
}
declare module "awayjs-stagegl/lib/aglsl/Description" {
	import Header = require("awayjs-stagegl/lib/aglsl/Header");
	import Token = require("awayjs-stagegl/lib/aglsl/Token");
	class Description {
	    regread: any[];
	    regwrite: any[];
	    hasindirect: boolean;
	    writedepth: boolean;
	    hasmatrix: boolean;
	    samplers: any[];
	    tokens: Token[];
	    header: Header;
	    constructor();
	}
	export = Description;
	
}
declare module "awayjs-stagegl/lib/aglsl/OpLUT" {
	class OpLUT {
	    s: string;
	    flags: number;
	    dest: boolean;
	    a: boolean;
	    b: boolean;
	    matrixwidth: number;
	    matrixheight: number;
	    ndwm: boolean;
	    scalar: boolean;
	    dm: boolean;
	    lod: boolean;
	    constructor(s: string, flags: number, dest: boolean, a: boolean, b: boolean, matrixwidth: number, matrixheight: number, ndwm: boolean, scaler: boolean, dm: boolean, lod: boolean);
	}
	export = OpLUT;
	
}
declare module "awayjs-stagegl/lib/aglsl/Mapping" {
	import OpLUT = require("awayjs-stagegl/lib/aglsl/OpLUT");
	class Mapping {
	    static agal2glsllut: OpLUT[];
	    constructor(include?: OpLUT);
	}
	export = Mapping;
	
}
declare module "awayjs-stagegl/lib/aglsl/AGALTokenizer" {
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import Description = require("awayjs-stagegl/lib/aglsl/Description");
	class AGALTokenizer {
	    constructor();
	    decribeAGALByteArray(bytes: ByteArray): Description;
	    readReg(s: any, mh: any, desc: any, bytes: any): void;
	}
	export = AGALTokenizer;
	
}
declare module "awayjs-stagegl/lib/aglsl/Sampler" {
	class Sampler {
	    lodbias: number;
	    dim: number;
	    readmode: number;
	    special: number;
	    wrap: number;
	    mipmap: number;
	    filter: number;
	    constructor();
	}
	export = Sampler;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLClearMask" {
	class ContextGLClearMask {
	    static COLOR: number;
	    static DEPTH: number;
	    static STENCIL: number;
	    static ALL: number;
	}
	export = ContextGLClearMask;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLProgramType" {
	class ContextGLProgramType {
	    static FRAGMENT: string;
	    static VERTEX: string;
	}
	export = ContextGLProgramType;
	
}
declare module "awayjs-stagegl/lib/base/ITextureBase" {
	interface ITextureBase {
	    dispose(): any;
	}
	export = ITextureBase;
	
}
declare module "awayjs-stagegl/lib/base/ICubeTexture" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import ITextureBase = require("awayjs-stagegl/lib/base/ITextureBase");
	interface ICubeTexture extends ITextureBase {
	    size: number;
	    uploadFromData(bitmapData: BitmapData, side: number, miplevel?: number): any;
	    uploadFromData(image: HTMLImageElement, side: number, miplevel?: number): any;
	    uploadCompressedTextureFromByteArray(data: ByteArray, byteArrayOffset: number, async: boolean): any;
	}
	export = ICubeTexture;
	
}
declare module "awayjs-stagegl/lib/base/OpCodes" {
	class OpCodes {
	    static trueValue: number;
	    static falseValue: number;
	    static intMask: number;
	    static drawTriangles: number;
	    static setProgramConstant: number;
	    static setProgram: number;
	    static present: number;
	    static clear: number;
	    static initProgram: number;
	    static initVertexBuffer: number;
	    static initIndexBuffer: number;
	    static configureBackBuffer: number;
	    static uploadArrayIndexBuffer: number;
	    static uploadArrayVertexBuffer: number;
	    static uploadAGALBytesProgram: number;
	    static setVertexBufferAt: number;
	    static uploadBytesIndexBuffer: number;
	    static uploadBytesVertexBuffer: number;
	    static setColorMask: number;
	    static setDepthTest: number;
	    static disposeProgram: number;
	    static disposeContext: number;
	    static disposeVertexBuffer: number;
	    static disposeIndexBuffer: number;
	    static initTexture: number;
	    static setTextureAt: number;
	    static uploadBytesTexture: number;
	    static disposeTexture: number;
	    static setCulling: number;
	    static setScissorRect: number;
	    static clearScissorRect: number;
	    static setBlendFactors: number;
	    static setRenderToTexture: number;
	    static clearTextureAt: number;
	    static clearVertexBufferAt: number;
	    static setStencilActions: number;
	    static setStencilReferenceValue: number;
	    static initCubeTexture: number;
	    static disposeCubeTexture: number;
	    static uploadBytesCubeTexture: number;
	    static clearRenderToTexture: number;
	    static enableErrorChecking: number;
	}
	export = OpCodes;
	
}
declare module "awayjs-stagegl/lib/base/ResourceBaseFlash" {
	class ResourceBaseFlash {
	    _pId: number;
	    id: number;
	    dispose(): void;
	}
	export = ResourceBaseFlash;
	
}
declare module "awayjs-stagegl/lib/base/CubeTextureFlash" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import ContextStage3D = require("awayjs-stagegl/lib/base/ContextStage3D");
	import ICubeTexture = require("awayjs-stagegl/lib/base/ICubeTexture");
	import ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
	class CubeTextureFlash extends ResourceBaseFlash implements ICubeTexture {
	    private _context;
	    private _size;
	    size: number;
	    constructor(context: ContextStage3D, size: number, format: string, forRTT: boolean, streaming?: boolean);
	    dispose(): void;
	    uploadFromData(bitmapData: BitmapData, side: number, miplevel?: number): any;
	    uploadFromData(image: HTMLImageElement, side: number, miplevel?: number): any;
	    uploadCompressedTextureFromByteArray(data: ByteArray, byteArrayOffset: number, async?: boolean): void;
	}
	export = CubeTextureFlash;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLTextureFormat" {
	class ContextGLTextureFormat {
	    static BGRA: string;
	    static BGRA_PACKED: string;
	    static BGR_PACKED: string;
	    static COMPRESSED: string;
	    static COMPRESSED_ALPHA: string;
	}
	export = ContextGLTextureFormat;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLBlendFactor" {
	class ContextGLBlendFactor {
	    static DESTINATION_ALPHA: string;
	    static DESTINATION_COLOR: string;
	    static ONE: string;
	    static ONE_MINUS_DESTINATION_ALPHA: string;
	    static ONE_MINUS_DESTINATION_COLOR: string;
	    static ONE_MINUS_SOURCE_ALPHA: string;
	    static ONE_MINUS_SOURCE_COLOR: string;
	    static SOURCE_ALPHA: string;
	    static SOURCE_COLOR: string;
	    static ZERO: string;
	}
	export = ContextGLBlendFactor;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLCompareMode" {
	class ContextGLCompareMode {
	    static ALWAYS: string;
	    static EQUAL: string;
	    static GREATER: string;
	    static GREATER_EQUAL: string;
	    static LESS: string;
	    static LESS_EQUAL: string;
	    static NEVER: string;
	    static NOT_EQUAL: string;
	}
	export = ContextGLCompareMode;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLMipFilter" {
	class ContextGLMipFilter {
	    static MIPLINEAR: string;
	    static MIPNEAREST: string;
	    static MIPNONE: string;
	}
	export = ContextGLMipFilter;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLTextureFilter" {
	class ContextGLTextureFilter {
	    static LINEAR: string;
	    static NEAREST: string;
	}
	export = ContextGLTextureFilter;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLTriangleFace" {
	class ContextGLTriangleFace {
	    static BACK: string;
	    static FRONT: string;
	    static FRONT_AND_BACK: string;
	    static NONE: string;
	}
	export = ContextGLTriangleFace;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLVertexBufferFormat" {
	class ContextGLVertexBufferFormat {
	    static BYTES_4: string;
	    static FLOAT_1: string;
	    static FLOAT_2: string;
	    static FLOAT_3: string;
	    static FLOAT_4: string;
	}
	export = ContextGLVertexBufferFormat;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLWrapMode" {
	class ContextGLWrapMode {
	    static CLAMP: string;
	    static REPEAT: string;
	}
	export = ContextGLWrapMode;
	
}
declare module "awayjs-stagegl/lib/base/TextureBaseWebGL" {
	class TextureBaseWebGL {
	    textureType: string;
	    _gl: WebGLRenderingContext;
	    constructor(gl: WebGLRenderingContext);
	    dispose(): void;
	    glTexture: WebGLTexture;
	}
	export = TextureBaseWebGL;
	
}
declare module "awayjs-stagegl/lib/base/CubeTextureWebGL" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import ICubeTexture = require("awayjs-stagegl/lib/base/ICubeTexture");
	import TextureBaseWebGL = require("awayjs-stagegl/lib/base/TextureBaseWebGL");
	class CubeTextureWebGL extends TextureBaseWebGL implements ICubeTexture {
	    private _textureSelectorDictionary;
	    textureType: string;
	    private _texture;
	    private _size;
	    constructor(gl: WebGLRenderingContext, size: number);
	    dispose(): void;
	    uploadFromData(bitmapData: BitmapData, side: number, miplevel?: number): any;
	    uploadFromData(image: HTMLImageElement, side: number, miplevel?: number): any;
	    uploadCompressedTextureFromByteArray(data: ByteArray, byteArrayOffset: number, async?: boolean): void;
	    size: number;
	    glTexture: WebGLTexture;
	}
	export = CubeTextureWebGL;
	
}
declare module "awayjs-stagegl/lib/base/IIndexBuffer" {
	interface IIndexBuffer {
	    numIndices: number;
	    uploadFromArray(data: number[], startOffset: number, count: number): any;
	    dispose(): any;
	}
	export = IIndexBuffer;
	
}
declare module "awayjs-stagegl/lib/base/IndexBufferWebGL" {
	import IIndexBuffer = require("awayjs-stagegl/lib/base/IIndexBuffer");
	class IndexBufferWebGL implements IIndexBuffer {
	    private _gl;
	    private _numIndices;
	    private _buffer;
	    constructor(gl: WebGLRenderingContext, numIndices: number);
	    uploadFromArray(data: number[], startOffset: number, count: number): void;
	    dispose(): void;
	    numIndices: number;
	    glBuffer: WebGLBuffer;
	}
	export = IndexBufferWebGL;
	
}
declare module "awayjs-stagegl/lib/base/IProgram" {
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	interface IProgram {
	    upload(vertexProgram: ByteArray, fragmentProgram: ByteArray): any;
	    dispose(): any;
	}
	export = IProgram;
	
}
declare module "awayjs-stagegl/lib/base/ProgramWebGL" {
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import IProgram = require("awayjs-stagegl/lib/base/IProgram");
	class ProgramWebGL implements IProgram {
	    private static _tokenizer;
	    private static _aglslParser;
	    private _gl;
	    private _program;
	    private _vertexShader;
	    private _fragmentShader;
	    constructor(gl: WebGLRenderingContext);
	    upload(vertexProgram: ByteArray, fragmentProgram: ByteArray): void;
	    dispose(): void;
	    focusProgram(): void;
	    glProgram: WebGLProgram;
	}
	export = ProgramWebGL;
	
}
declare module "awayjs-stagegl/lib/base/ITexture" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ITextureBase = require("awayjs-stagegl/lib/base/ITextureBase");
	interface ITexture extends ITextureBase {
	    width: number;
	    height: number;
	    uploadFromData(bitmapData: BitmapData, miplevel?: number): any;
	    uploadFromData(image: HTMLImageElement, miplevel?: number): any;
	}
	export = ITexture;
	
}
declare module "awayjs-stagegl/lib/base/TextureWebGL" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import ITexture = require("awayjs-stagegl/lib/base/ITexture");
	import TextureBaseWebGL = require("awayjs-stagegl/lib/base/TextureBaseWebGL");
	class TextureWebGL extends TextureBaseWebGL implements ITexture {
	    textureType: string;
	    private _width;
	    private _height;
	    private _frameBuffer;
	    private _glTexture;
	    constructor(gl: WebGLRenderingContext, width: number, height: number);
	    dispose(): void;
	    width: number;
	    height: number;
	    frameBuffer: WebGLFramebuffer;
	    uploadFromData(bitmapData: BitmapData, miplevel?: number): any;
	    uploadFromData(image: HTMLImageElement, miplevel?: number): any;
	    uploadCompressedTextureFromByteArray(data: ByteArray, byteArrayOffset: number, async?: boolean): void;
	    glTexture: WebGLTexture;
	    generateMipmaps(): void;
	}
	export = TextureWebGL;
	
}
declare module "awayjs-stagegl/lib/base/SamplerState" {
	class SamplerState {
	    type: number;
	    wrap: number;
	    filter: number;
	    mipfilter: number;
	}
	export = SamplerState;
	
}
declare module "awayjs-stagegl/lib/base/IVertexBuffer" {
	interface IVertexBuffer {
	    numVertices: number;
	    data32PerVertex: number;
	    uploadFromArray(data: number[], startVertex: number, numVertices: number): any;
	    dispose(): any;
	}
	export = IVertexBuffer;
	
}
declare module "awayjs-stagegl/lib/base/VertexBufferWebGL" {
	import IVertexBuffer = require("awayjs-stagegl/lib/base/IVertexBuffer");
	class VertexBufferWebGL implements IVertexBuffer {
	    private _gl;
	    private _numVertices;
	    private _data32PerVertex;
	    private _buffer;
	    constructor(gl: WebGLRenderingContext, numVertices: number, data32PerVertex: number);
	    uploadFromArray(vertices: number[], startVertex: number, numVertices: number): void;
	    numVertices: number;
	    data32PerVertex: number;
	    glBuffer: WebGLBuffer;
	    dispose(): void;
	}
	export = VertexBufferWebGL;
	
}
declare module "awayjs-stagegl/lib/base/ContextWebGL" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import CubeTextureWebGL = require("awayjs-stagegl/lib/base/CubeTextureWebGL");
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import IndexBufferWebGL = require("awayjs-stagegl/lib/base/IndexBufferWebGL");
	import ProgramWebGL = require("awayjs-stagegl/lib/base/ProgramWebGL");
	import TextureBaseWebGL = require("awayjs-stagegl/lib/base/TextureBaseWebGL");
	import TextureWebGL = require("awayjs-stagegl/lib/base/TextureWebGL");
	import VertexBufferWebGL = require("awayjs-stagegl/lib/base/VertexBufferWebGL");
	class ContextWebGL implements IContextGL {
	    private _blendFactorDictionary;
	    private _depthTestDictionary;
	    private _textureIndexDictionary;
	    private _textureTypeDictionary;
	    private _wrapDictionary;
	    private _filterDictionary;
	    private _mipmapFilterDictionary;
	    private _uniformLocationNameDictionary;
	    private _vertexBufferDimensionDictionary;
	    private _container;
	    private _width;
	    private _height;
	    private _drawing;
	    private _blendEnabled;
	    private _blendSourceFactor;
	    private _blendDestinationFactor;
	    private _indexBufferList;
	    private _vertexBufferList;
	    private _textureList;
	    private _programList;
	    private _samplerStates;
	    static MAX_SAMPLERS: number;
	    _gl: WebGLRenderingContext;
	    _currentProgram: ProgramWebGL;
	    private _activeTexture;
	    container: HTMLElement;
	    constructor(canvas: HTMLCanvasElement);
	    gl(): WebGLRenderingContext;
	    clear(red?: number, green?: number, blue?: number, alpha?: number, depth?: number, stencil?: number, mask?: number): void;
	    configureBackBuffer(width: number, height: number, antiAlias: number, enableDepthAndStencil?: boolean): void;
	    createCubeTexture(size: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): CubeTextureWebGL;
	    createIndexBuffer(numIndices: number): IndexBufferWebGL;
	    createProgram(): ProgramWebGL;
	    createTexture(width: number, height: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): TextureWebGL;
	    createVertexBuffer(numVertices: number, data32PerVertex: number): VertexBufferWebGL;
	    dispose(): void;
	    drawToBitmapData(destination: BitmapData): void;
	    drawTriangles(indexBuffer: IndexBufferWebGL, firstIndex?: number, numTriangles?: number): void;
	    present(): void;
	    setBlendFactors(sourceFactor: string, destinationFactor: string): void;
	    setColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;
	    setCulling(triangleFaceToCull: string, coordinateSystem?: string): void;
	    setDepthTest(depthMask: boolean, passCompareMode: string): void;
	    setProgram(program: ProgramWebGL): void;
	    setProgramConstantsFromMatrix(programType: string, firstRegister: number, matrix: Matrix3D, transposedMatrix?: boolean): void;
	    static modulo: number;
	    setProgramConstantsFromArray(programType: string, firstRegister: number, data: number[], numRegisters?: number): void;
	    setScissorRectangle(rectangle: Rectangle): void;
	    setTextureAt(sampler: number, texture: TextureBaseWebGL): void;
	    setSamplerStateAt(sampler: number, wrap: string, filter: string, mipfilter: string): void;
	    setVertexBufferAt(index: number, buffer: VertexBufferWebGL, bufferOffset?: number, format?: string): void;
	    setRenderToTexture(target: TextureBaseWebGL, enableDepthAndStencil?: boolean, antiAlias?: number, surfaceSelector?: number): void;
	    setRenderToBackBuffer(): void;
	    private updateBlendStatus();
	}
	export = ContextWebGL;
	
}
declare module "awayjs-stagegl/lib/pool/IndexData" {
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import IIndexBuffer = require("awayjs-stagegl/lib/base/IIndexBuffer");
	/**
	 *
	 */
	class IndexData {
	    private static LIMIT_VERTS;
	    private static LIMIT_INDICES;
	    private _dataDirty;
	    invalid: boolean[];
	    contexts: IContextGL[];
	    buffers: IIndexBuffer[];
	    data: number[];
	    indexMappings: number[];
	    originalIndices: number[];
	    offset: number;
	    level: number;
	    constructor(level: number);
	    updateData(offset: number, indices: number[], numVertices: number): void;
	    invalidateData(): void;
	    dispose(): void;
	    /**
	     * @private
	     */
	    private disposeBuffers();
	    /**
	     * @private
	     */
	    private invalidateBuffers();
	    /**
	     *
	     * @param data
	     * @private
	     */
	    private setData(data);
	}
	export = IndexData;
	
}
declare module "awayjs-stagegl/lib/pool/TextureDataPool" {
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import TextureData = require("awayjs-stagegl/lib/pool/TextureData");
	/**
	 * @class away.pool.TextureDataPool
	 */
	class TextureDataPool {
	    private _pool;
	    /**
	     * //TODO
	     *
	     * @param textureDataClass
	     */
	    constructor();
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     * @returns ITexture
	     */
	    getItem(textureProxy: TextureProxyBase): TextureData;
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     */
	    disposeItem(textureProxy: TextureProxyBase): void;
	}
	export = TextureDataPool;
	
}
declare module "awayjs-stagegl/lib/pool/TextureData" {
	import ITextureData = require("awayjs-core/lib/pool/ITextureData");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import TextureDataPool = require("awayjs-stagegl/lib/pool/TextureDataPool");
	import ITextureBase = require("awayjs-stagegl/lib/base/ITextureBase");
	/**
	 *
	 * @class away.pool.TextureDataBase
	 */
	class TextureData implements ITextureData {
	    private _pool;
	    texture: ITextureBase;
	    textureProxy: TextureProxyBase;
	    invalid: boolean;
	    constructor(pool: TextureDataPool, textureProxy: TextureProxyBase);
	    /**
	     *
	     */
	    dispose(): void;
	    /**
	     *
	     */
	    invalidate(): void;
	}
	export = TextureData;
	
}
declare module "awayjs-stagegl/lib/pool/ProgramDataPool" {
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	import ProgramData = require("awayjs-stagegl/lib/pool/ProgramData");
	/**
	 * @class away.pool.ProgramDataPool
	 */
	class ProgramDataPool {
	    private _pool;
	    private _stage;
	    /**
	     * //TODO
	     *
	     * @param textureDataClass
	     */
	    constructor(stage: Stage);
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     * @returns ITexture
	     */
	    getItem(key: string): ProgramData;
	    /**
	     * //TODO
	     *
	     * @param materialOwner
	     */
	    disposeItem(key: string): void;
	}
	export = ProgramDataPool;
	
}
declare module "awayjs-stagegl/lib/pool/ProgramData" {
	import ProgramDataPool = require("awayjs-stagegl/lib/pool/ProgramDataPool");
	import IProgram = require("awayjs-stagegl/lib/base/IProgram");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	/**
	 *
	 * @class away.pool.ProgramDataBase
	 */
	class ProgramData {
	    static PROGRAMDATA_ID_COUNT: number;
	    private _pool;
	    private _key;
	    stage: Stage;
	    usages: number;
	    program: IProgram;
	    id: number;
	    constructor(pool: ProgramDataPool, context: Stage, key: string);
	    /**
	     *
	     */
	    dispose(): void;
	}
	export = ProgramData;
	
}
declare module "awayjs-stagegl/lib/pool/VertexData" {
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import IVertexBuffer = require("awayjs-stagegl/lib/base/IVertexBuffer");
	/**
	 *
	 */
	class VertexData {
	    private _onVerticesUpdatedDelegate;
	    private _subGeometry;
	    private _dataType;
	    private _dataDirty;
	    invalid: boolean[];
	    buffers: IVertexBuffer[];
	    contexts: IContextGL[];
	    data: number[];
	    dataPerVertex: number;
	    constructor(subGeometry: SubGeometryBase, dataType: string);
	    updateData(originalIndices?: number[], indexMappings?: number[]): void;
	    dispose(): void;
	    /**
	     * @private
	     */
	    private disposeBuffers();
	    /**
	     * @private
	     */
	    private invalidateBuffers();
	    /**
	     *
	     * @param data
	     * @param dataPerVertex
	     * @private
	     */
	    private setData(data);
	    /**
	     * //TODO
	     *
	     * @param event
	     * @private
	     */
	    private _onVerticesUpdated(event);
	}
	export = VertexData;
	
}
declare module "awayjs-stagegl/lib/managers/StageManager" {
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import Stage = require("awayjs-stagegl/lib/base/Stage");
	/**
	 * The StageManager class provides a multiton object that handles management for Stage objects.
	 *
	 * @see away.base.Stage
	 */
	class StageManager extends EventDispatcher {
	    private static STAGE_MAX_QUANTITY;
	    private _stages;
	    private static _instance;
	    private static _numStages;
	    private _onContextCreatedDelegate;
	    /**
	     * Creates a new StageManager class.
	     * @param stage The Stage object that contains the Stage objects to be managed.
	     * @private
	     */
	    constructor();
	    /**
	     * Gets a StageManager instance for the given Stage object.
	     * @param stage The Stage object that contains the Stage objects to be managed.
	     * @return The StageManager instance for the given Stage object.
	     */
	    static getInstance(): StageManager;
	    /**
	     * Requests the Stage for the given index.
	     *
	     * @param index The index of the requested Stage.
	     * @param forceSoftware Whether to force software mode even if hardware acceleration is available.
	     * @param profile The compatibility profile, an enumeration of ContextProfile
	     * @return The Stage for the given index.
	     */
	    getStageAt(index: number, forceSoftware?: boolean, profile?: string, mode?: string): Stage;
	    /**
	     * Removes a Stage from the manager.
	     * @param stage
	     * @private
	     */
	    iRemoveStage(stage: Stage): void;
	    /**
	     * Get the next available stage. An error is thrown if there are no StageProxies available
	     * @param forceSoftware Whether to force software mode even if hardware acceleration is available.
	     * @param profile The compatibility profile, an enumeration of ContextProfile
	     * @return The allocated stage
	     */
	    getFreeStage(forceSoftware?: boolean, profile?: string, mode?: string): Stage;
	    /**
	     * Checks if a new stage can be created and managed by the class.
	     * @return true if there is one slot free for a new stage
	     */
	    hasFreeStage: boolean;
	    /**
	     * Returns the amount of stage objects that can be created and managed by the class
	     * @return the amount of free slots
	     */
	    numSlotsFree: number;
	    /**
	     * Returns the amount of Stage objects currently managed by the class.
	     * @return the amount of slots used
	     */
	    numSlotsUsed: number;
	    /**
	     * The maximum amount of Stage objects that can be managed by the class
	     */
	    numSlotsTotal: number;
	    private onContextCreated(event);
	}
	export = StageManager;
	
}
declare module "awayjs-stagegl/lib/base/Stage" {
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
	import CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
	import RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
	import Texture2DBase = require("awayjs-core/lib/textures/Texture2DBase");
	import TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import IIndexBuffer = require("awayjs-stagegl/lib/base/IIndexBuffer");
	import ITextureBase = require("awayjs-stagegl/lib/base/ITextureBase");
	import IndexData = require("awayjs-stagegl/lib/pool/IndexData");
	import ProgramData = require("awayjs-stagegl/lib/pool/ProgramData");
	import VertexData = require("awayjs-stagegl/lib/pool/VertexData");
	import StageManager = require("awayjs-stagegl/lib/managers/StageManager");
	/**
	 * Stage provides a proxy class to handle the creation and attachment of the Context
	 * (and in turn the back buffer) it uses. Stage should never be created directly,
	 * but requested through StageManager.
	 *
	 * @see away.managers.StageManager
	 *
	 */
	class Stage extends EventDispatcher {
	    private _programData;
	    private _texturePool;
	    private _programDataPool;
	    private _context;
	    private _container;
	    private _width;
	    private _height;
	    private _x;
	    private _y;
	    private _stageIndex;
	    private _usesSoftwareRendering;
	    private _profile;
	    private _stageManager;
	    private _antiAlias;
	    private _enableDepthAndStencil;
	    private _contextRequested;
	    private _renderTarget;
	    private _renderSurfaceSelector;
	    private _scissorRect;
	    private _color;
	    private _backBufferDirty;
	    private _viewPort;
	    private _enterFrame;
	    private _exitFrame;
	    private _viewportUpdated;
	    private _viewportDirty;
	    private _bufferClear;
	    private _initialised;
	    constructor(container: HTMLCanvasElement, stageIndex: number, stageManager: StageManager, forceSoftware?: boolean, profile?: string);
	    getProgramData(key: string): ProgramData;
	    setRenderTarget(target: TextureProxyBase, enableDepthAndStencil?: boolean, surfaceSelector?: number): void;
	    getRenderTexture(textureProxy: RenderTexture): ITextureBase;
	    /**
	     * Assigns an attribute stream
	     *
	     * @param index The attribute stream index for the vertex shader
	     * @param buffer
	     * @param offset
	     * @param stride
	     * @param format
	     */
	    activateBuffer(index: number, buffer: VertexData, offset: number, format: string): void;
	    disposeVertexData(buffer: VertexData): void;
	    activateRenderTexture(index: number, textureProxy: RenderTexture): void;
	    activateTexture(index: number, textureProxy: Texture2DBase): void;
	    activateCubeTexture(index: number, textureProxy: CubeTextureBase): void;
	    /**
	     * Retrieves the VertexBuffer object that contains triangle indices.
	     * @param context The ContextWeb for which we request the buffer
	     * @return The VertexBuffer object that contains triangle indices.
	     */
	    getIndexBuffer(buffer: IndexData): IIndexBuffer;
	    disposeIndexData(buffer: IndexData): void;
	    /**
	     * Requests a Context object to attach to the managed gl canvas.
	     */
	    requestContext(forceSoftware?: boolean, profile?: string, mode?: string): void;
	    /**
	     * The width of the gl canvas
	     */
	    width: number;
	    /**
	     * The height of the gl canvas
	     */
	    height: number;
	    /**
	     * The x position of the gl canvas
	     */
	    x: number;
	    /**
	     * The y position of the gl canvas
	     */
	    y: number;
	    visible: boolean;
	    container: HTMLElement;
	    /**
	     * The Context object associated with the given stage object.
	     */
	    context: IContextGL;
	    private notifyViewportUpdated();
	    private notifyEnterFrame();
	    private notifyExitFrame();
	    profile: string;
	    /**
	     * Disposes the Stage object, freeing the Context attached to the Stage.
	     */
	    dispose(): void;
	    /**
	     * Configures the back buffer associated with the Stage object.
	     * @param backBufferWidth The width of the backbuffer.
	     * @param backBufferHeight The height of the backbuffer.
	     * @param antiAlias The amount of anti-aliasing to use.
	     * @param enableDepthAndStencil Indicates whether the back buffer contains a depth and stencil buffer.
	     */
	    configureBackBuffer(backBufferWidth: number, backBufferHeight: number, antiAlias: number, enableDepthAndStencil: boolean): void;
	    enableDepthAndStencil: boolean;
	    renderTarget: TextureProxyBase;
	    renderSurfaceSelector: number;
	    clear(): void;
	    /**
	     * Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event. Special case for enterframe and exitframe events - will switch StageProxy into automatic render mode.
	     * You can register event listeners on all nodes in the display list for a specific type of event, phase, and priority.
	     *
	     * @param type The type of event.
	     * @param listener The listener function that processes the event.
	     * @param useCapture Determines whether the listener works in the capture phase or the target and bubbling phases. If useCapture is set to true, the listener processes the event only during the capture phase and not in the target or bubbling phase. If useCapture is false, the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call addEventListener twice, once with useCapture set to true, then again with useCapture set to false.
	     * @param priority The priority level of the event listener. The priority is designated by a signed 32-bit integer. The higher the number, the higher the priority. All listeners with priority n are processed before listeners of priority n-1. If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0.
	     * @param useWeakReference Determines whether the reference to the listener is strong or weak. A strong reference (the default) prevents your listener from being garbage-collected. A weak reference does not.
	     */
	    addEventListener(type: string, listener: Function): void;
	    /**
	     * Removes a listener from the EventDispatcher object. Special case for enterframe and exitframe events - will switch StageProxy out of automatic render mode.
	     * If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
	     *
	     * @param type The type of event.
	     * @param listener The listener object to remove.
	     * @param useCapture Specifies whether the listener was registered for the capture phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to removeEventListener() are required to remove both, one call with useCapture() set to true, and another call with useCapture() set to false.
	     */
	    removeEventListener(type: string, listener: Function): void;
	    scissorRect: Rectangle;
	    /**
	     * The index of the Stage which is managed by this instance of StageProxy.
	     */
	    stageIndex: number;
	    /**
	     * Indicates whether the Stage managed by this proxy is running in software mode.
	     * Remember to wait for the CONTEXT_CREATED event before checking this property,
	     * as only then will it be guaranteed to be accurate.
	     */
	    usesSoftwareRendering: boolean;
	    /**
	     * The antiAliasing of the Stage.
	     */
	    antiAlias: number;
	    /**
	     * A viewPort rectangle equivalent of the Stage size and position.
	     */
	    viewPort: Rectangle;
	    /**
	     * The background color of the Stage.
	     */
	    color: number;
	    /**
	     * The freshly cleared state of the backbuffer before any rendering
	     */
	    bufferClear: boolean;
	    registerProgram(programData: ProgramData): void;
	    unRegisterProgram(programData: ProgramData): void;
	    /**
	     * Frees the Context associated with this StageProxy.
	     */
	    private freeContext();
	    /**
	     * The Enter_Frame handler for processing the proxy.ENTER_FRAME and proxy.EXIT_FRAME event handlers.
	     * Typically the proxy.ENTER_FRAME listener would render the layers for this Stage instance.
	     */
	    private onEnterFrame(event);
	    recoverFromDisposal(): boolean;
	    private _callback(context);
	}
	export = Stage;
	
}
declare module "awayjs-stagegl/lib/base/IContextGL" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import ICubeTexture = require("awayjs-stagegl/lib/base/ICubeTexture");
	import IIndexBuffer = require("awayjs-stagegl/lib/base/IIndexBuffer");
	import IProgram = require("awayjs-stagegl/lib/base/IProgram");
	import ITexture = require("awayjs-stagegl/lib/base/ITexture");
	import ITextureBase = require("awayjs-stagegl/lib/base/ITextureBase");
	import IVertexBuffer = require("awayjs-stagegl/lib/base/IVertexBuffer");
	interface IContextGL {
	    container: HTMLElement;
	    clear(red?: number, green?: number, blue?: number, alpha?: number, depth?: number, stencil?: number, mask?: number): any;
	    configureBackBuffer(width: number, height: number, antiAlias: number, enableDepthAndStencil?: boolean): any;
	    createCubeTexture(size: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): ICubeTexture;
	    createIndexBuffer(numIndices: number): IIndexBuffer;
	    createProgram(): IProgram;
	    createTexture(width: number, height: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): ITexture;
	    createVertexBuffer(numVertices: number, data32PerVertex: number): IVertexBuffer;
	    dispose(): any;
	    drawToBitmapData(destination: BitmapData): any;
	    drawTriangles(indexBuffer: IIndexBuffer, firstIndex?: number, numTriangles?: number): any;
	    present(): any;
	    setBlendFactors(sourceFactor: string, destinationFactor: string): any;
	    setColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): any;
	    setCulling(triangleFaceToCull: string, coordinateSystem?: string): any;
	    setDepthTest(depthMask: boolean, passCompareMode: string): any;
	    setProgram(program: IProgram): any;
	    setProgramConstantsFromMatrix(programType: string, firstRegister: number, matrix: Matrix3D, transposedMatrix?: boolean): any;
	    setProgramConstantsFromArray(programType: string, firstRegister: number, data: number[], numRegisters?: number): any;
	    setSamplerStateAt(sampler: number, wrap: string, filter: string, mipfilter: string): any;
	    setScissorRectangle(rectangle: Rectangle): any;
	    setTextureAt(sampler: number, texture: ITextureBase): any;
	    setVertexBufferAt(index: number, buffer: IVertexBuffer, bufferOffset?: number, format?: string): any;
	    setRenderToTexture(target: ITextureBase, enableDepthAndStencil?: boolean, antiAlias?: number, surfaceSelector?: number): any;
	    setRenderToBackBuffer(): any;
	}
	export = IContextGL;
	
}
declare module "awayjs-stagegl/lib/base/IndexBufferFlash" {
	import ContextStage3D = require("awayjs-stagegl/lib/base/ContextStage3D");
	import IIndexBuffer = require("awayjs-stagegl/lib/base/IIndexBuffer");
	import ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
	class IndexBufferFlash extends ResourceBaseFlash implements IIndexBuffer {
	    private _context;
	    private _numIndices;
	    constructor(context: ContextStage3D, numIndices: number);
	    uploadFromArray(data: number[], startOffset: number, count: number): void;
	    dispose(): void;
	    numIndices: number;
	}
	export = IndexBufferFlash;
	
}
declare module "awayjs-stagegl/lib/base/ProgramFlash" {
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	import ContextStage3D = require("awayjs-stagegl/lib/base/ContextStage3D");
	import IProgram = require("awayjs-stagegl/lib/base/IProgram");
	import ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
	class ProgramFlash extends ResourceBaseFlash implements IProgram {
	    private _context;
	    constructor(context: ContextStage3D);
	    upload(vertexProgram: ByteArray, fragmentProgram: ByteArray): void;
	    dispose(): void;
	}
	export = ProgramFlash;
	
}
declare module "awayjs-stagegl/lib/base/TextureFlash" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import ContextStage3D = require("awayjs-stagegl/lib/base/ContextStage3D");
	import ITexture = require("awayjs-stagegl/lib/base/ITexture");
	import ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
	class TextureFlash extends ResourceBaseFlash implements ITexture {
	    private _context;
	    private _width;
	    private _height;
	    width: number;
	    height: number;
	    constructor(context: ContextStage3D, width: number, height: number, format: string, forRTT: boolean, streaming?: boolean);
	    dispose(): void;
	    uploadFromData(bitmapData: BitmapData, miplevel?: number): any;
	    uploadFromData(image: HTMLImageElement, miplevel?: number): any;
	}
	export = TextureFlash;
	
}
declare module "awayjs-stagegl/lib/base/VertexBufferFlash" {
	import ContextStage3D = require("awayjs-stagegl/lib/base/ContextStage3D");
	import IVertexBuffer = require("awayjs-stagegl/lib/base/IVertexBuffer");
	import ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
	class VertexBufferFlash extends ResourceBaseFlash implements IVertexBuffer {
	    private _context;
	    private _numVertices;
	    private _data32PerVertex;
	    constructor(context: ContextStage3D, numVertices: number, data32PerVertex: number);
	    uploadFromArray(data: number[], startVertex: number, numVertices: number): void;
	    numVertices: number;
	    data32PerVertex: number;
	    dispose(): void;
	}
	export = VertexBufferFlash;
	
}
declare module "awayjs-stagegl/lib/base/ContextStage3D" {
	import BitmapData = require("awayjs-core/lib/base/BitmapData");
	import Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
	import Rectangle = require("awayjs-core/lib/geom/Rectangle");
	import Sampler = require("awayjs-stagegl/lib/aglsl/Sampler");
	import CubeTextureFlash = require("awayjs-stagegl/lib/base/CubeTextureFlash");
	import IContextGL = require("awayjs-stagegl/lib/base/IContextGL");
	import IndexBufferFlash = require("awayjs-stagegl/lib/base/IndexBufferFlash");
	import ProgramFlash = require("awayjs-stagegl/lib/base/ProgramFlash");
	import TextureFlash = require("awayjs-stagegl/lib/base/TextureFlash");
	import ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
	import VertexBufferFlash = require("awayjs-stagegl/lib/base/VertexBufferFlash");
	class ContextStage3D implements IContextGL {
	    static contexts: Object;
	    static maxvertexconstants: number;
	    static maxfragconstants: number;
	    static maxtemp: number;
	    static maxstreams: number;
	    static maxtextures: number;
	    static defaultsampler: Sampler;
	    _iDriverInfo: any;
	    private _container;
	    private _width;
	    private _height;
	    private _cmdStream;
	    private _errorCheckingEnabled;
	    private _resources;
	    private _oldCanvas;
	    private _oldParent;
	    static debug: boolean;
	    static logStream: boolean;
	    _iCallback: (context: IContextGL) => void;
	    container: HTMLElement;
	    driverInfo: any;
	    errorCheckingEnabled: boolean;
	    constructor(container: HTMLCanvasElement, callback: (context: IContextGL) => void, include?: Sampler);
	    _iAddResource(resource: ResourceBaseFlash): void;
	    _iRemoveResource(resource: ResourceBaseFlash): void;
	    createTexture(width: number, height: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): TextureFlash;
	    createCubeTexture(size: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): CubeTextureFlash;
	    setTextureAt(sampler: number, texture: ResourceBaseFlash): void;
	    setSamplerStateAt(sampler: number, wrap: string, filter: string, mipfilter: string): void;
	    setStencilActions(triangleFace?: string, compareMode?: string, actionOnBothPass?: string, actionOnDepthFail?: string, actionOnDepthPassStencilFail?: string): void;
	    setStencilReferenceValue(referenceValue: number, readMask?: number, writeMask?: number): void;
	    setCulling(triangleFaceToCull: string, coordinateSystem?: string): void;
	    drawTriangles(indexBuffer: IndexBufferFlash, firstIndex?: number, numTriangles?: number): void;
	    setProgramConstantsFromMatrix(programType: string, firstRegister: number, matrix: Matrix3D, transposedMatrix?: boolean): void;
	    setProgramConstantsFromArray(programType: string, firstRegister: number, data: number[], numRegisters?: number): void;
	    setProgram(program: ProgramFlash): void;
	    present(): void;
	    clear(red?: number, green?: number, blue?: number, alpha?: number, depth?: number, stencil?: number, mask?: number): void;
	    createProgram(): ProgramFlash;
	    createVertexBuffer(numVertices: number, data32PerVertex: number): VertexBufferFlash;
	    createIndexBuffer(numIndices: number): IndexBufferFlash;
	    configureBackBuffer(width: number, height: number, antiAlias: number, enableDepthAndStencil?: boolean): void;
	    drawToBitmapData(destination: BitmapData): void;
	    setVertexBufferAt(index: number, buffer: VertexBufferFlash, bufferOffset?: number, format?: string): void;
	    setColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;
	    setBlendFactors(sourceFactor: string, destinationFactor: string): void;
	    setRenderToTexture(target: ResourceBaseFlash, enableDepthAndStencil?: boolean, antiAlias?: number, surfaceSelector?: number): void;
	    setRenderToBackBuffer(): void;
	    setScissorRectangle(rectangle: Rectangle): void;
	    setDepthTest(depthMask: boolean, passCompareMode: string): void;
	    dispose(): void;
	    addStream(stream: string): void;
	    execute(): number;
	}
	export = ContextStage3D;
	
}
declare module "awayjs-stagegl/lib/aglsl/AGLSLParser" {
	import Description = require("awayjs-stagegl/lib/aglsl/Description");
	class AGLSLParser {
	    parse(desc: Description): string;
	    regtostring(regtype: number, regnum: number, desc: Description, tag: any): string;
	    sourcetostring(s: any, subline: any, dwm: any, isscalar: any, desc: any, tag: any): string;
	}
	export = AGLSLParser;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLProfile" {
	class ContextGLProfile {
	    static BASELINE: string;
	    static BASELINE_CONSTRAINED: string;
	    static BASELINE_EXTENDED: string;
	}
	export = ContextGLProfile;
	
}
declare module "awayjs-stagegl/lib/base/ContextGLStencilAction" {
	class ContextGLStencilAction {
	    static DECREMENT_SATURATE: string;
	    static DECREMENT_WRAP: string;
	    static INCREMENT_SATURATE: string;
	    static INCREMENT_WRAP: string;
	    static INVERT: string;
	    static KEEP: string;
	    static SET: string;
	    static ZERO: string;
	}
	export = ContextGLStencilAction;
	
}
declare module "awayjs-stagegl/lib/pool/IndexDataPool" {
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import IndexData = require("awayjs-stagegl/lib/pool/IndexData");
	/**
	 *
	 */
	class IndexDataPool {
	    private static _pool;
	    constructor();
	    static getItem(subGeometry: SubGeometryBase, level: number, indexOffset: number): IndexData;
	    static disposeItem(id: number, level: number): void;
	    disposeData(id: number): void;
	}
	export = IndexDataPool;
	
}
declare module "awayjs-stagegl/lib/pool/VertexDataPool" {
	import SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
	import IndexData = require("awayjs-stagegl/lib/pool/IndexData");
	import VertexData = require("awayjs-stagegl/lib/pool/VertexData");
	/**
	 *
	 */
	class VertexDataPool {
	    private static _pool;
	    constructor();
	    static getItem(subGeometry: SubGeometryBase, indexData: IndexData, dataType: string): VertexData;
	    static disposeItem(subGeometry: SubGeometryBase, level: number, dataType: string): void;
	    disposeData(subGeometry: SubGeometryBase): void;
	}
	export = VertexDataPool;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/Sampler" {
	class Sampler {
	    shift: number;
	    mask: number;
	    value: number;
	    constructor(shift: number, mask: number, value: number);
	}
	export = Sampler;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/Flags" {
	class Flags {
	    simple: boolean;
	    horizontal: boolean;
	    fragonly: boolean;
	    matrix: boolean;
	}
	export = Flags;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/FS" {
	class FS {
	    format: string;
	    size: number;
	}
	export = FS;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/Opcode" {
	import Flags = require("awayjs-stagegl/lib/aglsl/assembler/Flags");
	import FS = require("awayjs-stagegl/lib/aglsl/assembler/FS");
	/**
	 *
	 */
	class Opcode {
	    dest: string;
	    a: FS;
	    b: FS;
	    opcode: number;
	    flags: Flags;
	    constructor(dest: string, aformat: string, asize: number, bformat: string, bsize: number, opcode: number, simple: boolean, horizontal: boolean, fragonly: boolean, matrix: boolean);
	}
	export = Opcode;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/OpcodeMap" {
	class OpcodeMap {
	    private static _map;
	    static map: Object[];
	    constructor();
	}
	export = OpcodeMap;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/Part" {
	import ByteArray = require("awayjs-core/lib/utils/ByteArray");
	class Part {
	    name: string;
	    version: number;
	    data: ByteArray;
	    constructor(name?: string, version?: number);
	}
	export = Part;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/RegMap" {
	class RegMap {
	    private static _map;
	    static map: any[];
	    constructor();
	}
	export = RegMap;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/SamplerMap" {
	class SamplerMap {
	    private static _map;
	    static map: Object[];
	    constructor();
	}
	export = SamplerMap;
	
}
declare module "awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler" {
	import Part = require("awayjs-stagegl/lib/aglsl/assembler/Part");
	class AGALMiniAssembler {
	    r: Object;
	    cur: Part;
	    constructor();
	    assemble(source: string, ext_part?: any, ext_version?: any): Object;
	    private processLine(line, linenr);
	    emitHeader(pr: Part): void;
	    emitOpcode(pr: Part, opcode: any): void;
	    emitZeroDword(pr: Part): void;
	    emitZeroQword(pr: any): void;
	    emitDest(pr: any, token: any, opdest: any): boolean;
	    stringToMask(s: string): number;
	    stringToSwizzle(s: any): number;
	    emitSampler(pr: Part, token: any, opsrc: any, opts: any): boolean;
	    emitSource(pr: any, token: any, opsrc: any): boolean;
	    addHeader(partname: any, version: any): void;
	}
	export = AGALMiniAssembler;
	
}